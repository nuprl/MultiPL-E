name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    def tri(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new ArrayBuffer[Long]\n        result += 1\n \
    \       result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(1L, 3L, 2L)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      d = 1 + i / 2\n            } else {\n                d = a + b + c\n  \
    \          }\n            result = result :+ d\n            a = b\n          \
    \  b = c\n            c = d\n        }\n        return result", "        var a\
    \ = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ == 1) result = result :+ a\n            else if (i == 2) result = result :+\
    \ b\n            else if (i == 3) result = result :+ c\n            else {\n \
    \               d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n               \
    \ a = b\n                b = c\n                c = d\n                result\
    \ = result :+ d\n            }\n        }\n        result", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        var a = 1L\n   \
    \     var b = 3L\n        var c = 2L\n        var d = 0L\n        var l = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            l = l :+ d\n            a = b\n        \
    \    b = c\n            c = d\n        }\n        l", "        var a = 1L\n  \
    \      var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) result\
    \ = result :+ a\n            else if (i == 1) result = result :+ b\n         \
    \   else if (i == 2) result = result :+ c\n            else {\n              \
    \  d = c + b + a\n                a = b\n                b = c\n             \
    \   c = d\n                result = result :+ d\n            }\n        }\n  \
    \      result", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        return result", "     \
    \   if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n      \
    \  var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        result ::= a\n        result ::= b\n        result ::= c\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2\n            } else {\n                d = a + b + c\n            }\n\
    \            a = b\n            b = c\n            c = d\n            result ::=\
    \ d\n        }\n        result.reverse", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n   \
    \         else if (n == 2) 2\n            else if (n == 3) 8\n            else\
    \ if (cache.contains(n)) cache(n)\n            else {\n                val result\
    \ = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \
    \            cache(n) = result\n                result\n            }\n      \
    \  }\n        (1 to n + 1).map(tri(_)).toList", "        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(0) = 1\n        dp(1) = 3\n        dp(2) = 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n     \
    \       else dp(i) = dp(i - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n   \
    \         if (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i\
    \ - 1) + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "    \
    \    val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) = 3\n\
    \        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n\
    \        }\n        a.toList", "        def tri(n : Long, a : Long, b : Long,\
    \ c : Long) : List[Long] = {\n            if (n == 0) List(a)\n            else\
    \ if (n == 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n       \
    \     else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n            else\
    \ a :: tri(n - 1, b, c, 1 + n / 2)\n        }\n        tri(n, 1, 3, 2)", "   \
    \     val cache = new HashMap[Long, Long]\n        cache(1) = 3\n        def tri(n\
    \ : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n          \
    \  else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n          \
    \      result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        val result = new Array[Long](n.toInt + 1)\n        result(0) = 1\n    \
    \    result(1) = 3\n        result(2) = 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result(i) = 1 + i / 2\n            else result(i)\
    \ = result(i - 1) + result(i - 2) + result(i + 1)\n        }\n        result.toList",
  "        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += 1 + i / 2\n            else result += result(i - 1) +\
    \ result(i - 2) + result(i + 1)\n        }\n        result.toList", "        val\
    \ m = n + 1\n        val result = new Array[Long](m.toInt)\n        result(0)\
    \ = 1\n        result(1) = 3\n        result(2) = 2\n        for (i <- 3 until\
    \ m.toInt) {\n            if (i % 2 == 0) result(i) = 1 + i / 2\n            else\
    \ result(i) = result(i - 1) + result(i - 2) + result(i + 1)\n        }\n     \
    \   result.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n \
    \       var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                d = 1 + i / 2\n            } else {\n             \
    \   d = a + b + c\n            }\n            result = result :+ d\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return result",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        val a = tri(n - 1)\n        val\
    \ b = a(a.length - 1)\n        val c = a(a.length - 2)\n        val d = a(a.length\
    \ - 3)\n        if (n % 2 == 0) return a :+ (1 + n / 2)\n        else return a\
    \ :+ (b + c + d)", "        var result = List[Long]()\n        for (i <- 0 to\
    \ n.toInt) {\n            if (i == 0) result = result :+ 1\n            else if\
    \ (i == 1) result = result :+ 3\n            else if (i == 2) result = result\
    \ :+ 2\n            else if (i % 2 == 0) result = result :+ (1 + i / 2)\n    \
    \        else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \        }\n        return result", "        if (n == 0) return List(1)\n    \
    \    if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n\
    \        var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     return result", "        var result = List[Long]()\n        var a = 1L\n\
    \        var b = 3L\n        var c = 2L\n        result = result :+ a\n      \
    \  result = result :+ b\n        result = result :+ c\n        for (i <- 3 to\
    \ n.toInt) {\n            val d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n \
    \           result = result :+ d\n            a = b\n            b = c\n     \
    \       c = d\n        }\n        result", "        if (n == 0) List(1)\n    \
    \    else if (n == 1) List(1, 3)\n        else if (n == 2) List(1, 3, 2)\n   \
    \     else {\n            val l = tri(n - 1)\n            if (n % 2 == 0) l :+\
    \ (1 + n / 2)\n            else l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3))\n        }", "        def tri(n : Long, l : List[Long]) : List[Long] =\
    \ {\n            if (n == 0) l\n            else {\n                val x = if\
    \ (n % 2 == 0) 1 + n / 2 else l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)\n                tri(n - 1, x :: l)\n            }\n        }\n        tri(n,\
    \ List(3)).reverse", "        var a = 1L\n        var b = 3L\n        var c =\
    \ 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n            else\
    \ d = a + b + c\n            result = result :+ d\n            a = b\n       \
    \     b = c\n            c = d\n        }\n        return result", "        val\
    \ cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n        cache(1)\
    \ = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i - 1)\
    \ + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "        var\
    \ list = new ListBuffer[Long]\n        list += 1\n        list += 3\n        list\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list +=\
    \ (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i +\
    \ 1))\n        }\n        list.toList", "        val cache = new Array[Long](n.toInt\
    \ + 1)\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n    \
    \        else if (n == 2) 2\n            else if (n == 3) 8\n            else\
    \ if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n              \
    \  val result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                cache(n.toInt) = result\n                result\n    \
    \        }\n        }\n        (1 to n).map(tri).toList", "        if (n == 0)\
    \ return List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return\
    \ List(1, 3, 2)\n        var result = List(1, 3, 2)\n        var i = 3\n     \
    \   while (i <= n) {\n            if (i % 2 == 0) result = result :+ (1 + i /\
    \ 2)\n            else result = result :+ (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n            i += 1\n        }\n        return result", "        val list\
    \ = new ListBuffer[Long]\n        list += 1\n        list += 3\n        list +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list += (1\
    \ + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i + 1))\n\
    \        }\n        list.toList", "        if (n == 0) return List(1)\n      \
    \  if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n \
    \       var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n      \
    \      if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     return result", "        val cache = new HashMap[Long, Long]\n        cache(1)\
    \ = 3\n        def tri(n : Long) : Long = {\n            if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n % 2 == 0) 1\
    \ + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n)\
    \ = result\n                result\n            }\n        }\n        (1 to n\
    \ + 1).map(tri(_)).toList", "        def tri(n : Long, list : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) list\n            else if (n % 2 == 0) tri(n -\
    \ 1, list :+ (1 + n / 2))\n            else tri(n - 1, list :+ (list(list.length\
    \ - 1) + list(list.length - 2) + list(list.length - 3)))\n        }\n        tri(n,\
    \ List(1, 3))", "        val l = new ListBuffer[Long]\n        l += 1\n      \
    \  l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i\
    \ + 1))\n        }\n        l.toList", "        def triRec(n : Long, list : List[Long])\
    \ : List[Long] = {\n            if (n == 0) list\n            else if (n % 2 ==\
    \ 0) triRec(n - 1, list :+ (1 + n / 2))\n            else triRec(n - 1, list :+\
    \ (list(list.length - 1) + list(list.length - 2) + list(list.length - 3)))\n \
    \       }\n        triRec(n, List(1))", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        var a = 1L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List[Long]()\n        result\
    \ = result :+ a\n        result = result :+ b\n        result = result :+ c\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      d = 1 + i / 2\n            } else {\n                d = a + b + c\n  \
    \          }\n            a = b\n            b = c\n            c = d\n      \
    \      result = result :+ d\n        }\n        return result", "        var list\
    \ = ListBuffer[Long]()\n        list += 1\n        list += 3\n        list +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list += (1\
    \ + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i + 1))\n\
    \        }\n        list.toList", "        var a = 1L\n        var b = 3L\n  \
    \      var c = 2L\n        var d = 8L\n        var result = List[Long]()\n   \
    \     result :+= a\n        result :+= b\n        result :+= c\n        result\
    \ :+= d\n        for (i <- 4 to n.toInt) {\n            a = b\n            b =\
    \ c\n            c = d\n            d = a + b + c\n            result :+= d\n\
    \        }\n        return result", "        if (n < 0) throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result",
  "        def triRec(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) acc\n            else if (n % 2 == 0) triRec(n - 1, acc :+ (1 + n /\
    \ 2))\n            else triRec(n - 1, acc :+ (acc(acc.length - 1) + acc(acc.length\
    \ - 2) + acc(acc.length - 3)))\n        }\n        triRec(n, List(1, 3, 2))",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     var a = 1L\n        var b = 3L\n        var c = 2L\n        var result =\
    \ List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            val d = if (i\
    \ % 2 == 0) 1 + i / 2 else a + b + c\n            result = result :+ d\n     \
    \       a = b\n            b = c\n            c = d\n        }\n        result",
  "        var l = List[Long]()\n        var a = 1L\n        var b = 3L\n        var\
    \ c = 2L\n        l = l :+ a\n        l = l :+ b\n        l = l :+ c\n       \
    \ for (i <- 3 to n.toInt) {\n            var d = 0L\n            if (i % 2 ==\
    \ 0) d = 1 + i / 2\n            else d = a + b + c\n            l = l :+ d\n \
    \           a = b\n            b = c\n            c = d\n        }\n        return\
    \ l", "        val result = new ListBuffer[Long]\n        result += 1\n      \
    \  result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList", " \
    \       var result = List[Long]()\n        var a = 1L\n        var b = 3L\n  \
    \      var c = 2L\n        result = result :+ a\n        result = result :+ b\n\
    \        result = result :+ c\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 + i / 2)\n        \
    \    } else {\n                result = result :+ (result(i - 1) + result(i -\
    \ 2) + result(i + 1))\n            }\n        }\n        return result", "   \
    \     if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n    \
    \    if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n  \
    \      for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        def tri(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else {\n                val next = if (n % 2 == 0) 1 + n / 2 else acc(acc.length\
    \ - 1) + acc(acc.length - 2) + acc(acc.length - 3)\n                tri(n - 1,\
    \ next :: acc)\n            }\n        }\n        tri(n, List(3, 1)).reverse",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        val a = ArrayBuffer[Long]()\n\
    \        a += 1\n        a += 3\n        a += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) a += (1 + i / 2)\n            else a += (a(i\
    \ - 1) + a(i - 2) + a(i + 1))\n        }\n        a.toList", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else\
    \ triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        triHelper(n, List(1))", "        var list = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n\
    \            else if (i == 1) list = list :+ 3\n            else if (i == 2) list\
    \ = list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n \
    \           else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n  \
    \      }\n        return list", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = a + b\
    \ + c\n        var result = List(a, b, c, d)\n        for (i <- 4 to n.toInt)\
    \ {\n            a = b\n            b = c\n            c = d\n            d =\
    \ a + b + c\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var result = List(a, b, c)\n        for (i <- 3 to\
    \ n.toInt) {\n            val d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n \
    \           result = result :+ d\n            a = b\n            b = c\n     \
    \       c = d\n        }\n        result", "        val a = new Array[Long](n.toInt\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else\
    \ a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n        a.toList", "     \
    \   if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n      \
    \  if (n == 2) return List(1, 3, 2)\n        val result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        var i\
    \ = 3\n        while (i <= n) {\n            if (i % 2 == 0) result += (1 + i\
    \ / 2)\n            else result += (result(i - 1) + result(i - 2) + result(i +\
    \ 1))\n            i += 1\n        }\n        result.toList", "        val a =\
    \ new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2)\
    \ = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) a(i) = 1\
    \ + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n\
    \        a.toList", "        var a = 1L\n        var b = 3L\n        var c = 2L\n\
    \        var d = 8L\n        var result = List(a, b, c, d)\n        for (i <-\
    \ 4 to n.toInt) {\n            var e = if (i % 2 == 0) 1 + i / 2 else d + c +\
    \ b\n            result = result :+ e\n            a = b\n            b = c\n\
    \            c = d\n            d = e\n        }\n        return result", "  \
    \      if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(1L, 3L, 2L)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      d = 1 + i / 2\n            } else {\n                d = a + b + c\n  \
    \          }\n            result = result :+ d\n            a = b\n          \
    \  b = c\n            c = d\n        }\n        return result", "        val cache\
    \ = new HashMap[Long, Long]\n        def tri(n : Long) : Long = {\n          \
    \  if (n == 1) 3\n            else if (n == 2) 2\n            else if (n == 3)\
    \ 8\n            else if (cache.contains(n)) cache(n)\n            else {\n  \
    \              val result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n + 1).map(tri(_)).toList", "       \
    \ var list = new ListBuffer[Long]\n        list += 1\n        list += 3\n    \
    \    list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n        }\n        list.toList", "        var list = List[Long]()\n \
    \       for (i <- 0 to n.toInt) {\n            if (i == 0) list = List(1)\n  \
    \          else if (i == 1) list = List(1, 3)\n            else if (i == 2) list\
    \ = List(1, 3, 2)\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n\
    \            else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n \
    \       }\n        list", "        val a = new Array[Long](n.toInt + 1)\n    \
    \    a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i\
    \ - 1) + a(i - 2) + a(i + 1)\n        }\n        a.toList", "        def tri(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n == 1) tri(n - 1, l :+ 3)\n            else if (n % 2 == 0) tri(n\
    \ - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l :+ (l(l.length - 1) +\
    \ l(l.length - 2) + l(l.length - 3)))\n        }\n        tri(n, List[Long]())",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n   \
    \         cache(i) = if (i % 2 == 0) 1 + i / 2 else cache(i - 1) + cache(i - 2)\
    \ + cache(i + 1)\n        }\n        cache.toList", "        if (n == 0) return\
    \ List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1,\
    \ 3, 2)\n        var result = List(1, 3, 2)\n        var i = 3\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n   \
    \         else result = result :+ (result(i - 1) + result(i - 2) + result(i +\
    \ 1))\n            i += 1\n        }\n        return result", "        if (n ==\
    \ 0) return List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2)\
    \ return List(1, 3, 2)\n        var result = List(1, 3, 2)\n        var i = 3\n\
    \        while (i <= n) {\n            if (i % 2 == 0) result = result :+ (1 +\
    \ i / 2)\n            else result = result :+ (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n            i += 1\n        }\n        return result", "   \
    \     if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n    \
    \    if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = a + b + c\n        var result = List(a, b,\
    \ c, d)\n        for (i <- 4 to n.toInt) {\n            a = b\n            b =\
    \ c\n            c = d\n            d = a + b + c\n            result = result\
    \ :+ d\n        }\n        return result", "        var a = 1L\n        var b\
    \ = 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        result ::= a\n        result ::= b\n        result ::= c\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2\n            } else {\n                d = a + b + c\n            }\n\
    \            a = b\n            b = c\n            c = d\n            result ::=\
    \ d\n        }\n        result.reverse", "        val a = new Array[Long](n.toInt\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else\
    \ a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n        a.toList", "     \
    \   if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n      \
    \  if (n == 2) return List(1, 3, 2)\n        var lst = List(1, 3, 2)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) lst = lst :+ (1 + i /\
    \ 2)\n            else lst = lst :+ (lst(i - 1) + lst(i - 2) + lst(i + 1))\n \
    \       }\n        return lst", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        var list = ListBuffer[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) list += 1\n            else if (i == 1) list += 3\n\
    \            else if (i == 2) list += 2\n            else if (i % 2 == 0) list\
    \ += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n        }\n        list.toList", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var a = 1L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        if (n == 0) return List(1)\n       \
    \ if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n  \
    \      var l = List(1, 3, 2)\n        var i = 3\n        while (i <= n) {\n  \
    \          if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            i += 1\n        }\n        return l",
  "        var list = ListBuffer[Long]()\n        list += 1\n        list += 3\n \
    \       list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2)\
    \ + list(i + 1))\n        }\n        list.toList", "        def tri(n : Long,\
    \ a : Long, b : Long, c : Long) : List[Long] = {\n            if (n == 0) List(a)\n\
    \            else if (n == 1) List(a, b)\n            else if (n == 2) List(a,\
    \ b, c)\n            else if (n % 2 == 0) a :: tri(n - 1, b, c, 1 + n / 2)\n \
    \           else a :: tri(n - 1, b, c, b + c + tri(n - 1)(n - 2))\n        }\n\
    \        tri(n, 1, 3, 2)", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc.reverse\n            else if (n\
    \ % 2 == 0) triHelper(n - 1, (1 + n / 2) :: acc)\n            else triHelper(n\
    \ - 1, (acc(0) + acc(1) + acc(2)) :: acc)\n        }\n        triHelper(n, List(1,\
    \ 3, 2))", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3,\
    \ 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result =\
    \ result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        return result", "       \
    \ val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long = {\n\
    \            if (n == 1) 3\n            else if (n == 2) 2\n            else if\
    \ (n == 3) 8\n            else if (cache.contains(n)) cache(n)\n            else\
    \ {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n                cache(n) = result\n               \
    \ result\n            }\n        }\n        (1 to n + 1).map(tri).toList", " \
    \       def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List(1))", "        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) result = result :+\
    \ a\n            else if (i == 1) result = result :+ b\n            else if (i\
    \ == 2) result = result :+ c\n            else {\n                d = a + b +\
    \ c\n                a = b\n                b = c\n                c = d\n   \
    \             result = result :+ d\n            }\n        }\n        result",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (n == 1) 3\n            else if (n % 2 == 0) 1 + n / 2\n \
    \           else {\n                if (cache.contains(n)) cache(n)\n        \
    \        else {\n                    val result = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                    cache(n) = result\n                    result\n  \
    \              }\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        val a = Array.fill(n.toInt + 1)(0L)\n        a(0) = 1\n        a(1) = 3\n\
    \        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n\
    \        }\n        a.toList", "        var a = 1L\n        var b = 3L\n     \
    \   var c = 2L\n        var d = 0L\n        var result = List[Long]()\n      \
    \  result :+= a\n        result :+= b\n        result :+= c\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n            else\
    \ d = a + b + c\n            a = b\n            b = c\n            c = d\n   \
    \         result :+= d\n        }\n        return result", "        var a = 1L\n\
    \        var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                d = 1 + i / 2\n            } else {\n                d\
    \ = a + b + c\n            }\n            a = b\n            b = c\n         \
    \   c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n \
    \       var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            i += 1\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 8L\n        var result = List(a,\
    \ b, c, d)\n        for (i <- 4 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                a = d\n                d = 1 + i / 2\n                result\
    \ = result :+ d\n            } else {\n                a = d\n               \
    \ d = a + b + c\n                result = result :+ d\n            }\n       \
    \     b = c\n            c = a\n        }\n        return result", "        val\
    \ a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) = 3\n     \
    \   a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) a(i)\
    \ = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n      \
    \  }\n        a.toList", "        var cache = new HashMap[Long, Long]\n      \
    \  def tri(n : Long) : Long = {\n            if (n == 1) 3\n            else if\
    \ (n == 2) 2\n            else if (n == 3) 8\n            else if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n % 2 == 0) 1\
    \ + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n)\
    \ = result\n                result\n            }\n        }\n        (1 to n\
    \ + 1).map(tri(_)).toList", "        var result = ListBuffer[Long]()\n       \
    \ result += 1\n        result += 3\n        result += 2\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else\
    \ result += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n     \
    \   result.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n \
    \       var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                d = 1 + i / 2\n            } else {\n             \
    \   d = a + b + c\n            }\n            result = result :+ d\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return result",
  "        val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) =\
    \ 3\n        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i\
    \ + 1)\n        }\n        a.toList", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (n == 1) 3\n           \
    \ else if (n == 2) 2\n            else if (n == 3) 8\n            else if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n % 2 == 0) 1\
    \ + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n)\
    \ = result\n                result\n            }\n        }\n        (1 to n.toInt\
    \ + 1).map(tri(_)).toList", "        val cache = new HashMap[Long, Long]\n   \
    \     def tri(n : Long) : Long = {\n            if (n == 1) 3\n            else\
    \ if (n == 2) 2\n            else if (n == 3) 8\n            else if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n % 2 == 0) 1\
    \ + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n)\
    \ = result\n                result\n            }\n        }\n        (0 to n.toInt).map(tri).toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(1L, 3L, 2L)\n\
    \        for (i <- 3L to n) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            a = b\n            b = c\n            c = d\n       \
    \     result = result :+ d\n        }\n        return result", "        var a\
    \ = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List[Long]()\n        result = result :+ a\n        result = result\
    \ :+ b\n        result = result :+ c\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            a = b\n       \
    \     b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result", "        val cache = new HashMap[Long, Long]\n      \
    \  def tri(n : Long) : Long = {\n            if (n == 1) return 3\n          \
    \  if (cache.contains(n)) return cache(n)\n            val result = if (n % 2\
    \ == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n            cache(n)\
    \ = result\n            result\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        var result = new ListBuffer[Long]();\n        result += 1;\n        result\
    \ += 3;\n        result += 2;\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) result += (1 + i / 2);\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1));\n        }\n        return result.toList;",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n   \
    \         if (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i\
    \ - 1) + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "    \
    \    def triHelper(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n == 1) l :+ 3\n            else if (n % 2\
    \ == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else triHelper(n - 1,\
    \ l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n   \
    \     triHelper(n, List[Long]())", "        val list = new ListBuffer[Long]\n\
    \        list += 1\n        list += 3\n        list += 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) list += (1 + i / 2)\n           \
    \ else list += (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        var result = List[Long]()\n        var a = 1L\n        var b = 3L\n   \
    \     var c = 2L\n        result = result :+ a\n        result = result :+ b\n\
    \        result = result :+ c\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                a = 1 + i / 2\n                result = result\
    \ :+ a\n            } else {\n                a = b + c + a\n                result\
    \ = result :+ a\n                b = c\n                c = a\n            }\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   var a = 1L\n        var b = 3L\n        var c = 2L\n        for (i <- 1 to\
    \ n.toInt) {\n            result = result :+ a\n            val d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n        }\n        return\
    \ result", "        var result = new ListBuffer[Long]\n        result += 1\n \
    \       result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) {\n                result = result :+ a\n            } else\
    \ if (i == 2) {\n                result = result :+ b\n            } else if (i\
    \ == 3) {\n                result = result :+ c\n            } else {\n      \
    \          d = a + b + c\n                a = b\n                b = c\n     \
    \           c = d\n                result = result :+ d\n            }\n     \
    \   }\n        result", "        def tri(n : Long, a : Long, b : Long, c : Long)\
    \ : List[Long] = {\n            if (n == 0) List(a)\n            else if (n ==\
    \ 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n            else\
    \ if (n % 2 == 0) a :: tri(n - 1, b, c, 1 + n / 2)\n            else a :: tri(n\
    \ - 1, b, c, b + c + a)\n        }\n        tri(n, 1, 3, 2)", "        var list\
    \ = new ListBuffer[Long]\n        list += 1\n        list += 3\n        list +=\
    \ 2\n        var i = 3\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n            i += 1\n        }\n        list.toList", "        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i == 1) l =\
    \ l :+ 3\n            else if (i == 2) l = l :+ 1\n            else if (i == 3)\
    \ l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n        \
    \    else l = l :+ (l(i - 2) + l(i - 3) + l(i - 1))\n        }\n        return\
    \ l", "        if (n == 0) return List(1)\n        else if (n == 1) return List(1,\
    \ 3)\n        else if (n == 2) return List(1, 3, 2)\n        else {\n        \
    \    var result = List(1, 3, 2)\n            var i = 3\n            while (i <=\
    \ n) {\n                if (i % 2 == 0) result = result :+ (1 + i / 2)\n     \
    \           else result = result :+ (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n                i += 1\n            }\n            return result\n  \
    \      }", "        var a = 1L\n        var b = 3L\n        var c = 2L\n     \
    \   var d = 0L\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) result = result :+ a\n            else if (i == 2)\
    \ result = result :+ b\n            else if (i == 3) result = result :+ c\n  \
    \          else {\n                d = c + b + a\n                a = b\n    \
    \            b = c\n                c = d\n                result = result :+\
    \ d\n            }\n        }\n        result", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var a = 1L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = a + b + c\n        var result = List(a, b, c, d)\n        for (i <- 4 to\
    \ n.toInt) {\n            a = b\n            b = c\n            c = d\n      \
    \      d = a + b + c\n            result = result :+ d\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(1L,\
    \ 3L, 2L)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                d = 1 + i / 2\n            } else {\n                d = a +\
    \ b + c\n            }\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (n == 1) 3\n            else if (n == 2) 2\n            else\
    \ if (n == 3) 8\n            else if (cache.contains(n)) cache(n)\n          \
    \  else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n          \
    \      result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if\
    \ (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n            else\
    \ if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i / 2) ::\
    \ l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n        return\
    \ l.reverse", "        val result = new ListBuffer[Long]\n        result += 1\n\
    \        result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n      \
    \      else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)))\n        }\n        tri(n, List(1, 3, 2))", "        var result = ListBuffer[Long]()\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += 1 + i / 2\n      \
    \      else result += result(i - 1) + result(i - 2) + result(i + 1)\n        }\n\
    \        result.toList", "        val cache = new Array[Long](n.toInt + 1)\n \
    \       cache(0) = 1\n        cache(1) = 3\n        cache(2) = 2\n        def\
    \ tri(n : Int) : Long = {\n            if (cache(n) == 0) {\n                if\
    \ (n % 2 == 0) cache(n) = 1 + n / 2\n                else cache(n) = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n            }\n            cache(n)\n        }\n\
    \        (0 to n.toInt).map(tri).toList", "        var a = 1L\n        var b =\
    \ 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i == 1) result = result :+\
    \ a\n            else if (i == 2) result = result :+ b\n            else if (i\
    \ == 3) result = result :+ c\n            else {\n                d = c + b +\
    \ a\n                a = b\n                b = c\n                c = d\n   \
    \             result = result :+ d\n            }\n        }\n        result",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n      \
    \      else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)))\n        }\n        tri(n, List(1))", "        var list = ListBuffer[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list += 1\n      \
    \      else if (i == 1) list += 3\n            else if (i == 2) list += 2\n  \
    \          else if (i % 2 == 0) list += (1 + i / 2)\n            else list +=\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long\
    \ = {\n            if (n == 1) 3\n            else if (n == 2) 2\n           \
    \ else if (n == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) {\n                result = result :+ a\n            } else\
    \ if (i == 2) {\n                result = result :+ b\n            } else if (i\
    \ == 3) {\n                result = result :+ c\n            } else {\n      \
    \          d = a + b + c\n                a = b\n                b = c\n     \
    \           c = d\n                result = result :+ d\n            }\n     \
    \   }\n        result", "        var l = ListBuffer[Long]()\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList", "        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        result", "        if\
    \ (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n        if (n\
    \ == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (1 + i\
    \ / 2)\n            else result = result :+ (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n        }\n        return result", "        var a = 1L\n        var b\
    \ = 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) result = result :+\
    \ a\n            else if (i == 1) result = result :+ b\n            else if (i\
    \ == 2) result = result :+ c\n            else {\n                if (i % 2 ==\
    \ 0) d = 1 + (i / 2)\n                else d = a + b + c\n                a =\
    \ b\n                b = c\n                c = d\n                result = result\
    \ :+ d\n            }\n        }\n        result", "        def tri(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l\
    \ :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n     \
    \   tri(n, List(1, 3, 2))", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 ==\
    \ 0) triHelper(n - 1, acc :+ (1 + n / 2))\n            else triHelper(n - 1, acc\
    \ :+ (acc(acc.length - 1) + acc(acc.length - 2) + acc(acc.length - 3)))\n    \
    \    }\n        triHelper(n, List(1))", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var result = List(a, b, c)\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ (1 + i / 2)\n            } else {\n                result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            }\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3,\
    \ 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result =\
    \ result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        return result", "       \
    \ var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n   \
    \     var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i == 1) result = result :+ a\n            else if (i == 2) result = result\
    \ :+ b\n            else if (i == 3) result = result :+ c\n            else {\n\
    \                d = a + b + c\n                a = b\n                b = c\n\
    \                c = d\n                result = result :+ d\n            }\n\
    \        }\n        result", "        if (n == 0) return List(1)\n        if (n\
    \ == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ l = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) +\
    \ l(i + 1))\n        }\n        return l", "        var a = 1L\n        var b\
    \ = 3L\n        var c = 2L\n        var d = 0L\n        var l = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2\
    \ else a + b + c\n            a = b\n            b = c\n            c = d\n  \
    \          l = l :+ d\n        }\n        return l", "        if (n == 0) return\
    \ List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1,\
    \ 3, 2)\n        var a = 1L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        var a = 1L\n        var b = 3L\n   \
    \     var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n   \
    \     for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n \
    \           else d = a + b + c\n            result = result :+ d\n           \
    \ a = b\n            b = c\n            c = d\n        }\n        return result",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (n == 1) 3\n            else if (n == 2) 2\n            else\
    \ if (n == 3) 8\n            else if (cache.contains(n)) cache(n)\n          \
    \  else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n          \
    \      result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        val l = tri(n - 1)\n        if\
    \ (n % 2 == 0) return l :+ (1 + n / 2)\n        else return l :+ (l(l.length -\
    \ 1) + l(l.length - 2) + l(l.length - 3))", "        var result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (n == 1) 3\n           \
    \ else if (n == 2) 2\n            else if (n == 3) 8\n            else if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n % 2 == 0) 1\
    \ + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache +=\
    \ (n -> result)\n                result\n            }\n        }\n        (1\
    \ to n + 1).map(tri(_)).toList", "        if (n == 0) return List(1)\n       \
    \ if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n  \
    \      var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n       \
    \ var result = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else {\n \
    \               d = a + b + c\n            }\n            result = result :+ d\n\
    \            a = b\n            b = c\n            c = d\n        }\n        return\
    \ result", "        var a = 1L\n        var b = 3L\n        var c = 2L\n     \
    \   var d = 0L\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) result = result :+ a\n            else if (i == 2)\
    \ result = result :+ b\n            else if (i == 3) result = result :+ c\n  \
    \          else {\n                if (i % 2 == 0) {\n                    d =\
    \ 1 + i / 2\n                    result = result :+ d\n                }\n   \
    \             else {\n                    d = a + b + c\n                    result\
    \ = result :+ d\n                    a = b\n                    b = c\n      \
    \              c = d\n                }\n            }\n        }\n        result",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List[Long](1,\
    \ 3, 2)\n        var i = 3\n        while (i <= n) {\n            if (i % 2 ==\
    \ 0) result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1,\
    \ 3, 2)\n        var i = 3\n        while (i <= n) {\n            if (i % 2 ==\
    \ 0) result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        var a = 1L\n        var b = 3L\n        var c = 2L\n\
    \        var d = 0L\n        var result = List[Long]()\n        result = result\
    \ :+ a\n        result = result :+ b\n        result = result :+ c\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2\n            } else {\n                d = a + b + c\n            }\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        var list = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n\
    \            else if (i == 1) list = list :+ 3\n            else if (i == 2) list\
    \ = list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n \
    \           else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n  \
    \      }\n        return list", "        def tri(n : Long, a : Long, b : Long,\
    \ c : Long) : List[Long] = {\n            if (n == 0) List(a)\n            else\
    \ if (n == 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n       \
    \     else {\n                if (n % 2 == 0) a :: tri(n - 1, b, c, 1 + n / 2)\n\
    \                else a :: tri(n - 1, b, c, b + c + tri(n + 1, b, c, 1 + (n +\
    \ 1) / 2).head)\n            }\n        }\n        tri(n, 1, 3, 2)", "       \
    \ if (n == 0) return List(1)\n        var a = 1L\n        var b = 3L\n       \
    \ var c = 2L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            val d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n          \
    \  result = result :+ d\n            a = b\n            b = c\n            c =\
    \ d\n        }\n        result", "        var a = 1L\n        var b = 3L\n   \
    \     var c = 2L\n        var d = 0L\n        var result = List[Long]()\n    \
    \    result :+= a\n        result :+= b\n        result :+= c\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1 + i\
    \ / 2\n            } else {\n                d = a + b + c\n            }\n  \
    \          a = b\n            b = c\n            c = d\n            result :+=\
    \ d\n        }\n        return result", "        val result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n == 1)\
    \ triHelper(n - 1, 3 :: acc)\n            else if (n % 2 == 0) triHelper(n - 1,\
    \ (1 + n / 2) :: acc)\n            else triHelper(n - 1, acc.head + acc.tail.head\
    \ + acc.tail.tail.head :: acc)\n        }\n        triHelper(n, List()).reverse",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                if (i % 2 == 0) {\n                    d = 1 + i / 2\n\
    \                    result = result :+ d\n                }\n               \
    \ else {\n                    d = a + b + c\n                    result = result\
    \ :+ d\n                    a = b\n                    b = c\n               \
    \     c = d\n                }\n            }\n        }\n        result", " \
    \       val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 1) 3\n            else if (n == 2) 2\n      \
    \      else if (n == 3) 8\n            else {\n                if (cache(n.toInt)\
    \ == 0) {\n                    if (n % 2 == 0) cache(n.toInt) = 1 + n / 2\n  \
    \                  else cache(n.toInt) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                }\n                cache(n.toInt)\n            }\n        }\n\
    \        (1 to n.toInt).map(tri).toList", "        if (n == 0) return List(1)\n\
    \        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      result = result :+ d\n            a = b\n            b = c\n          \
    \  c = d\n        }\n        return result", "        var list = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list = 1 :: list\n\
    \            else if (i == 1) list = 3 :: list\n            else if (i == 2) list\
    \ = 2 :: list\n            else if (i % 2 == 0) list = (1 + i / 2) :: list\n \
    \           else list = (list(0) + list(1) + list(2)) :: list\n        }\n   \
    \     list.reverse", "        val cache = new HashMap[Long, Long]\n        def\
    \ tri(n : Long) : Long = {\n            if (n == 1) 3\n            else if (n\
    \ % 2 == 0) 1 + n / 2\n            else {\n                if (cache.contains(n))\
    \ cache(n)\n                else {\n                    val result = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n                    cache(n) = result\n         \
    \           result\n                }\n            }\n        }\n        (1 to\
    \ n + 1).map(tri(_)).toList", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        var a = 1L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 8L\n        var result = List(a, b, c, d)\n    \
    \    for (i <- 4 to n.toInt) {\n            a = b\n            b = c\n       \
    \     c = d\n            d = a + b + c\n            result = result :+ d\n   \
    \     }\n        return result", "        def tri(n : Long, a : Long, b : Long,\
    \ c : Long) : List[Long] = {\n            if (n == 0) List(a)\n            else\
    \ if (n == 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n       \
    \     else if (n % 2 == 0) a :: tri(n - 1, b, c, 1 + n / 2)\n            else\
    \ a :: tri(n - 1, b, c, b + c + tri(n - 1)(n - 2))\n        }\n        tri(n,\
    \ 1, 3, 2)", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(1L,\
    \ 3L, 2L)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                d = 1 + i / 2\n            } else {\n                d = a +\
    \ b + c\n            }\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      var list = ListBuffer[Long]()\n        list += 1\n        list += 3\n \
    \       list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2)\
    \ + list(i + 1))\n        }\n        list.toList", "        if (n == 0) return\
    \ List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1,\
    \ 3, 2)\n        var a = 1L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (n == 1) 3\n           \
    \ else if (n % 2 == 0) 1 + n / 2\n            else {\n                if (cache.contains(n))\
    \ cache(n)\n                else {\n                    val result = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n                    cache(n) = result\n         \
    \           result\n                }\n            }\n        }\n        (0 to\
    \ n.toInt).map(tri(_)).toList", "        var list = ListBuffer[Long]()\n     \
    \   list += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) list += (1 + i / 2)\n            else list +=\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        var map = new HashMap[Long, Long]\n        map += (1L -> 3L)\n        def\
    \ tri(n : Long) : Long = {\n            if (map.contains(n)) map(n)\n        \
    \    else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                map += (n -> result)\n     \
    \           result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                d = a + b + c\n                a = b\n             \
    \   b = c\n                c = d\n                result = result :+ d\n     \
    \       }\n        }\n        result", "        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n \
    \       for (i <- 1 to n.toInt) {\n            if (i == 1) result = result :+\
    \ a\n            else if (i == 2) result = result :+ b\n            else if (i\
    \ == 3) result = result :+ c\n            else {\n                d = a + b +\
    \ c\n                a = b\n                b = c\n                c = d\n   \
    \             result = result :+ d\n            }\n        }\n        result",
  "        def tri(n : Long, a : Long, b : Long, c : Long) : List[Long] = {\n    \
    \        if (n == 0) List(a)\n            else if (n == 1) List(a, b)\n      \
    \      else if (n == 2) List(a, b, c)\n            else if (n % 2 == 0) a :: tri(n\
    \ - 1, b, c, a + b + c)\n            else a :: tri(n - 1, b, c, a + b + c)\n \
    \       }\n        tri(n, 1, 3, 2)", "        var list = List[Long]()\n      \
    \  for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n     \
    \       else if (i == 1) list = list :+ 3\n            else if (i == 2) list =\
    \ list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n   \
    \         else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n    \
    \    }\n        return list", "        var a = 1L\n        var b = 3L\n      \
    \  var c = 2L\n        var d = 0L\n        var result = List[Long]()\n       \
    \ for (i <- 1 to n.toInt) {\n            if (i == 1) result = result :+ a\n  \
    \          else if (i == 2) result = result :+ b\n            else if (i == 3)\
    \ result = result :+ c\n            else {\n                d = a + b + c\n  \
    \              a = b\n                b = c\n                c = d\n         \
    \       result = result :+ d\n            }\n        }\n        result", "   \
    \     var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) {\n                result = result :+ a\n            } else\
    \ if (i == 2) {\n                result = result :+ b\n            } else if (i\
    \ == 3) {\n                result = result :+ c\n            } else {\n      \
    \          d = a + b + c\n                a = b\n                b = c\n     \
    \           c = d\n                result = result :+ d\n            }\n     \
    \   }\n        result", "        val result = new ListBuffer[Long]\n        result\
    \ += 1\n        result += 3\n        result += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        def tri(n : Long, a : Long, b : Long, c : Long) : List[Long] = {\n    \
    \        if (n == 0) List()\n            else if (n == 1) List(a)\n          \
    \  else if (n == 2) List(a, b)\n            else if (n == 3) List(a, b, c)\n \
    \           else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n          \
    \  else a :: tri(n - 1, b, c, a + b + c)\n        }\n        tri(n, 1, 3, 2)",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n   \
    \         if (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i\
    \ - 1) + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "    \
    \    val result = new ListBuffer[Long]\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ val result = new ListBuffer[Long]\n        result += 1\n        result += 3\n\
    \        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) result += 1 + i / 2\n            else result += result(i - 1) + result(i\
    \ - 2) + result(i + 1)\n        }\n        result.toList", "        def triHelper(n\
    \ : Long, a : Long, b : Long, c : Long) : List[Long] = {\n            if (n ==\
    \ 0) List()\n            else if (n == 1) List(a)\n            else if (n == 2)\
    \ List(a, b)\n            else if (n == 3) List(a, b, c)\n            else if\
    \ (n % 2 == 0) a :: triHelper(n - 1, b, c, a + b + c)\n            else a :: triHelper(n\
    \ - 1, b, c, c + b + c)\n        }\n        triHelper(n, 1, 3, 2)", "        if\
    \ (n == 0) return List(1)\n        val a = new Array[Long](n.toInt + 1)\n    \
    \    a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i\
    \ - 1) + a(i - 2) + a(i + 1)\n        }\n        a.toList", "        var a = 1L\n\
    \        var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) d = 1 + i / 2\n            else d = a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        var result = ListBuffer[Long]()\n        result\
    \ += 1\n        result += 3\n        result += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                if (i % 2 == 0) {\n                    d = 1 + i / 2\n\
    \                    result = result :+ d\n                }\n               \
    \ else {\n                    d = a + b + c\n                    result = result\
    \ :+ d\n                    a = b\n                    b = c\n               \
    \     c = d\n                }\n            }\n        }\n        result", " \
    \       val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) =\
    \ 3\n        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i\
    \ + 1)\n        }\n        a.toList", "        def tri(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else {\n          \
    \      val next = if (n % 2 == 0) 1 + n / 2 else l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)\n                tri(n - 1, next :: l)\n            }\n\
    \        }\n        tri(n, List(3)).reverse", "        def tri(n : Long, a : Long,\
    \ b : Long, c : Long) : List[Long] = {\n            if (n == 0) List(a)\n    \
    \        else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n            else\
    \ a :: tri(n - 1, b, c, a + b + c)\n        }\n        tri(n, 1, 3, 2)", "   \
    \     var result = new ListBuffer[Long]\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n        if\
    \ (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n        var\
    \ i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n            i += 1\n        }\n        return result",
  "        def triRec(n : Long, list : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) list\n            else {\n                val next = if (n % 2 == 0)\
    \ 1 + n / 2 else list(list.length - 3) + list(list.length - 2) + list(list.length\
    \ - 1)\n                triRec(n - 1, list :+ next)\n            }\n        }\n\
    \        triRec(n, List(1, 3, 2))", "        def tri(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n == 1)\
    \ tri(n - 1, 3 :: acc)\n            else if (n == 2) tri(n - 1, 2 :: acc)\n  \
    \          else if (n % 2 == 0) tri(n - 1, (n / 2 + 1) :: acc)\n            else\
    \ tri(n - 1, acc.head + acc.tail.head + acc.tail.tail.head :: acc)\n        }\n\
    \        tri(n, List()).reverse", "        var a = 1L\n        var b = 3L\n  \
    \      var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n  \
    \      for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            result = result :+ d\n          \
    \  a = b\n            b = c\n            c = d\n        }\n        return result",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (n == 1) 3\n            else if (n == 2) 2\n            else\
    \ if (n == 3) 8\n            else if (cache.contains(n)) cache(n)\n          \
    \  else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n          \
    \      result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        if (n == 0) return List(1)\n        val a = Array.fill(n.toInt + 1)(0L)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else a(i)\
    \ = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n        a.toList", "        if\
    \ (n == 0) return List(1)\n        var a = 1L\n        var b = 3L\n        var\
    \ c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for\
    \ (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else a + b\
    \ + c\n            result = result :+ d\n            a = b\n            b = c\n\
    \            c = d\n        }\n        return result", "        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(0) = 1\n        dp(1) = 3\n        for (i <- 2 to n.toInt)\
    \ {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n            else dp(i) = dp(i\
    \ - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList", "        val cache\
    \ = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long = {\n     \
    \       if (n == 1) 3\n            else if (n == 2) 2\n            else if (n\
    \ == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n        \
    \    else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n  \
    \              result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List[Long]()\n        result :+= a\n        result :+= b\n\
    \        result :+= c\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                d = 1 + i / 2\n            } else {\n           \
    \     d = a + b + c\n            }\n            a = b\n            b = c\n   \
    \         c = d\n            result :+= d\n        }\n        return result",
  "        var a = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      result = result :+ d\n            a = b\n            b = c\n          \
    \  c = d\n        }\n        return result", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n   \
    \         else if (n == 2) 2\n            else if (n == 3) 8\n            else\
    \ if (cache.contains(n)) cache(n)\n            else {\n                val result\
    \ = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \
    \            cache(n) = result\n                result\n            }\n      \
    \  }\n        (1 to n + 1).map(tri(_)).toList", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var result = List(1, 3, 2)\n        var i = 3\n        while (i\
    \ <= n) {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n      \
    \      else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \            i += 1\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
