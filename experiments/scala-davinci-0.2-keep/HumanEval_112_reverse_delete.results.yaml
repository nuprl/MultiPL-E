language: scala
name: HumanEval_112_reverse_delete
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        var isPalindrome = true\n        for (i <- 0 until\
    \ result.length / 2) {\n            if (result(i) != result(result.length - 1\
    \ - i)) {\n                isPalindrome = false\n            }\n        }\n  \
    \      (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        val result = s.filter(!c.contains(_))\n        (result, result\
    \ == result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val r = sb.toString\n        (r, r == r.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val r = s.filterNot(c.contains(_))\n\
    \        (r, r == r.reverse)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filterNot(c.contains(_))\n\
    \        (s1, s1 == s1.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val resRev = res.reverse\n\
    \        val isPalindrome = res == resRev\n        return (res, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val res = s.filter(x\
    \ => !c.contains(x))\n        (res, res == res.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- sb.length -\
    \ 1 to 0 by -1) {\n            sb2.append(sb(i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val palindrome = result.reverse == result\n    \
    \    (result, palindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        val cb = new StringBuilder\n        for (i <- 0 until s.length) {\n \
    \           if (!c.contains(s(i))) sb.append(s(i))\n        }\n        for (i\
    \ <- sb.length - 1 to 0 by -1) {\n            cb.append(sb(i))\n        }\n  \
    \      (sb.toString, sb.toString == cb.toString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        val palindrome = result.equals(result.reverse)\n        (result, palindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        val cSet = c.toSet\n        for (i <- 0 until s.length) {\n         \
    \   if (!cSet.contains(s(i))) sb.append(s(i))\n        }\n        val sb2 = new\
    \ StringBuilder()\n        for (i <- 0 until sb.length) {\n            sb2.append(sb(sb.length\
    \ - 1 - i))\n        }\n        (sb.toString, sb.toString == sb2.toString)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filterNot(c.contains(_))\n\
    \        val s2 = s1.reverse\n        (s1, s1 == s2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val r = sb.toString\n        (r, r == r.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filter(x\
    \ => !c.contains(x))\n        val s2 = s1.reverse\n        return (s1, s1 == s2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        (sb.toString, sb.toString == sb.reverse.toString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbb2mq7b.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val sb2 =\
    \ new StringBuilder\n        for (i <- 0 until sb.length) {\n            sb2.append(sb(sb.length\
    \ - 1 - i))\n        }\n        (sb.toString, sb.toString == sb2.toString)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        (sb.toString, sb.toString == sb.reverse.toString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbb2mq7b.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val rev = sb.reverse.toString\n\
    \        (res, res == rev)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n \
    \   assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl9qh9qe_.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val t = s.filter(x\
    \ => !c.contains(x))\n        (t, t == t.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder()\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (s, false)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjozx2ptj.scala:18)\n\tat Problem.main(tmpjozx2ptj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        val result = s.filter(x => !c.contains(x))\n        return (result,\
    \ result == result.reverse)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.reverse == result\n  \
    \      (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s2 = s.filter(x\
    \ => !c.contains(x))\n        (s2, s2 == s2.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        return (result, isPalindrome)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (s, false)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjozx2ptj.scala:18)\n\tat Problem.main(tmpjozx2ptj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val result2 = result.reverse\n        if (result\
    \ == result2) {\n            return (result, true)\n        }\n        return\
    \ (result, false)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        (sb.toString, sb.toString == sb.reverse.toString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbb2mq7b.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        return (result, result ==\
    \ result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        (sb.toString,\
    \ sb.toString == sb.toString.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = \"\
    \"\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ result += s(i)\n        }\n        var isPalindrome = true\n        for (i <-\
    \ 0 until result.length / 2) {\n            if (result(i) != result(result.length\
    \ - 1 - i)) isPalindrome = false\n        }\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.toList.filter(x\
    \ => !c.contains(x))\n        val s2 = s1.reverse\n        val s3 = s1.mkString\n\
    \        val s4 = s2.mkString\n        if (s3 == s4) (s3, true) else (s3, false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        (sb.toString, sb.toString == sb.reverse.toString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbb2mq7b.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        val result = s.filter(x => !c.contains(x))\n        val isPalindrome\
    \ = result.equals(result.reverse)\n        (result, isPalindrome)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"\
    ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"\
    b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val res = result.equals(result.reverse)\n      \
    \  (result, res)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) result += s(i)\n        }\n        (result, result\
    \ == result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val isPalindrome = res == res.reverse\n\
    \        (res, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdlok64tm.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        val isPalindrome = result == result.reverse\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb1 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb1.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb1.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val t = s.filter(x\
    \ => !c.contains(x))\n        (t, t == t.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val r = sb.toString\n        (r, r == r.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        val palindrome = result.equals(result.reverse)\n        (result, palindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (s, false)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjozx2ptj.scala:18)\n\tat Problem.main(tmpjozx2ptj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filter(c.contains(_)\
    \ == false)\n        val s2 = s1.reverse\n        if (s1 == s2) (s1, true) else\
    \ (s1, false)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) result += s(i)\n        }\n        var check\
    \ = true\n        for (i <- 0 until result.length / 2) {\n            if (result(i)\
    \ != result(result.length - 1 - i)) check = false\n        }\n        (result,\
    \ check)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.reverse == result\n  \
    \      (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmpe98frwag.scala:18)\n\tat Problem.main(tmpe98frwag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) {\n                result += s(i)\n         \
    \   }\n        }\n        var isPalindrome = true\n        for (i <- 0 until result.length\
    \ / 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n    \
    \            isPalindrome = false\n            }\n        }\n        return (result,\
    \ isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) {\n                result += s(i)\n         \
    \   }\n        }\n        return (result, result == result.reverse)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"\
    ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"\
    b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdlok64tm.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n      \
    \  (s2, s2 == s3)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.reverse == result\n  \
    \      (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        val s2 = s.toCharArray\n        for (i <- 0 until s2.length) {\n    \
    \        if (!c.contains(s2(i))) sb.append(s2(i))\n        }\n        val s3 =\
    \ sb.toString\n        (s3, s3 == s3.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result : String\
    \ = \"\"\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ {\n                result += s(i)\n            }\n        }\n        return\
    \ (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                sb.append(s(i))\n            }\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) result += s(i)\n        }\n        var check\
    \ = true\n        for (i <- 0 until result.length / 2) {\n            if (result(i)\
    \ != result(result.length - 1 - i)) check = false\n        }\n        (result,\
    \ check)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder()\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        return (res, res == res.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        return (\"\", false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vd92ml8.scala:18)\n\tat Problem.main(tmp1vd92ml8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filter(x\
    \ => !c.contains(x))\n        val s2 = s1.reverse\n        (s1, s1 == s2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val r = s.filter(x\
    \ => !c.contains(x))\n        (r, r == r.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val s1 = s.filterNot(c.contains(_))\n\
    \        (s1, s1 == s1.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        val result = s.filter(x => !c.contains(x))\n        return (result,\
    \ result == result.reverse)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.reverse == result\n  \
    \      (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder(s)\n\
    \        for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n\
    \                sb.deleteCharAt(i)\n                i -= 1\n            }\n \
    \       }\n        val result = sb.toString\n        val isPalindrome = result\
    \ == result.reverse\n        (result, isPalindrome)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdlok64tm.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"),\
    \ (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        val result_reverse = result.reverse\n        if\
    \ (result == result_reverse) {\n            return (result, true)\n        } else\
    \ {\n            return (result, false)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        // Write your code\
    \ here\n        (s, true)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47xir22s.scala:18)\n\tat Problem.main(tmp47xir22s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and True/False for the check.\n    // Example\n    // For\
    \ s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s\
    \ = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s\
    \ = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s\
    \ : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793650
