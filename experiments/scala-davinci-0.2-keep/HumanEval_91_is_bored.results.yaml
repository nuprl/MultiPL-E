language: scala
name: HumanEval_91_is_bored
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == 'I') {\n                var j = i\n             \
    \   while (j < S.length && S(j) != '.' && S(j) != '?' && S(j) != '!') j += 1\n\
    \                if (j < S.length) {\n                    count += 1\n       \
    \             i = j\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5q22ualm.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    i = j\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment to\
    \ val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.map(w\
    \ => if (w.startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2m54yj6.scala:18)\n\tat Problem.main(tmpr2m54yj6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.count(_.startsWith(\"\
    I\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1i_iq570.scala:18)\n\tat Problem.main(tmp1i_iq570.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrsnaf6o.scala:24)\n\tat Problem.main(tmpgrsnaf6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(x\
    \ => x.trim().startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpba97fuqn.scala:18)\n\tat Problem.main(tmpba97fuqn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(x\
    \ => x.startsWith(\"I\")).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwnmhxvro.scala:18)\n\tat Problem.main(tmpwnmhxvro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z2i2ucf.scala:24)\n\tat Problem.main(tmp0z2i2ucf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => s.trim).filter(s => s.startsWith(\"I\")).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuo4kuhyh.scala:18)\n\tat Problem.main(tmpuo4kuhyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpga50pf80.scala:18)\n\tat Problem.main(tmpga50pf80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzov8_az1.scala:22)\n\tat Problem.main(tmpzov8_az1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var words = S.split(\"\
    \ \")\n        for (word <- words) {\n            if (word.equals(\"I\")) count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprddd9xrs.scala:26)\n\tat Problem.main(tmprddd9xrs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim().startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63dwe9xm.scala:18)\n\tat Problem.main(tmp63dwe9xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                boredoms +=\
    \ 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ajzkrl7.scala:26)\n\tat Problem.main(tmp3ajzkrl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"\\\\.|\\\\?|\\\\!\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97nmz1b_.scala:22)\n\tat Problem.main(tmp97nmz1b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrsnaf6o.scala:24)\n\tat Problem.main(tmpgrsnaf6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                boredoms +=\
    \ 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ajzkrl7.scala:26)\n\tat Problem.main(tmp3ajzkrl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf8nrlhq.scala:22)\n\tat Problem.main(tmpqf8nrlhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(word\
    \ => word.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is\
    \ the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1530pxd8.scala:18)\n\tat Problem.main(tmp1530pxd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefbgx8pj.scala:17:84 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mwhile\e[0m (i < S.length && S(i)\
    \ != \e[31m'.'\e[0m && S(i) != \e[31m'?'\e[0m && S(i) != \e[31m'!'\e[0m) i +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \                                          ^^^^\e[0m\n\e[31m   |\e[0m        \
    \            value += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793207
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                boredoms +=\
    \ 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ajzkrl7.scala:26)\n\tat Problem.main(tmp3ajzkrl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oxi1ezy.scala:22)\n\tat Problem.main(tmp5oxi1ezy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf8nrlhq.scala:22)\n\tat Problem.main(tmpqf8nrlhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5d_czra.scala:24)\n\tat Problem.main(tmph5d_czra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            else i += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpolk6dyyz.scala:26)\n\tat Problem.main(tmpolk6dyyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"\
    I\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzr5bw4aq.scala:18)\n\tat Problem.main(tmpzr5bw4aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrsnaf6o.scala:24)\n\tat Problem.main(tmpgrsnaf6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf8nrlhq.scala:22)\n\tat Problem.main(tmpqf8nrlhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(_.startsWith(\"\
    I\")).size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfg8fv8wu.scala:18)\n\tat Problem.main(tmpfg8fv8wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(_.startsWith(\"\
    I\")).size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfg8fv8wu.scala:18)\n\tat Problem.main(tmpfg8fv8wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        val\
    \ boredoms = sentences.filter(s => s.trim().startsWith(\"I\"))\n        boredoms.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjbimlric.scala:19)\n\tat Problem.main(tmpjbimlric.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrsnaf6o.scala:24)\n\tat Problem.main(tmpgrsnaf6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => if (s.startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4gja6ee.scala:18)\n\tat Problem.main(tmpm4gja6ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzov8_az1.scala:22)\n\tat Problem.main(tmpzov8_az1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(w\
    \ => w.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28r525rj.scala:18)\n\tat Problem.main(tmp28r525rj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"\
    I\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzr5bw4aq.scala:18)\n\tat Problem.main(tmpzr5bw4aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val s = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i).startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0nmm9au.scala:22)\n\tat Problem.main(tmpo0nmm9au.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => if (s.trim.startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9lskhiny.scala:18)\n\tat Problem.main(tmp9lskhiny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(x\
    \ => x.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv3l5xkw.scala:18)\n\tat Problem.main(tmpfv3l5xkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.map(x\
    \ => if (x.trim().startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmupt5b4b.scala:18)\n\tat Problem.main(tmpmupt5b4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5d_czra.scala:24)\n\tat Problem.main(tmph5d_czra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oxi1ezy.scala:22)\n\tat Problem.main(tmp5oxi1ezy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var cnt = 0L\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                cnt += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        cnt\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5fwbci_.scala:26)\n\tat Problem.main(tmpj5fwbci_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43q_7efl.scala:22)\n\tat Problem.main(tmp43q_7efl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.map(x\
    \ => if (x.startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0wmxmdr.scala:18)\n\tat Problem.main(tmpp0wmxmdr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oxi1ezy.scala:22)\n\tat Problem.main(tmp5oxi1ezy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val s = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i).trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73izuunb.scala:22)\n\tat Problem.main(tmp73izuunb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => s.trim).filter(s => s.startsWith(\"I\")).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuo4kuhyh.scala:18)\n\tat Problem.main(tmpuo4kuhyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for (s <- S.split(\"\\\\\
    .|\\\\?|\\\\!\")) {\n            if (s.trim.startsWith(\"I\")) count += 1\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5cr2ojw.scala:21)\n\tat Problem.main(tmpm5cr2ojw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefbgx8pj.scala:17:84 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mwhile\e[0m (i < S.length && S(i)\
    \ != \e[31m'.'\e[0m && S(i) != \e[31m'?'\e[0m && S(i) != \e[31m'!'\e[0m) i +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \                                          ^^^^\e[0m\n\e[31m   |\e[0m        \
    \            value += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793207
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        val\
    \ boredoms = sentences.filter(s => s.trim.startsWith(\"I\"))\n        boredoms.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfpbgbs7.scala:19)\n\tat Problem.main(tmpvfpbgbs7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.count(s\
    \ => s.trim.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xs38fym.scala:18)\n\tat Problem.main(tmp2xs38fym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf8nrlhq.scala:22)\n\tat Problem.main(tmpqf8nrlhq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => s.trim).filter(s => s.startsWith(\"I\")).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuo4kuhyh.scala:18)\n\tat Problem.main(tmpuo4kuhyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzov8_az1.scala:22)\n\tat Problem.main(tmpzov8_az1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var isStart = false\n \
    \       for (i <- 0 until S.length) {\n            if (S(i) == '.' || S(i) ==\
    \ '?' || S(i) == '!') {\n                isStart = false\n            } else if\
    \ (S(i) == 'I') {\n                isStart = true\n            } else if (isStart\
    \ && S(i) == ' ') {\n                count += 1\n                isStart = false\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2tq9x6vj.scala:29)\n\tat Problem.main(tmp2tq9x6vj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val arr = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (s <- arr) {\n            if (s.trim().startsWith(\"I\")) count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6on8oclv.scala:22)\n\tat Problem.main(tmp6on8oclv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                boredoms +=\
    \ 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ajzkrl7.scala:26)\n\tat Problem.main(tmp3ajzkrl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(x\
    \ => x.trim()).filter(x => x.startsWith(\"I\")).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkg6c_ik.scala:18)\n\tat Problem.main(tmppkg6c_ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val pattern = \"I\".r\n        val sentences =\
    \ S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (pattern.findFirstIn(sentence) != None) count += 1\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bqr2g9w.scala:23)\n\tat Problem.main(tmp4bqr2g9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpga50pf80.scala:18)\n\tat Problem.main(tmpga50pf80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z2i2ucf.scala:24)\n\tat Problem.main(tmp0z2i2ucf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe98dj8xn.scala:22)\n\tat Problem.main(tmpe98dj8xn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oxi1ezy.scala:22)\n\tat Problem.main(tmp5oxi1ezy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => if (s.startsWith(\"I\")) 1 else 0).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4gja6ee.scala:18)\n\tat Problem.main(tmpm4gja6ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        val words = S.split(\"\
    [.?!]\")\n        for (word <- words) {\n            if (word.startsWith(\"I\"\
    )) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4z1gzote.scala:22)\n\tat Problem.main(tmp4z1gzote.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(x\
    \ => x.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv3l5xkw.scala:18)\n\tat Problem.main(tmpfv3l5xkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(x\
    \ => x.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8huexyzr.scala:18)\n\tat Problem.main(tmp8huexyzr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793211
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oxi1ezy.scala:22)\n\tat Problem.main(tmp5oxi1ezy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpga50pf80.scala:18)\n\tat Problem.main(tmpga50pf80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        val words = S.split(\"\
    [.?!]\")\n        for (word <- words) {\n            if (word.startsWith(\"I\"\
    )) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6moo0jit.scala:22)\n\tat Problem.main(tmp6moo0jit.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793212
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3tk3kvb.scala:22)\n\tat Problem.main(tmpw3tk3kvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.count(x\
    \ => x.startsWith(\"I\"))\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hgg4n74.scala:18)\n\tat Problem.main(tmp7hgg4n74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793212
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(x\
    \ => x.startsWith(\"I\")).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv3l5xkw.scala:18)\n\tat Problem.main(tmpfv3l5xkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz12sicm.scala:22)\n\tat Problem.main(tmppz12sicm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"[.?!]\")\n        words.filter(x\
    \ => x.trim().startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptt3hzvuo.scala:18)\n\tat Problem.main(tmptt3hzvuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793212
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwpcw57wf.scala:26)\n\tat Problem.main(tmpwpcw57wf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793212
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigli5hus.scala:26)\n\tat Problem.main(tmpigli5hus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    // 1\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7rs1e5s.scala:18)\n\tat Problem.main(tmpm7rs1e5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793204
