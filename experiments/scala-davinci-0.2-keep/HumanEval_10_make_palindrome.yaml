name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
  \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
  \    // 'catac'\n    def makePalindrome(string : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        suffix(0) = 0\n        var i = 1\n        var j =\
    \ 0\n        while (i < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(i) = j + 1\n                i += 1\n                j += 1\n\
    \            } else {\n                if (j == 0) {\n                    suffix(i)\
    \ = 0\n                    i += 1\n                } else {\n                \
    \    j = suffix(j - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        string + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindrome\
    \ = suffix + reversedPrefix\n        val reversedPalindrome = palindrome.reverse\n\
    \        val palindromePrefix = palindrome.substring(0, n / 2)\n        val reversedPalindromePrefix\
    \ = reversedPalindrome.substring(0, n / 2)\n        if (palindromePrefix == reversedPalindromePrefix)\
    \ palindrome else palindrome + reversedPalindromePrefix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindrome = suffix + reversedPrefix\n        val\
    \ palindromeLength = palindrome.length\n        val longestPalindromeSuffix =\
    \ (0 until palindromeLength).find(i => palindrome.substring(i, palindromeLength)\
    \ == palindrome.substring(i, palindromeLength).reverse) match {\n            case\
    \ Some(i) => palindrome.substring(i, palindromeLength)\n            case None\
    \ => \"\"\n        }\n        val prefixToAppend = reversedPrefix.substring(longestPalindromeSuffix.length,\
    \ reversedPrefix.length)\n        string + prefixToAppend", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = (0 until n).find(i => string.substring(i)\
    \ == string.substring(i).reverse).getOrElse(0)\n        string + string.substring(0,\
    \ n - suffix).reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = (1 to n).map(i => string.substring(n\
    \ - i, n)).find(s => s == s.reverse).get\n        val palindrome = string.substring(0,\
    \ n - palindromeSuffix.length) + palindromeSuffix\n        palindrome + reversePrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse.zip(suffix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindromePrefix = reversedPrefix.reverse.zip(reversedPrefix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindrome = palindromePrefix\
    \ + palindromeSuffix\n        val result = palindrome + reversedPrefix.substring(palindromePrefix.length)\n\
    \        result", "        if (string.length == 0) return string\n        val\
    \ suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reverse = new StringBuilder(prefix).reverse.toString\n\
    \        val palindrome = suffix + reverse\n        val palindromeSuffix = palindrome.substring(0,\
    \ palindrome.length / 2)\n        val palindromePrefix = palindrome.substring(palindrome.length\
    \ / 2)\n        val palindromeSuffixReverse = new StringBuilder(palindromeSuffix).reverse.toString\n\
    \        if (palindromeSuffixReverse == palindromePrefix) palindrome\n       \
    \ else makePalindrome(string + string.charAt(string.length - 1))", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = (1 to n / 2).find(i => suffix.substring(0, i)\
    \ == reversedPrefix.substring(n / 2 - i, n / 2)).getOrElse(0)\n        string\
    \ + reversedPrefix.substring(n / 2 - palindromeSuffix, n / 2)", "        val longestPalindromeSuffix\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindromeSuffix.length)\n        string + prefix.reverse",
  "        val length = string.length\n        val reverse = string.reverse\n    \
    \    val suffix = string.substring(0, length - 1)\n        val prefix = string.substring(1,\
    \ length)\n        if (suffix == reverse) string\n        else if (prefix == reverse)\
    \ string + string.charAt(0)\n        else string + reverse.substring(length -\
    \ suffix.indexOf(reverse.substring(0, length - 1)))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   suffix(0) = 0\n        var i = 1\n        var j = 0\n        while (i < n)\
    \ {\n            if (string(i) == string(j)) {\n                suffix(i) = j\
    \ + 1\n                i += 1\n                j += 1\n            } else {\n\
    \                if (j == 0) {\n                    suffix(i) = 0\n          \
    \          i += 1\n                } else {\n                    j = suffix(j\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        for (i <- 0 until n) {\n    \
    \        var j = 0\n            while (i - j >= 0 && i + j < n && string(i - j)\
    \ == string(i + j)) j += 1\n            suffix(i) = j\n        }\n        val\
    \ prefix = new Array[Int](n)\n        for (i <- 0 until n) {\n            var\
    \ j = 0\n            while (i - j >= 0 && i + j + 1 < n && string(i - j) == string(i\
    \ + j + 1)) j += 1\n            prefix(i) = j\n        }\n        var max = 0\n\
    \        var maxIndex = 0\n        for (i <- 0 until n) {\n            if (suffix(i)\
    \ > max) {\n                max = suffix(i)\n                maxIndex = i\n  \
    \          }\n            if (prefix(i) > max) {\n                max = prefix(i)\n\
    \                maxIndex = i\n            }\n        }\n        val prefixString\
    \ = string.substring(0, maxIndex - max + 1)\n        val suffixString = string.substring(maxIndex\
    \ + max)\n        prefixString + suffixString.reverse + suffixString", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2)\n    \
    \    val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.reverse.substring(0, suffix.length - suffix.indexOf(reversedPrefix))\n\
    \        suffix + reversedPrefix + palindromicSuffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.reverse\n        val palindrome = suffix + reversedPrefix\n       \
    \ if (palindromeSuffix == prefix) palindrome\n        else string + reversedPrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix + reversedPrefix\n   \
    \     val palindrome = string + palindromeSuffix\n        palindrome", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        if (suffixPalindrome == suffix) return string\n  \
    \      val prefixPalindrome = prefix.reverse\n        val prefixLength = prefixPalindrome.length\n\
    \        val suffixLength = suffixPalindrome.length\n        val prefixPalindromePrefix\
    \ = prefixPalindrome.substring(0, min(prefixLength, suffixLength))\n        val\
    \ suffixPalindromeSuffix = suffixPalindrome.substring(max(0, suffixLength - prefixLength))\n\
    \        return prefixPalindromePrefix + string + suffixPalindromeSuffix", " \
    \       val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val suffixPalindrome = (suffix\
    \ + suffix.reverse).substring(0, string.length)\n        val prefixPalindrome\
    \ = (prefix + prefix.reverse).substring(0, string.length)\n        if (suffixPalindrome.length\
    \ > prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val longestPalindrome = Array.fill(n)(0)\n \
    \       var center = 0\n        var right = 0\n        for (i <- 0 until n) {\n\
    \            val mirror = 2 * center - i\n            if (i < right) longestPalindrome(i)\
    \ = min(right - i, longestPalindrome(mirror))\n            var left = i - (1 +\
    \ longestPalindrome(i))\n            var right = i + (1 + longestPalindrome(i))\n\
    \            while (left >= 0 && right < n && string(left) == string(right)) {\n\
    \                longestPalindrome(i) += 1\n                left -= 1\n      \
    \          right += 1\n            }\n            if (i + longestPalindrome(i)\
    \ > right) {\n                center = i\n                right = i + longestPalindrome(i)\n\
    \            }\n        }\n        val palindrome = string.substring(0, n - longestPalindrome(n\
    \ - 1))\n        palindrome + palindrome.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix))\n        val palindromicPrefix\
    \ = reversedPrefix.substring(reversedPrefix.indexOf(palindromicSuffix))\n    \
    \    palindromicPrefix + string + palindromicSuffix.reverse", "        val n =\
    \ string.length\n        val dp = Array.ofDim[Int](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 1\n            if (i + 1 < n) {\n       \
    \         dp(i)(i + 1) = if (string(i) == string(i + 1)) 2 else 1\n          \
    \  }\n        }\n        for (k <- 3 to n) {\n            for (i <- 0 to n - k)\
    \ {\n                val j = i + k - 1\n                dp(i)(j) = if (string(i)\
    \ == string(j)) dp(i + 1)(j - 1) + 2 else max(dp(i + 1)(j), dp(i)(j - 1))\n  \
    \          }\n        }\n        val prefix = string.substring(0, n - dp(0)(n\
    \ - 1))\n        string + prefix.reverse", "        val n = string.length\n  \
    \      val suffix = new Array[Int](n)\n        suffix(0) = 0\n        var i =\
    \ 1\n        var j = 0\n        while (i < n) {\n            if (string(i) ==\
    \ string(j)) {\n                suffix(i) = j + 1\n                i += 1\n  \
    \              j += 1\n            } else {\n                if (j == 0) {\n \
    \                   suffix(i) = 0\n                    i += 1\n              \
    \  } else {\n                    j = suffix(j - 1)\n                }\n      \
    \      }\n        }\n        val prefix = string.substring(0, n - suffix(n - 1))\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = Array.ofDim[Int](n)\n        var i = 0\n        var j = 1\n       \
    \ while (j < n) {\n            if (string(i) == string(j)) {\n               \
    \ suffix(j) = i + 1\n                i += 1\n            } else {\n          \
    \      if (i == 0) suffix(j) = 0\n                else {\n                   \
    \ i = suffix(i - 1)\n                    j -= 1\n                }\n         \
    \   }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        var longestPalindrome\
    \ = \"\"\n        for (i <- 0 to string.length) {\n            val suffix = string.substring(i)\n\
    \            if (suffix.length > longestPalindrome.length && isPalindrome(suffix))\
    \ longestPalindrome = suffix\n        }\n        string + string.substring(0,\
    \ string.length - longestPalindrome.length).reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        var longestPalindrome = string\n        var longestPalindromeLength = 0\n\
    \        for (i <- 0 to string.length) {\n            val substring = string.substring(i)\n\
    \            if (substring.length > longestPalindromeLength && substring.reverse\
    \ == substring) {\n                longestPalindrome = substring\n           \
    \     longestPalindromeLength = substring.length\n            }\n        }\n \
    \       string + string.substring(0, string.length - longestPalindromeLength).reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n        return\
    \ string + reversePrefix.substring(palindromeSuffix.length)", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  val n = string.length\n        val suffix = Array.ofDim[Int](n)\n        for\
    \ (i <- 0 until n) {\n            var j = 0\n            while (i - j >= 0 &&\
    \ i + j < n && string(i - j) == string(i + j)) j += 1\n            suffix(i) =\
    \ j\n        }\n        var max = 0\n        var maxIndex = 0\n        for (i\
    \ <- 0 until n) {\n            if (suffix(i) > max) {\n                max = suffix(i)\n\
    \                maxIndex = i\n            }\n        }\n        val prefix =\
    \ string.substring(0, maxIndex - max + 1)\n        string + prefix.reverse", " \
    \       val n = string.length\n        val dp = Array.ofDim[Int](n, n)\n     \
    \   for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n  \
    \          if (string(i) == string(i + 1)) dp(i)(i + 1) = 2\n            else\
    \ dp(i)(i + 1) = 1\n        }\n        for (k <- 3 to n) {\n            for (i\
    \ <- 0 to n - k) {\n                val j = i + k - 1\n                if (string(i)\
    \ == string(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j)\
    \ = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        val palindromeLength\
    \ = dp(0)(n - 1)\n        val prefix = string.substring(0, n - palindromeLength)\n\
    \        val suffix = string.substring(n - palindromeLength, n)\n        prefix\
    \ + suffix.reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        if (palindrome.length\
    \ == n) palindrome\n        else {\n            val suffix2 = string.substring(n\
    \ / 2 + 1, n)\n            val prefix2 = string.substring(0, n / 2 + 1)\n    \
    \        val reversedPrefix2 = prefix2.reverse\n            val palindrome2 =\
    \ suffix2 + reversedPrefix2\n            if (palindrome2.length == n) palindrome2\n\
    \            else palindrome\n        }", "        val n = string.length\n   \
    \     val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        palindromePrefix + suffix",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        if (string.length\
    \ == 0) return string\n        val suffix = string.substring(string.length / 2)\n\
    \        val prefix = string.substring(0, string.length / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        return prefix + palindromeSuffix + reversedPrefix", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.reverse\n        val suffixPalindromeLength\
    \ = suffix.length - suffix.indexOf(palindromeSuffix)\n        val prefixPalindromeLength\
    \ = prefix.length - prefix.indexOf(palindromeSuffix)\n        val palindromeLength\
    \ = max(suffixPalindromeLength, prefixPalindromeLength)\n        val palindrome\
    \ = string.substring(n / 2 - palindromeLength, n / 2 + palindromeLength)\n   \
    \     val prefixToAppend = reversedPrefix.substring(reversedPrefix.length - palindromeLength)\n\
    \        prefixToAppend + palindrome", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ palindrome = prefix + suffix.reverse\n        palindrome", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n \
    \       val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n        return\
    \ string + reversePrefix.substring(palindromeSuffix.length)", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        val palindromeLength\
    \ = palindrome.length\n        val palindromeSuffix = palindrome.substring(palindromeLength\
    \ / 2, palindromeLength)\n        val palindromePrefix = palindrome.substring(0,\
    \ palindromeLength / 2)\n        val palindromeSuffixLength = palindromeSuffix.length\n\
    \        val palindromePrefixLength = palindromePrefix.length\n        var longestPalindromeSuffixLength\
    \ = 0\n        for (i <- 0 to palindromeSuffixLength - 1) {\n            val suffixLength\
    \ = palindromeSuffixLength - i\n            val prefixLength = palindromePrefixLength\
    \ - i\n            val suffix = palindromeSuffix.substring(i, palindromeSuffixLength)\n\
    \            val prefix = palindromePrefix.substring(0, palindromePrefixLength\
    \ - i)\n            if (suffix == prefix) {\n                longestPalindromeSuffixLength\
    \ = suffixLength\n            }\n        }\n        val palindromeSuffixToAppend\
    \ = palindromeSuffix.substring(0, longestPalindromeSuffixLength)\n        val\
    \ palindromePrefixToAppend = palindromePrefix.substring(palindromePrefixLength\
    \ - longestPalindromeSuffixLength, palindromePrefixLength)\n        val palindromeToAppend\
    \ = palindromeSuffixToAppend + palindromePrefixToAppend\n        string + palindromeToAppend",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversed = prefix.reverse\n\
    \        val palindrome = suffix + reversed\n        val palindromeLength = palindrome.length\n\
    \        val suffixLength = suffix.length\n        val prefixLength = prefix.length\n\
    \        val longestPalindromeSuffixLength = (0 until suffixLength).find(i =>\
    \ palindrome.substring(palindromeLength - i) == suffix.substring(suffixLength\
    \ - i)).get\n        val longestPalindromePrefixLength = (0 until prefixLength).find(i\
    \ => palindrome.substring(i) == prefix.substring(i)).get\n        val longestPalindromeLength\
    \ = max(longestPalindromeSuffixLength, longestPalindromePrefixLength)\n      \
    \  val shortestPalindrome = palindrome.substring(0, longestPalindromeLength) +\
    \ string\n        shortestPalindrome", "        val n = string.length\n      \
    \  val palindromeSuffix = (0 until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - palindromeSuffix).reverse", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = findPalindromeSuffix(suffix)\n        string +\
    \ reversedPrefix.substring(palindromeSuffix.length)", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ palindromeSuffix = suffix.substring(suffix.length - suffix.reverse.indexOf(prefix.reverse))\n\
    \        string + prefix.reverse.substring(palindromeSuffix.length)", "      \
    \  var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n   \
    \         val prefix = string.substring(0, i)\n            val postfix = string.substring(i)\n\
    \            if (isPalindrome(postfix)) {\n                longestPalindrome =\
    \ postfix\n                break\n            }\n        }\n        string + reverse(string.substring(0,\
    \ string.length - longestPalindrome.length))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix))\n        val palindrome\
    \ = suffix + reversedPrefix + palindromeSuffix\n        palindrome", "       \
    \ val n = string.length\n        val suffix = string.substring(n / 2, n)\n   \
    \     val prefix = string.substring(0, n / 2)\n        val reverse = suffix.reverse\n\
    \        val palindrome = suffix + prefix\n        val palindromeReverse = reverse\
    \ + prefix\n        if (palindrome == palindromeReverse) palindrome\n        else\
    \ if (palindrome.compareTo(palindromeReverse) < 0) palindrome\n        else palindromeReverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val suffixPalindrome\
    \ = suffix + reversedSuffix\n        val prefixPalindrome = reversedPrefix + prefix\n\
    \        if (suffixPalindrome.length > prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val lps = Array.ofDim[Int](n)\n\
    \        var i = 1; var j = 0\n        while (i < n) {\n            if (string(i)\
    \ == string(j)) {\n                lps(i) = j + 1\n                i += 1; j +=\
    \ 1\n            } else if (j > 0) j = lps(j - 1)\n            else {\n      \
    \          lps(i) = 0\n                i += 1\n            }\n        }\n    \
    \    val prefix = string.substring(0, n - lps(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length > prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = (1\
    \ to suffix.length).find(i => suffix.substring(0, i) == suffix.substring(i).reverse)\
    \ match {\n            case Some(i) => suffix.substring(0, i)\n            case\
    \ None => \"\"\n        }\n        val nonPalindromicPrefix = prefix.substring(0,\
    \ prefix.length - palindromicSuffix.length)\n        nonPalindromicPrefix + palindromicSuffix\
    \ + reversedPrefix", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        return string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        val prefixPalindrome = prefix.reverse\n        if\
    \ (suffixPalindrome == suffix) {\n            string + prefixPalindrome\n    \
    \    } else {\n            string + suffixPalindrome + prefixPalindrome\n    \
    \    }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindrome = suffix + reversedPrefix\n       \
    \ if (palindrome.length == n) palindrome\n        else palindrome + string(n /\
    \ 2)", "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 1\n        while (j < n) {\n            if\
    \ (string(i) == string(j)) {\n                suffix(j) = i + 1\n            \
    \    i += 1\n            } else {\n                while (i > 0 && string(i) !=\
    \ string(j)) i = suffix(i - 1)\n                if (string(i) == string(j)) {\n\
    \                    suffix(j) = i + 1\n                    i += 1\n         \
    \       }\n            }\n            j += 1\n        }\n        val prefix =\
    \ string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse", " \
    \       def isPalindrome(string : String) : Boolean = {\n            val length\
    \ = string.length\n            for (i <- 0 until length / 2) {\n             \
    \   if (string(i) != string(length - 1 - i)) return false\n            }\n   \
    \         return true\n        }\n        val length = string.length\n       \
    \ for (i <- length - 1 to 0 by -1) {\n            if (isPalindrome(string.substring(i)))\
    \ return string + string.substring(0, i).reverse\n        }\n        return string\
    \ + string.reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = (1 to n).find(i => suffix.substring(0,\
    \ i) == reversePrefix.substring(n - i, n)).get\n        string + reversePrefix.substring(0,\
    \ n - palindromeSuffix)", "        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        val palindrome = suffix + reversedPrefix\
    \ + palindromeSuffix\n        palindrome", "        val n = string.length\n  \
    \      val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        def isPalindrome(string : String) : Boolean = {\n            val length\
    \ = string.length\n            for (i <- 0 until length / 2) {\n             \
    \   if (string(i) != string(length - 1 - i)) return false\n            }\n   \
    \         return true\n        }\n        val length = string.length\n       \
    \ for (i <- length to 0 by -1) {\n            if (isPalindrome(string.substring(length\
    \ - i))) {\n                return string + string.substring(0, length - i).reverse\n\
    \            }\n        }\n        return string", "        val reversed = string.reverse\n\
    \        val s = string + \"#\" + reversed\n        val lps = longestPalindromicSubstring(s)\n\
    \        val prefix = string.substring(0, string.length - lps.length)\n      \
    \  val suffix = prefix.reverse\n        string + suffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val suffixPalindrome\
    \ = suffix + reversedSuffix\n        val prefixPalindrome = reversedPrefix + prefix\n\
    \        if (suffixPalindrome.length > prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        suffix(0) = 0\n        var i = 1\n        var j =\
    \ 0\n        while (i < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(i) = j + 1\n                i += 1\n                j += 1\n\
    \            } else {\n                if (j == 0) {\n                    suffix(i)\
    \ = 0\n                    i += 1\n                } else {\n                \
    \    j = suffix(j - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val s = string + \"#\" + string.reverse\n\
    \        val z = Array.fill(s.length)(0)\n        var l = 0; var r = 0\n     \
    \   for (i <- 1 until s.length) {\n            if (i > r) {\n                l\
    \ = i; r = i\n                while (r < s.length && s(r - l) == s(r)) r += 1\n\
    \                z(i) = r - l; r -= 1\n            } else {\n                val\
    \ k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n             \
    \   else {\n                    l = i\n                    while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                    z(i) = r - l; r -= 1\n    \
    \            }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - z(s.length - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = prefix.substring(0, prefix.length - palindromeSuffix.length)\n\
    \        palindromePrefix + suffix + palindromePrefix.reverse", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromicSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n        if\
    \ (palindromeSuffix.length == 0) {\n            string + reversePrefix\n     \
    \   } else {\n            string + reversePrefix.substring(reversePrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        }", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix + reversedPrefix\n        val palindrome = palindromeSuffix + string\n\
    \        palindrome", "        if (string.isEmpty) return string\n        val\
    \ prefix = string.substring(0, string.length - 1)\n        val suffix = string.substring(string.length\
    \ - 1)\n        val palindrome = makePalindrome(prefix)\n        if (suffix ==\
    \ palindrome.substring(0, 1)) palindrome + suffix\n        else suffix + palindrome\
    \ + suffix", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindrome = suffix + reversedPrefix\n       \
    \ if (palindrome.length == n) palindrome\n        else palindrome + string(n /\
    \ 2)", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        if (suffixPalindrome == suffix) {\n            string\
    \ + prefix.reverse\n        } else {\n            string + suffixPalindrome.substring(1)\
    \ + prefix.reverse\n        }", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        if (suffixPalindrome == string) string else\
    \ suffixPalindrome + string", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length > prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome", "        val n = string.length\n  \
    \      val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        var longestPalindromeSuffix = 0\n      \
    \  for (i <- 0 until n) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                longestPalindromeSuffix = i\n                break\n    \
    \        }\n        }\n        string + string.substring(0, n - longestPalindromeSuffix).reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindrome = suffix + reversedPrefix\n        if\
    \ (palindrome.length == n) palindrome\n        else {\n            val suffixPalindrome\
    \ = suffix + suffix.reverse\n            val prefixPalindrome = reversedPrefix\
    \ + reversedPrefix.reverse\n            if (suffixPalindrome.length > prefixPalindrome.length)\
    \ suffixPalindrome + reversedPrefix\n            else prefixPalindrome + suffix\n\
    \        }", "        val n = string.length\n        val suffix = new Array[Int](n)\n\
    \        var i = 0\n        var j = 1\n        while (j < n) {\n            if\
    \ (string(i) == string(j)) {\n                suffix(j) = i + 1\n            \
    \    i += 1\n                j += 1\n            } else {\n                if\
    \ (i == 0) {\n                    suffix(j) = 0\n                    j += 1\n\
    \                } else {\n                    i = suffix(i - 1)\n           \
    \     }\n            }\n        }\n        val prefix = new Array[Int](n)\n  \
    \      i = 0\n        j = n - 1\n        while (j >= 0) {\n            if (string(i)\
    \ == string(j)) {\n                prefix(j) = i + 1\n                i += 1\n\
    \                j -= 1\n            } else {\n                if (i == 0) {\n\
    \                    prefix(j) = 0\n                    j -= 1\n             \
    \   } else {\n                    i = prefix(i - 1)\n                }\n     \
    \       }\n        }\n        val maxSuffix = suffix.max\n        val maxPrefix\
    \ = prefix.max\n        if (maxSuffix == n) {\n            string\n        } else\
    \ {\n            val prefixToAppend = string.substring(0, n - maxSuffix)\n   \
    \         string + prefixToAppend.reverse\n        }", "        val n = string.length\n\
    \        val s = string + \" \" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i > r) {\n                l = r = i\n                while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                z(i) = r - l\n                r\
    \ -= 1\n            } else {\n                val k = i - l\n                if\
    \ (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                   \
    \ l = i\n                    while (r < s.length && s(r - l) == s(r)) r += 1\n\
    \                    z(i) = r - l\n                    r -= 1\n              \
    \  }\n            }\n        }\n        string + string.reverse.substring(0, n\
    \ - z(s.length - 1))", "        val n = string.length\n        val suffix = string.substring(1,\
    \ n)\n        val prefix = string.substring(0, n - 1)\n        val suffixPalindrome\
    \ = suffix.substring(suffix.indexOf(prefix.reverse))\n        string + suffixPalindrome.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = findPalindromicSuffix(suffix)\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val s = string + \"#\" + string.reverse\n \
    \       val z = Array.fill(s.length)(0)\n        var l = 0; var r = 0\n      \
    \  for (i <- 1 until s.length) {\n            if (i > r) {\n                l\
    \ = i; r = i\n                while (r < s.length && s(r - l) == s(r)) r += 1\n\
    \                z(i) = r - l; r -= 1\n            } else {\n                val\
    \ k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n             \
    \   else {\n                    l = i;\n                    while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                    z(i) = r - l; r -= 1\n    \
    \            }\n            }\n        }\n        string + string.substring(n\
    \ - z(n + 1)).reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix))\n\
    \        val palindrome = string + reversePrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.findPalindromeSuffix\n\
    \        suffix + reversedPrefix + palindromeSuffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val suffix = Array.ofDim[Int](n)\n        var\
    \ i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val palindrome = Array.ofDim[Int](n, n)\n  \
    \      for (i <- 0 until n) palindrome(i)(i) = 1\n        for (i <- 0 until n\
    \ - 1) if (string(i) == string(i + 1)) palindrome(i)(i + 1) = 1\n        for (i\
    \ <- 2 until n) {\n            for (j <- 0 until n - i) {\n                if\
    \ (string(j) == string(j + i) && palindrome(j + 1)(j + i - 1) == 1) palindrome(j)(j\
    \ + i) = 1\n            }\n        }\n        var maxLength = 0\n        var maxIndex\
    \ = 0\n        for (i <- 0 until n) {\n            if (palindrome(0)(i) == 1)\
    \ {\n                maxLength = i + 1\n                maxIndex = i\n       \
    \     }\n        }\n        string + string.substring(0, n - maxLength).reverse",
  "        if (string.length == 0) return string\n        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + prefix.reverse", "        def makePalindrome(string :\
    \ String, i : Int) : String = {\n            if (i == string.length) string\n\
    \            else if (string.substring(i).reverse == string.substring(0, string.length\
    \ - i)) string.substring(string.length - i) + string\n            else makePalindrome(string,\
    \ i + 1)\n        }\n        makePalindrome(string, 0)", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = (1 to n).find(i => suffix.substring(0, i) == suffix.substring(n\
    \ - i, n).reverse) match {\n            case Some(i) => suffix.substring(0, i)\n\
    \            case None => \"\"\n        }\n        val palindromePrefix = reversedPrefix.substring(0,\
    \ reversedPrefix.length - palindromeSuffix.length)\n        palindromePrefix +\
    \ suffix", "        val suffix = string.substring(0, string.length - string.reverse.indexOf(string))\n\
    \        val prefix = string.substring(suffix.length)\n        prefix + suffix\
    \ + prefix.reverse", "        val n = string.length\n        val s = string +\
    \ \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n        for\
    \ (i <- 1 until s.length) {\n            var j = lps(i - 1)\n            while\
    \ (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) == s(j)) lps(i)\
    \ = j + 1\n        }\n        val prefix = string.substring(0, n - lps(s.length\
    \ - 1))\n        string + prefix.reverse", "        val n = string.length\n  \
    \      val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        suffixPalindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = reversedPrefix.substring(reversedPrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        palindromePrefix + suffix",
  "        val suffix = longestPalindromicSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - suffix.length)\n        prefix + suffix + prefix.reverse", " \
    \       val n = string.length\n        val suffix = Array.ofDim[Int](n)\n    \
    \    var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = Array.ofDim[Int](n)\n        var i = 0\n        var j =\
    \ 1\n        while (j < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(j) = i + 1\n                i += 1\n            } else {\n\
    \                while (i > 0 && string(i) != string(j)) i = suffix(i - 1)\n \
    \               if (string(i) == string(j)) {\n                    suffix(j) =\
    \ i + 1\n                    i += 1\n                }\n            }\n      \
    \      j += 1\n        }\n        val prefix = string.substring(0, n - suffix(n\
    \ - 1))\n        string + prefix.reverse", "        val n = string.length\n  \
    \      val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val suffixPalindrome = suffix + reversedPrefix\n   \
    \     val prefixPalindrome = reversedPrefix + suffix\n        if (suffixPalindrome.length\
    \ > prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val prefix = string.substring(0, n - 1)\n  \
    \      val suffix = string.substring(n - 1, n)\n        val reversedPrefix = prefix.reverse\n\
    \        val reversedSuffix = suffix.reverse\n        if (reversedPrefix == suffix)\
    \ string + reversedSuffix\n        else string + reversedPrefix", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix))\n\
    \        string + reversePrefix.substring(palindromeSuffix.length)", "       \
    \ val n = string.length\n        val suffix = Array.ofDim[Int](n)\n        var\
    \ i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val palindrome = Array.ofDim[Int](n)\n        var i = 0\n        var\
    \ j = 0\n        while (i < n) {\n            while (i - j >= 0 && i + j < n &&\
    \ string(i - j) == string(i + j)) j += 1\n            palindrome(i) = j\n    \
    \        var k = 1\n            while (i - k >= 0 && i + k < n && k + palindrome(i\
    \ - k) < j) {\n                palindrome(i + k) = palindrome(i - k)\n       \
    \         k += 1\n            }\n            i += k\n            j -= k\n    \
    \    }\n        var max = 0\n        var center = 0\n        for (i <- 0 until\
    \ n) {\n            if (palindrome(i) > max) {\n                max = palindrome(i)\n\
    \                center = i\n            }\n        }\n        string + string.substring(0,\
    \ center - max + 1).reverse", "        val n = string.length\n        val dp =\
    \ Array.ofDim[Int](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 1\n            if (i < n - 1) {\n                if (string(i) == string(i\
    \ + 1)) dp(i)(i + 1) = 2\n                else dp(i)(i + 1) = 1\n            }\n\
    \        }\n        for (k <- 3 to n) {\n            for (i <- 0 to n - k) {\n\
    \                val j = i + k - 1\n                if (string(i) == string(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i +\
    \ 1)(j), dp(i)(j - 1))\n            }\n        }\n        val palindromeLength\
    \ = dp(0)(n - 1)\n        val prefix = string.substring(0, n - palindromeLength)\n\
    \        val suffix = string.substring(n - palindromeLength, n)\n        prefix\
    \ + suffix + prefix.reverse", "        val n = string.length\n        val dp =\
    \ Array.ofDim[Int](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for\
    \ (i <- 0 until n - 1) dp(i)(i + 1) = if (string(i) == string(i + 1)) 2 else 1\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            dp(i)(i + k) = if (string(i) == string(i + k)) dp(i + 1)(i + k -\
    \ 1) + 2 else max(dp(i + 1)(i + k), dp(i)(i + k - 1))\n            }\n       \
    \ }\n        val palindrome = string.substring(n - dp(0)(n - 1), n)\n        val\
    \ prefix = string.substring(0, n - dp(0)(n - 1))\n        prefix + palindrome.reverse\
    \ + palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.substring(suffix.indexOf(suffix.reverse) + 1)\n        val prefixPalindrome\
    \ = prefix.substring(0, prefix.lastIndexOf(suffixPalindrome.reverse) + 1)\n  \
    \      string + prefixPalindrome.reverse", "        val n = string.length\n  \
    \      val suffix = new Array[Int](n)\n        suffix(0) = 0\n        for (i <-\
    \ 1 until n) {\n            var j = suffix(i - 1)\n            while (j > 0 &&\
    \ string(i) != string(j)) j = suffix(j - 1)\n            if (string(i) == string(j))\
    \ j += 1\n            suffix(i) = j\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        def isPalindrome(string : String) : Boolean = {\n            val length\
    \ = string.length\n            for (i <- 0 until length / 2) if (string(i) !=\
    \ string(length - 1 - i)) return false\n            true\n        }\n        val\
    \ length = string.length\n        for (i <- length to 0 by -1) {\n           \
    \ val suffix = string.substring(length - i)\n            if (isPalindrome(suffix))\
    \ return string + string.substring(0, length - i).reverse\n        }\n       \
    \ string", "        def isPalindrome(string : String) : Boolean = {\n        \
    \    val n = string.length\n            for (i <- 0 until n / 2) {\n         \
    \       if (string(i) != string(n - 1 - i)) return false\n            }\n    \
    \        return true\n        }\n        val n = string.length\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            if (isPalindrome(string.substring(i))) {\n\
    \                return string + string.substring(0, i).reverse\n            }\n\
    \        }\n        return string + string.reverse", "        val s = string.toCharArray\n\
    \        val n = s.length\n        val t = new Array[Int](n)\n        var i =\
    \ 0\n        var j = 1\n        while (j < n) {\n            if (s(i) == s(j))\
    \ {\n                t(j) = i + 1\n                i += 1\n                j +=\
    \ 1\n            } else {\n                if (i == 0) {\n                   \
    \ t(j) = 0\n                    j += 1\n                } else {\n           \
    \         i = t(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - t(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findLongestPalindromeSuffix(suffix)\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        prefix + palindromeSuffix\
    \ + palindromePrefix", "        def isPalindrome(string : String) : Boolean =\
    \ {\n            val length = string.length\n            for (i <- 0 until length\
    \ / 2) {\n                if (string(i) != string(length - 1 - i)) return false\n\
    \            }\n            return true\n        }\n        def findPalindrome(string\
    \ : String) : String = {\n            for (i <- string.length to 0 by -1) {\n\
    \                if (isPalindrome(string.substring(0, i))) return string.substring(0,\
    \ i)\n            }\n            return \"\"\n        }\n        val palindrome\
    \ = findPalindrome(string)\n        val prefix = string.substring(palindrome.length)\n\
    \        return prefix + palindrome + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindrome\
    \ = suffix + reversedPrefix\n        palindrome", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  if (string.length == 0) return string\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reverse = suffix.reverse\n        if (suffix.length == prefix.length) {\n  \
    \          if (suffix == reverse) return string\n            else return prefix\
    \ + reverse + prefix.reverse\n        }\n        else {\n            if (suffix.substring(1)\
    \ == reverse) return string\n            else return prefix + reverse + prefix.reverse\n\
    \        }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length > prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ (0 until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - suffix).reverse", "        val n = string.length\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffix = string.substring(n\
    \ / 2 + n % 2, n)\n        val reversedPrefix = prefix.reverse\n        val reversedSuffix\
    \ = suffix.reverse\n        val palindromeSuffix = reversedSuffix.substring(0,\
    \ reversedSuffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        def isPalindrome(string : String) : Boolean = {\n            val length\
    \ = string.length\n            for (i <- 0 until length / 2) {\n             \
    \   if (string(i) != string(length - 1 - i)) return false\n            }\n   \
    \         return true\n        }\n        def findPalindrome(string : String)\
    \ : String = {\n            for (i <- string.length to 0 by -1) {\n          \
    \      if (isPalindrome(string.substring(0, i))) return string.substring(0, i)\n\
    \            }\n            return \"\"\n        }\n        val palindrome = findPalindrome(string)\n\
    \        val prefix = string.substring(palindrome.length)\n        return string\
    \ + prefix.reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix + reversedPrefix\n \
    \       val palindrome = string + palindromeSuffix\n        palindrome", "   \
    \     val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val n = string.length\n    \
    \    val suffix = Array.ofDim[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n            } else {\n   \
    \             if (i == 0) {\n                    suffix(j) = 0\n             \
    \   } else {\n                    i = suffix(i - 1)\n                    j -=\
    \ 1\n                }\n            }\n            j += 1\n        }\n       \
    \ val prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val suffixPalindrome\
    \ = suffix + reversedSuffix\n        val prefixPalindrome = reversedPrefix + prefix\n\
    \        if (suffixPalindrome.length > prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val rev = string.reverse\n\
    \        val s = string + \"#\" + rev\n        val n2 = s.length\n        val\
    \ z = Array.ofDim[Int](n2)\n        var l = 0; var r = 0\n        for (i <- 1\
    \ until n2) {\n            if (i > r) {\n                l = r = i\n         \
    \       while (r < n2 && s(r - l) == s(r)) r += 1\n                z(i) = r -\
    \ l\n                r -= 1\n            } else {\n                val k = i -\
    \ l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n\
    \                    l = i\n                    while (r < n2 && s(r - l) == s(r))\
    \ r += 1\n                    z(i) = r - l\n                    r -= 1\n     \
    \           }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - z(n2 - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = (for (i <- 0 to suffix.length)\
    \ yield {\n            val s = suffix.substring(i, suffix.length)\n          \
    \  if (s == s.reverse) s else \"\"\n        }).max\n        val palindrome = suffix.substring(0,\
    \ suffix.length - palindromeSuffix.length)\n        val result = prefix + palindrome\
    \ + reversePrefix\n        result", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        var i = 0\n        var j = n - 1\n     \
    \   var k = 0\n        while (i < j) {\n            if (string(i) == string(j))\
    \ {\n                i += 1\n                j -= 1\n            } else {\n  \
    \              i = 0\n                k += 1\n                j = n - k - 1\n\
    \            }\n        }\n        val prefix = string.substring(0, n - k)\n \
    \       val suffix = string.substring(n - k)\n        prefix + suffix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = (1 to suffix.length).find(i\
    \ => suffix.substring(0, i) == suffix.substring(i).reverse) match {\n        \
    \    case Some(i) => suffix.substring(0, i)\n            case None => \"\"\n \
    \       }\n        val nonPalindromicPrefix = prefix.substring(0, prefix.length\
    \ - palindromicSuffix.length)\n        nonPalindromicPrefix + palindromicSuffix\
    \ + reversedPrefix", "        val n = string.length\n        val suffixes = (0\
    \ to n).map(i => string.substring(i, n))\n        val palindromicSuffixes = suffixes.filter(s\
    \ => s == s.reverse)\n        val longestPalindromicSuffix = palindromicSuffixes.maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - longestPalindromicSuffix.length)\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            var\
    \ j = 0\n            while (i - j >= 0 && i + j < n && string(i - j) == string(i\
    \ + j)) j += 1\n            suffix(i) = j\n        }\n        var longest = 0\n\
    \        var longestIndex = 0\n        for (i <- 0 until n) {\n            if\
    \ (suffix(i) > longest) {\n                longest = suffix(i)\n             \
    \   longestIndex = i\n            }\n        }\n        val prefix = string.substring(0,\
    \ longestIndex - longest + 1)\n        string + prefix.reverse", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val palindrome = suffix + prefix.reverse\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromicSuffix = findPalindromicSuffix(suffix)\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   def isPalindrome(string : String) : Boolean = {\n            if (string.length\
    \ == 0) return true\n            val mid = string.length / 2\n            for\
    \ (i <- 0 until mid) if (string(i) != string(string.length - 1 - i)) return false\n\
    \            return true\n        }\n        def findLongestPalindrome(string\
    \ : String) : String = {\n            for (i <- string.length - 1 to 0 by -1)\
    \ if (isPalindrome(string.substring(0, i))) return string.substring(0, i)\n  \
    \          return \"\"\n        }\n        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val prefix = string.substring(longestPalindrome.length)\n        return\
    \ string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            var j = i\n\
    \            while (j >= 0 && string(j) == string(n - 1 - i + j)) j -= 1\n   \
    \         suffix(i) = i - j\n        }\n        var i = 0\n        while (i <\
    \ n && suffix(i) != i + 1) i += 1\n        val prefix = string.substring(0, n\
    \ - i)\n        string + prefix.reverse", "        val n = string.length\n   \
    \     val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = (0 to suffix.length).find(i => suffix.substring(i) == reversePrefix.substring(0,\
    \ suffix.length - i)).get\n        val palindrome = suffix.substring(palindromeSuffix)\
    \ + reversePrefix\n        string + palindrome.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        palindromePrefix + suffix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindrome = suffix + reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix)\
    \ + 1)\n        palindrome", "        val n = string.length\n        val lps =\
    \ Array.ofDim[Int](n)\n        var i = 1; var j = 0\n        while (i < n) {\n\
    \            if (string(i) == string(j)) {\n                lps(i) = j + 1\n \
    \               i += 1; j += 1\n            } else if (j > 0) j = lps(j - 1)\n\
    \            else {\n                lps(i) = 0\n                i += 1\n    \
    \        }\n        }\n        val prefix = string.substring(0, n - lps(n - 1))\n\
    \        string + prefix.reverse", "        val n = string.length\n        var\
    \ i = 0\n        while (i < n && string(i) == string(n - 1 - i)) i += 1\n    \
    \    if (i == n) return string\n        val prefix = string.substring(0, n - i)\n\
    \        val suffix = string.substring(n - i)\n        prefix + suffix + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.length\
    \ - suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        string + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        val palindromePrefix = reversePrefix.substring(reversePrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        return prefix + palindromeSuffix\
    \ + palindromePrefix", "        val suffix = string.substring(0, string.length\
    \ - string.reverse.indexOf(string))\n        string + suffix.reverse", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix + reversedPrefix\n   \
    \     val palindrome = palindromeSuffix + string\n        palindrome", "     \
    \   def isPalindrome(string : String) : Boolean = {\n            val length =\
    \ string.length\n            for (i <- 0 until length / 2) {\n               \
    \ if (string(i) != string(length - 1 - i)) return false\n            }\n     \
    \       return true\n        }\n        val length = string.length\n        for\
    \ (i <- length - 1 to 0 by -1) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                val prefix = string.substring(0, i)\n                return\
    \ string + prefix.reverse\n            }\n        }\n        return string", " \
    \       val n = string.length\n        val suffix = Array.ofDim[Int](n)\n    \
    \    var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                while (i > 0 && string(i) != string(j))\
    \ i = suffix(i - 1)\n                if (string(i) == string(j)) {\n         \
    \           suffix(j) = i + 1\n                    i += 1\n                }\n\
    \            }\n            j += 1\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reverse = new StringBuilder(prefix).reverse.toString\n\
    \        val palindrome = suffix + reverse\n        val palindromeLength = palindrome.length\n\
    \        val suffixLength = suffix.length\n        val prefixLength = prefix.length\n\
    \        val suffixPalindromeLength = palindromeLength - prefixLength\n      \
    \  var i = 0\n        while (i < suffixLength) {\n            if (suffix(i) !=\
    \ palindrome(suffixPalindromeLength + i)) {\n                val newSuffix = suffix.substring(i,\
    \ suffixLength)\n                val newPrefix = prefix.substring(0, prefixLength\
    \ - i)\n                val newReverse = new StringBuilder(newPrefix).reverse.toString\n\
    \                return newSuffix + newReverse + suffix\n            }\n     \
    \       i += 1\n        }\n        palindrome", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n\
    \        for (i <- 1 until s.length) {\n            var j = lps(i - 1)\n     \
    \       while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) ==\
    \ s(j)) lps(i) = j + 1\n        }\n        string + string.substring(lps(s.length\
    \ - 1)).reverse", "        val n = string.length\n        val s = string + \"\
    #\" + string.reverse\n        val z = new Array[Int](s.length)\n        var l\
    \ = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i > r)\
    \ {\n                l = r = i\n                while (r < s.length && s(r - l)\
    \ == s(r)) r += 1\n                z(i) = r - l\n                r -= 1\n    \
    \        } else {\n                val k = i - l\n                if (z(k) < r\
    \ - i + 1) z(i) = z(k)\n                else {\n                    l = i\n  \
    \                  while (r < s.length && s(r - l) == s(r)) r += 1\n         \
    \           z(i) = r - l\n                    r -= 1\n                }\n    \
    \        }\n        }\n        string + string.reverse.substring(0, n - z(s.length\
    \ - 1))", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n   \
    \         val prefix = string.substring(0, i)\n            val suffix = string.substring(i)\n\
    \            if (isPalindrome(suffix)) {\n                longestPalindrome =\
    \ suffix\n                break\n            }\n        }\n        val prefix\
    \ = string.substring(0, string.length - longestPalindrome.length)\n        prefix\
    \ + longestPalindrome + prefix.reverse", "        if (string.length == 0) return\
    \ string\n        val suffix = string.substring(string.length / 2)\n        val\
    \ prefix = string.substring(0, string.length / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val reverseSuffix = suffix.reverse\n        val palindromeSuffix\
    \ = (1 to suffix.length).find(i => suffix.substring(0, i) == reverseSuffix.substring(reverseSuffix.length\
    \ - i)).get\n        val palindromePrefix = (1 to prefix.length).find(i => prefix.substring(prefix.length\
    \ - i) == reversePrefix.substring(0, i)).get\n        val palindrome = suffix.substring(0,\
    \ palindromeSuffix) + prefix.substring(prefix.length - palindromePrefix)\n   \
    \     val nonPalindrome = prefix.substring(0, prefix.length - palindromePrefix)\
    \ + suffix.substring(palindromeSuffix)\n        nonPalindrome + palindrome.reverse",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                if (i == 0) suffix(j) = 0\n           \
    \     else {\n                    i = suffix(i - 1)\n                    j -=\
    \ 1\n                }\n            }\n            j += 1\n        }\n       \
    \ val prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val lps = Array.ofDim[Int](n)\n        var\
    \ i = 1; var len = 0; var j = 0\n        while (i < n) {\n            if (string(i)\
    \ == string(len)) {\n                len += 1\n                lps(i) = len\n\
    \                i += 1\n            } else {\n                if (len != 0) {\n\
    \                    len = lps(len - 1)\n                } else {\n          \
    \          lps(i) = 0\n                    i += 1\n                }\n       \
    \     }\n        }\n        val prefix = string.substring(0, n - lps(n - 1))\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        if (suffix == reversedPrefix)\
    \ string\n        else {\n            val suffixPalindrome = makePalindrome(suffix)\n\
    \            val prefixPalindrome = reversedPrefix.substring(0, reversedPrefix.length\
    \ - suffixPalindrome.length)\n            string + prefixPalindrome.reverse\n\
    \        }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = findLongestPalindrome(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        var prefix = string.substring(0, string.length / 2)\n\
    \        var suffix = string.substring(string.length / 2, string.length)\n   \
    \     var suffix_palindrome = suffix\n        var i = suffix.length - 1\n    \
    \    while (i >= 0) {\n            if (suffix.substring(0, i + 1) == suffix.substring(suffix.length\
    \ - i - 1, suffix.length).reverse) {\n                suffix_palindrome = suffix.substring(0,\
    \ i + 1)\n                break\n            }\n            i -= 1\n        }\n\
    \        prefix + suffix_palindrome + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ suffix(0) = 0\n        var i = 1\n        var j = 0\n        while (i < n) {\n\
    \            if (string(i) == string(j)) {\n                suffix(i) = j + 1\n\
    \                i += 1\n                j += 1\n            } else {\n      \
    \          if (j == 0) {\n                    suffix(i) = 0\n                \
    \    i += 1\n                } else {\n                    j = suffix(j - 1)\n\
    \                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = Array.ofDim[Int](n)\n        var i = 0\n        var j =\
    \ 1\n        while (j < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(j) = i + 1\n                i += 1\n            } else {\n\
    \                while (i > 0 && string(i) != string(j)) i = suffix(i - 1)\n \
    \               if (string(i) == string(j)) {\n                    suffix(j) =\
    \ i + 1\n                    i += 1\n                }\n            }\n      \
    \      j += 1\n        }\n        string + string.substring(0, n - suffix(n -\
    \ 1)).reverse", "        def isPalindrome(string : String) : Boolean = {\n   \
    \         val length = string.length\n            for (i <- 0 until length / 2)\
    \ {\n                if (string(i) != string(length - 1 - i)) return false\n \
    \           }\n            return true\n        }\n        val length = string.length\n\
    \        for (i <- length to 0 by -1) {\n            if (isPalindrome(string.substring(length\
    \ - i))) {\n                return string + string.substring(0, length - i).reverse\n\
    \            }\n        }\n        return string", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = (1 to suffix.length).find(i => suffix.substring(0, i) == suffix.substring(i).reverse)\
    \ match {\n            case Some(i) => suffix.substring(0, i)\n            case\
    \ None => \"\"\n        }\n        string + reversedPrefix.substring(palindromicSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n - 1, n)\n\
    \        val prefix = string.substring(0, n - 1)\n        val suffixPalindrome\
    \ = isPalindrome(suffix)\n        val prefixPalindrome = isPalindrome(prefix)\n\
    \        if (suffixPalindrome && prefixPalindrome) {\n            string + reverse(prefix)\n\
    \        } else if (suffixPalindrome) {\n            makePalindrome(prefix) +\
    \ reverse(prefix)\n        } else if (prefixPalindrome) {\n            string\
    \ + reverse(suffix)\n        } else {\n            makePalindrome(prefix) + reverse(suffix)\n\
    \        }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val s = string + \"#\" + string.reverse\n \
    \       val z = new Array[Int](s.length)\n        z(0) = s.length\n        var\
    \ l = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i >\
    \ r) {\n                l = r = i\n                while (r < s.length && s(r\
    \ - l) == s(r)) r += 1\n                z(i) = r - l\n                r -= 1\n\
    \            } else {\n                val k = i - l\n                if (z(k)\
    \ < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n\
    \                    while (r < s.length && s(r - l) == s(r)) r += 1\n       \
    \             z(i) = r - l\n                    r -= 1\n                }\n  \
    \          }\n        }\n        string + string.reverse.substring(0, n - z(n))",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = (1 to n / 2).find(i => suffix.substring(0,\
    \ i) == reversedPrefix.substring(n / 2 - i)).get\n        string + reversedPrefix.substring(n\
    \ / 2 - palindromicSuffix)", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversed = prefix.reverse\n        val palindrome = suffix + reversed\n\
    \        if (palindrome.length == n) palindrome\n        else palindrome + suffix.charAt(0)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        if (suffixPalindrome == suffix) {\n            string\
    \ + prefix.reverse\n        } else {\n            val suffixPalindromeIndex =\
    \ string.indexOf(suffixPalindrome)\n            val prefixPalindrome = string.substring(0,\
    \ suffixPalindromeIndex)\n            string + prefixPalindrome.reverse\n    \
    \    }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.reverse\n        val\
    \ palindrome = string + reversedPrefix + palindromeSuffix\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.findPalindromeSuffix\n\
    \        val palindromePrefix = reversedPrefix.findPalindromePrefix\n        val\
    \ palindrome = palindromeSuffix + palindromePrefix\n        val result = string\
    \ + palindrome.reverse\n        result", "        val palindrome = string + string.reverse\n\
    \        val suffix = palindrome.substring(1)\n        val prefix = palindrome.substring(0,\
    \ palindrome.length - 1)\n        val longestPalindrome = suffix.zip(prefix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        string + longestPalindrome.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val palindromeSuffix\
    \ = suffix + reversedSuffix\n        val palindromePrefix = reversedPrefix + prefix\n\
    \        val palindrome = palindromePrefix + palindromeSuffix\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = (0\
    \ until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        if (string.length == 0) return string\n \
    \       val suffix = longestPalindromicSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - suffix.length)\n        prefix + suffix + prefix.reverse", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse\n        val suffixLength\
    \ = suffix.length\n        val prefixLength = prefix.length\n        var i = 0\n\
    \        while (i < suffixLength && i < prefixLength && suffix(i) == prefix(i))\
    \ {\n            i += 1\n        }\n        val palindromeSuffixLength = suffixLength\
    \ - i\n        val palindromePrefixLength = prefixLength - i\n        val palindromePrefix\
    \ = reversedPrefix.substring(0, palindromePrefixLength)\n        val palindromeSuffix\
    \ = suffix.substring(palindromeSuffixLength, suffixLength)\n        palindromePrefix\
    \ + string + palindromeSuffix", "        val n = string.length\n        val suffix\
    \ = new Array[Int](n)\n        var i = 0\n        var j = 1\n        while (j\
    \ < n) {\n            if (string(i) == string(j)) {\n                suffix(j)\
    \ = i + 1\n                i += 1\n                j += 1\n            } else\
    \ {\n                if (i == 0) {\n                    suffix(j) = 0\n      \
    \              j += 1\n                } else {\n                    i = suffix(i\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        var longestPalindromeSuffix\
    \ = \"\"\n        for (i <- 0 to string.length) {\n            val suffix = string.substring(i)\n\
    \            if (suffix.length > longestPalindromeSuffix.length && suffix == suffix.reverse)\
    \ {\n                longestPalindromeSuffix = suffix\n            }\n       \
    \ }\n        string + string.substring(0, string.length - longestPalindromeSuffix.length).reverse",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        string + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n - 1, n)\n\
    \        val prefix = string.substring(0, n - 1)\n        val suffixPalindrome\
    \ = isPalindrome(suffix)\n        val prefixPalindrome = isPalindrome(prefix)\n\
    \        if (suffixPalindrome && prefixPalindrome) {\n            string + reverse(prefix)\n\
    \        } else if (suffixPalindrome) {\n            string + reverse(prefix.substring(0,\
    \ n - 2))\n        } else if (prefixPalindrome) {\n            string + reverse(suffix)\n\
    \        } else {\n            string + reverse(prefix.substring(0, n - 2))\n\
    \        }", "        val n = string.length\n        var longestPalindrome = 0\n\
    \        for (i <- 0 until n) {\n            if (isPalindrome(string, i, n - 1))\
    \ {\n                longestPalindrome = n - i\n                break\n      \
    \      }\n        }\n        val prefix = string.substring(0, n - longestPalindrome)\n\
    \        return string + prefix.reverse"]
stop_tokens:
- "\n    }\n"
