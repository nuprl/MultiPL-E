name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n\
  \    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n\
  \    // 'catac'\n    def makePalindrome(string : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        suffix(0) = 0\n        var i = 1\n        var j =\
    \ 0\n        while (i < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(i) = j + 1\n                i += 1\n                j += 1\n\
    \            } else {\n                if (j == 0) {\n                    suffix(i)\
    \ = 0\n                    i += 1\n                } else {\n                \
    \    j = suffix(j - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        string + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindrome\
    \ = suffix + reversedPrefix\n        val reversedPalindrome = palindrome.reverse\n\
    \        val palindromePrefix = palindrome.substring(0, n / 2)\n        val reversedPalindromePrefix\
    \ = reversedPalindrome.substring(0, n / 2)\n        if (palindromePrefix == reversedPalindromePrefix)\
    \ palindrome else palindrome + reversedPalindromePrefix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindrome = suffix + reversedPrefix\n        val\
    \ palindromeLength = palindrome.length\n        val longestPalindromeSuffix =\
    \ (0 until palindromeLength).find(i => palindrome.substring(i, palindromeLength)\
    \ == palindrome.substring(i, palindromeLength).reverse) match {\n            case\
    \ Some(i) => palindrome.substring(i, palindromeLength)\n            case None\
    \ => \"\"\n        }\n        val prefixToAppend = reversedPrefix.substring(longestPalindromeSuffix.length,\
    \ reversedPrefix.length)\n        string + prefixToAppend", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = (0 until n).find(i => string.substring(i)\
    \ == string.substring(i).reverse).getOrElse(0)\n        string + string.substring(0,\
    \ n - suffix).reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = (1 to n).map(i => string.substring(n\
    \ - i, n)).find(s => s == s.reverse).get\n        val palindrome = string.substring(0,\
    \ n - palindromeSuffix.length) + palindromeSuffix\n        palindrome + reversePrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse.zip(suffix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindromePrefix = reversedPrefix.reverse.zip(reversedPrefix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindrome = palindromePrefix\
    \ + palindromeSuffix\n        val result = palindrome + reversedPrefix.substring(palindromePrefix.length)\n\
    \        result", "        if (string.length == 0) return string\n        val\
    \ suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reverse = new StringBuilder(prefix).reverse.toString\n\
    \        val palindrome = suffix + reverse\n        val palindromeSuffix = palindrome.substring(0,\
    \ palindrome.length / 2)\n        val palindromePrefix = palindrome.substring(palindrome.length\
    \ / 2)\n        val palindromeSuffixReverse = new StringBuilder(palindromeSuffix).reverse.toString\n\
    \        if (palindromeSuffixReverse == palindromePrefix) palindrome\n       \
    \ else makePalindrome(string + string.charAt(string.length - 1))", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = (1 to n / 2).find(i => suffix.substring(0, i)\
    \ == reversedPrefix.substring(n / 2 - i, n / 2)).getOrElse(0)\n        string\
    \ + reversedPrefix.substring(n / 2 - palindromeSuffix, n / 2)", "        val longestPalindromeSuffix\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindromeSuffix.length)\n        string + prefix.reverse",
  "        val length = string.length\n        val reverse = string.reverse\n    \
    \    val suffix = string.substring(0, length - 1)\n        val prefix = string.substring(1,\
    \ length)\n        if (suffix == reverse) string\n        else if (prefix == reverse)\
    \ string + string.charAt(0)\n        else string + reverse.substring(length -\
    \ suffix.indexOf(reverse.substring(0, length - 1)))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   suffix(0) = 0\n        var i = 1\n        var j = 0\n        while (i < n)\
    \ {\n            if (string(i) == string(j)) {\n                suffix(i) = j\
    \ + 1\n                i += 1\n                j += 1\n            } else {\n\
    \                if (j == 0) {\n                    suffix(i) = 0\n          \
    \          i += 1\n                } else {\n                    j = suffix(j\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val n = string.length\n\
    \        val suffix = new Array[Int](n)\n        for (i <- 0 until n) {\n    \
    \        var j = 0\n            while (i - j >= 0 && i + j < n && string(i - j)\
    \ == string(i + j)) j += 1\n            suffix(i) = j\n        }\n        val\
    \ prefix = new Array[Int](n)\n        for (i <- 0 until n) {\n            var\
    \ j = 0\n            while (i - j >= 0 && i + j + 1 < n && string(i - j) == string(i\
    \ + j + 1)) j += 1\n            prefix(i) = j\n        }\n        var max = 0\n\
    \        var maxIndex = 0\n        for (i <- 0 until n) {\n            if (suffix(i)\
    \ > max) {\n                max = suffix(i)\n                maxIndex = i\n  \
    \          }\n            if (prefix(i) > max) {\n                max = prefix(i)\n\
    \                maxIndex = i\n            }\n        }\n        val prefixString\
    \ = string.substring(0, maxIndex - max + 1)\n        val suffixString = string.substring(maxIndex\
    \ + max)\n        prefixString + suffixString.reverse + suffixString", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2)\n    \
    \    val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.reverse.substring(0, suffix.length - suffix.indexOf(reversedPrefix))\n\
    \        suffix + reversedPrefix + palindromicSuffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.reverse\n        val palindrome = suffix + reversedPrefix\n       \
    \ if (palindromeSuffix == prefix) palindrome\n        else string + reversedPrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix + reversedPrefix\n   \
    \     val palindrome = string + palindromeSuffix\n        palindrome"]
stop_tokens:
- "\n    }\n"
