name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    //\
  \ >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n\
  \    // 3\n    def howManyTimes(string : String, substring : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        count", "        var count = 0\n        var i = 0\n\
    \        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       }\n            else i += 1\n        }\n        count", "        var count\
    \ = 0\n        for (i <- 0 to string.length - substring.length) {\n          \
    \  if (string.substring(i, i + substring.length) == substring) count += 1\n  \
    \      }\n        count", "        var count = 0\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) count += 1\n        }\n        count", "        var count = 0\n\
    \        for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        count", " \
    \       var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        count", "        var count = 0\n        var i = 0\n\
    \        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       }\n            else i += 1\n        }\n        count", "        var count\
    \ = 0L\n        var index = 0\n        while (index != -1) {\n            index\
    \ = string.indexOf(substring, index)\n            if (index != -1) {\n       \
    \         count += 1\n                index += 1\n            }\n        }\n \
    \       count", "        var count = 0\n        for (i <- 0 to string.length -\
    \ substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) count += 1\n        }\n        count", "        var count = 0\n\
    \        for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        count", " \
    \       var count = 0L\n        var i = 0\n        while (i < string.length) {\n\
    \            if (string.substring(i).startsWith(substring)) {\n              \
    \  count += 1\n                i += substring.length\n            } else i +=\
    \ 1\n        }\n        count", "        var count = 0\n        for (i <- 0 to\
    \ string.length - substring.length) {\n            if (string.substring(i, i +\
    \ substring.length) == substring) count += 1\n        }\n        count", "   \
    \     if (string.length < substring.length) return 0\n        if (string.length\
    \ == substring.length) return if (string == substring) 1 else 0\n        if (substring.length\
    \ == 0) return 0\n        var count = 0\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) count += 1\n        }\n        return count", "        var count\
    \ = 0\n        for (i <- 0 to string.length - substring.length) {\n          \
    \  if (string.substring(i, i + substring.length) == substring) count += 1\n  \
    \      }\n        count", "        var count = 0\n        var index = 0\n    \
    \    while (index != -1) {\n            index = string.indexOf(substring, index)\n\
    \            if (index != -1) {\n                count += 1\n                index\
    \ += 1\n            }\n        }\n        count", "        if (string.length <\
    \ substring.length) return 0\n        if (string.length == substring.length) return\
    \ if (string == substring) 1 else 0\n        var count = 0\n        for (i <-\
    \ 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        count", "        if (string.length < substring.length)\
    \ return 0\n        if (string.length == substring.length) return if (string ==\
    \ substring) 1 else 0\n        val n = string.length\n        val m = substring.length\n\
    \        val dp = Array.ofDim[Long](n + 1, m + 1)\n        for (i <- 0 to n) dp(i)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to m) {\n        \
    \        if (string(i - 1) == substring(j - 1)) dp(i)(j) = dp(i - 1)(j - 1) +\
    \ dp(i - 1)(j)\n                else dp(i)(j) = dp(i - 1)(j)\n            }\n\
    \        }\n        dp(n)(m)", "        if (string.length < substring.length)\
    \ return 0\n        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count", "        var count = 0\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        count"]
stop_tokens:
- "\n    }\n"
