name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should\
  \ be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"\
  ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output\
  \ should be 6.\n    // For num = \"2020\" the output should be 2.\n    def hexKey(num\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val\
    \ hexToPrime = hex.zip(primes).toMap\n        val hexToPrimeKey = hex.zip(primes.map(p\
    \ => BigInt(p).pow(2).toLong)).toMap\n        val key = num.map(c => hexToPrimeKey(c)).sum\n\
    \        key", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n\
    \        for (i <- 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n\
    \        }\n        key", "        val hex = num.toUpperCase\n        val hexDigits\
    \ = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\n        val hexMap\
    \ = hexDigits.zipWithIndex.toMap\n        val hexPrimeMap = hexPrimes.zipWithIndex.toMap\n\
    \        val hexKey = hex.map(x => hexMap(x)).toList\n        val hexPrimeKey\
    \ = hex.map(x => hexPrimeMap.getOrElse(x, -1)).toList\n        val hexPrimeCount\
    \ = hexPrimeKey.filter(x => x != -1).length\n        hexPrimeCount", "       \
    \ val hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n        var\
    \ count = 0\n        for (i <- 0 until num.length) {\n            if (prime.contains(num(i)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        var key = 0L\n        for (i <- 0 until num.length) {\n            key\
    \ += hex.indexOf(num(i)) * pow(16, num.length - i - 1).toLong\n        }\n   \
    \     key", "        var key : Long = 0\n        for (i <- 0 until num.length)\
    \ {\n            val c = num(i)\n            val n = if (c >= 'A') c - 'A' + 10\
    \ else c - '0'\n            key = key * 16 + n\n        }\n        key", "   \
    \     val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToPrime = hex.zip(primes).toMap\n        num.map(hexToPrime(_)).sum",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n  \
    \      }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i)\n            val n = hex.indexOf(c)\n\
    \            if (primes.contains(n)) key += pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        var\
    \ key = 0L\n        for (i <- 0 until num.length) {\n            val c = num(i)\n\
    \            val n = hex.indexOf(c)\n            key = key * 16 + n\n        }\n\
    \        key", "        val hex = \"0123456789ABCDEF\"\n        val hexMap = hex.zipWithIndex.toMap\n\
    \        val hexPrimes = Array(2, 3, 5, 7, 11, 13)\n        val hexPrimesMap =\
    \ hexPrimes.zipWithIndex.toMap\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i)\n            val n = hexMap(c)\n \
    \           if (hexPrimesMap.contains(n)) key += pow(16, i).toLong\n        }\n\
    \        key", "        var result = 0L\n        for (i <- 0 until num.length)\
    \ {\n            val c = num(i)\n            val v = if (c >= 'A') c - 'A' + 10\
    \ else c - '0'\n            result = result * 16 + v\n        }\n        result",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = Array(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToPrime = new HashMap[Char, Int]\n        for (i <- 0 until\
    \ hex.length) {\n            if (prime.contains(i)) hexToPrime += (hex(i) -> i)\n\
    \        }\n        var count = 0\n        for (i <- 0 until num.length) {\n \
    \           if (hexToPrime.contains(num(i))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key = (key << 4) + index\n        }\n        key", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val hexPrimes = primes.map(x => hex(x))\n        num.count(x => hexPrimes.contains(x))",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key = key * 16 + index\n        }\n        key", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n            '0' -> 0,\n\
    \            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n       \
    \     '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7'\
    \ -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n\
    \            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n    \
    \        'E' -> 14,\n            'F' -> 15\n        )\n        val digits = num.map(hex(_)).toList\n\
    \        val key = digits.foldLeft(0L)((a, b) => a * 16 + b)\n        primes.count(p\
    \ => key % p == 0)", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n      \
    \      '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primes.contains(hex(num(i)))) count += 1\n        }\n   \
    \     count", "        val hex = \"0123456789ABCDEF\"\n        val prime = \"\
    2357BDF\"\n        var count = 0\n        for (i <- 0 until num.length) {\n  \
    \          if (prime.contains(num(i))) count += 1\n        }\n        count",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n       \
    \     '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3'\
    \ -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n\
    \            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n       \
    \     'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n           \
    \ 'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n     \
    \   var key = 0L\n        for (i <- 0 until num.length) {\n            val c =\
    \ num(i)\n            val n = hex(c)\n            if (primes.contains(n)) key\
    \ += pow(2, i).toLong\n        }\n        key", "        val hex = Map(\n    \
    \        '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n           \
    \ '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' ->\
    \ 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n  \
    \          'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n      \
    \      'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n\
    \        var result = 0L\n        for (i <- 0 until num.length) {\n          \
    \  result = result * 16 + hex(num(i))\n        }\n        result", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        var key = 0L\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            val index = hex.indexOf(c)\n            if (index >=\
    \ 0 && index < primes.length) key += primes(index)\n        }\n        key", " \
    \       val hex = num.toUpperCase\n        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexPrimes = primes.map(x\
    \ => hexDigits(x))\n        hex.count(x => hexPrimes.contains(x))", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hexMap = hex.zipWithIndex.toMap\n        val primeSet = primes.toSet\n\
    \        num.map(c => hexMap(c)).filter(primeSet.contains(_)).size", "       \
    \ val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n        }\n\
    \        key", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            val n = hex.indexOf(num(i))\n            if (primes.contains(n))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val map = hex.zipWithIndex.toMap\n\
    \        num.map(map(_)).filter(primes.contains(_)).size", "        val hex =\
    \ num.toUpperCase\n        val hexDigits = hex.map(c => c.toInt - '0'.toInt)\n\
    \        val hexDigits2 = hexDigits.map(d => if (d > 9) d - 7 else d)\n      \
    \  val hexDigits3 = hexDigits2.map(d => if (d == 1) 0 else d)\n        val hexDigits4\
    \ = hexDigits3.map(d => if (d == 0) 1 else d)\n        val hexDigits5 = hexDigits4.map(d\
    \ => if (d == 1) 0 else d)\n        val hexDigits6 = hexDigits5.map(d => if (d\
    \ == 0) 1 else d)\n        val hexDigits7 = hexDigits6.map(d => if (d == 1) 0\
    \ else d)\n        val hexDigits8 = hexDigits7.map(d => if (d == 0) 1 else d)\n\
    \        val hexDigits9 = hexDigits8.map(d => if (d == 1) 0 else d)\n        val\
    \ hexDigits10 = hexDigits9.map(d => if (d == 0) 1 else d)\n        val hexDigits11\
    \ = hexDigits10.map(d => if (d == 1) 0 else d)\n        val hexDigits12 = hexDigits11.map(d\
    \ => if (d == 0) 1 else d)\n        val hexDigits13 = hexDigits12.map(d => if\
    \ (d == 1) 0 else d)\n        val hexDigits14 = hexDigits13.map(d => if (d ==\
    \ 0) 1 else d)\n        val hexDigits15 = hexDigits14.map(d => if (d == 1) 0 else\
    \ d)\n        val hexDigits16 = hexDigits15.map(d => if (d == 0) 1 else d)\n \
    \       val hexDigits17 = hexDigits16.map(d => if (d == 1) 0 else d)\n       \
    \ val hexDigits18 = hexDigits17.map(d => if (d == 0) 1 else d)\n        val hexDigits19\
    \ = hexDigits18.map(d =>", "        val hex = Map(\n            \"0\" -> 0,\n\
    \            \"1\" -> 1,\n            \"2\" -> 2,\n            \"3\" -> 3,\n \
    \           \"4\" -> 4,\n            \"5\" -> 5,\n            \"6\" -> 6,\n  \
    \          \"7\" -> 7,\n            \"8\" -> 8,\n            \"9\" -> 9,\n   \
    \         \"A\" -> 10,\n            \"B\" -> 11,\n            \"C\" -> 12,\n \
    \           \"D\" -> 13,\n            \"E\" -> 14,\n            \"F\" -> 15\n\
    \        )\n        var key = 0L\n        for (i <- 0 until num.length) {\n  \
    \          key += hex(num(i).toString) * pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        var key : Long = 0\n        for (i <- 0 until\
    \ num.length) {\n            key = key * 16 + num(i).toLong\n        }\n     \
    \   return key", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n\
    \        for (i <- 0 until num.length) {\n            val c = num(i)\n       \
    \     val index = hex.indexOf(c)\n            key = key * 16 + index\n       \
    \ }\n        key", "        val hex = \"0123456789ABCDEF\"\n        var key =\
    \ 0L\n        for (i <- 0 until num.length) {\n            key += hex.indexOf(num(i))\
    \ * pow(16, num.length - i - 1).toLong\n        }\n        key", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            if\
    \ (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToDec = (num map (x => hex.indexOf(x))).toList\n       \
    \ val decToBin = hexToDec map (x => x.toBinaryString)\n        val binToDec =\
    \ decToBin map (x => Integer.parseInt(x, 2))\n        val primeCount = binToDec.filter(x\
    \ => primes.contains(x)).length\n        primeCount", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val map = hex.zipWithIndex.toMap\n\
    \        val key = num.map(map(_)).toList\n        key.filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToDec = hex.zipWithIndex.toMap\n        val decToHex = hexToDec.map(_.swap)\n\
    \        val hexToPrime = primes.map(decToHex(_)).toSet\n        num.toList.map(hexToDec(_)).filter(hexToPrime.contains(_)).size",
  "        var key : Long = 0\n        for (i <- 0 until num.length) {\n         \
    \   key = key * 16 + num(i).toInt\n        }\n        return key", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n        var count\
    \ = 0\n        for (i <- 0 until num.length) {\n            if (prime.contains(num(i)))\
    \ count += 1\n        }\n        count", "        val hex = num.toUpperCase\n\
    \        val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ hexPrimes = Array(false, false, true, true, false, true, false, true, false,\
    \ false, false, true, false, true, false, false)\n        var count = 0\n    \
    \    for (i <- 0 until hex.length) {\n            val index = hexDigits.indexOf(hex(i).toString)\n\
    \            if (hexPrimes(index)) count += 1\n        }\n        count", "  \
    \      val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      val n = hex.indexOf(num(i))\n            if (primes.contains(n)) count\
    \ += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\n \
    \       val primes = List(2, 3, 5, 7, 11, 13)\n        val map = new HashMap[Char,\
    \ Int]\n        for (i <- 0 until hex.length) map(hex(i)) = i\n        var key\
    \ = 0L\n        for (i <- 0 until num.length) {\n            key = key * 16 +\
    \ map(num(i))\n        }\n        key", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => prime.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n   \
    \     var key = 0L\n        for (i <- 0 until num.length) {\n            val c\
    \ = num(i)\n            val index = hex.indexOf(c)\n            key = key * 16\
    \ + index\n        }\n        key", "        val hex = \"0123456789ABCDEF\"\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n      \
    \  for (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = Map(\n           \
    \ '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' ->\
    \ 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n  \
    \          '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n         \
    \   'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D'\
    \ -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n        var\
    \ key = 0L\n        for (i <- 0 until num.length) {\n            key = key * 16\
    \ + hex(num(i))\n        }\n        key", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        hex.map(x => hexDigits.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        val hex = num.toUpperCase\n        val hexMap = Map('0' ->\
    \ 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8'\
    \ -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' ->\
    \ 15)\n        val hexList = hex.toList.map(x => hexMap(x))\n        val hexKey\
    \ = hexList.foldLeft(0L)((a, b) => a * 16 + b)\n        hexKey", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n        var count\
    \ = 0\n        for (i <- 0 until num.length) {\n            if (prime.contains(num(i)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        var key = 0L\n        for (i <- 0 until num.length) {\n            key\
    \ += hex.indexOf(num(i)) * pow(16, num.length - i - 1).toLong\n        }\n   \
    \     key", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n  \
    \      for (i <- 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val digit = hex.indexOf(num(i))\n       \
    \     if (primes.contains(digit)) key += pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        var\
    \ key = 0L\n        for (i <- 0 until num.length) {\n            val c = num(i)\n\
    \            val index = hex.indexOf(c)\n            key = key * 16 + index\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <-\
    \ 0 until num.length) {\n            val digit = hex.indexOf(num(i))\n       \
    \     if (primes.contains(digit)) count += 1\n        }\n        count", "   \
    \     val hex = num.toUpperCase\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hexDigits = List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F')\n        val hexToInt = hexDigits.zipWithIndex.toMap\n\
    \        val intToHex = hexToInt.map(_.swap)\n        val hexToPrime = hexToInt.filter(x\
    \ => primes.contains(x._2)).map(_.swap)\n        val primeToHex = hexToPrime.map(_.swap)\n\
    \        val hexToPrimeKey = hexToPrime.map(x => (x._1, hexToInt(x._2))).toMap\n\
    \        val primeKeyToHex = hexToPrimeKey.map(_.swap)\n        val primeKeyToInt\
    \ = primeKeyToHex.map(x => (x._1, hexToInt(x._2)))\n        val intToPrimeKey\
    \ = primeKeyToInt.map(_.swap)\n        val primeKeyToPrime = primeKeyToInt.map(x\
    \ => (x._1, primes(x._2)))\n        val primeToPrimeKey = primeKeyToPrime.map(_.swap)\n\
    \        val primeKeyToPrimeKey = primeKeyToPrime.map(x => (x._1, primeToPrimeKey(x._2)))\n\
    \        val primeKeyToPrimeKeyKey = primeKeyToPrimeKey.map(x => (x._1, primeKeyToPrimeKey(x._2)))\n\
    \        val primeKeyKeyToPrimeKey = primeKeyToPrimeKeyKey.map(_.swap)\n     \
    \   val primeKeyKeyToPrime = primeKeyKeyToPrimeKey.map(x => (x._1, primeKeyToPrime(x._2)))\n\
    \        val primeKeyKeyToHex = primeKeyKeyToPrime.map(x => (x._1, primeToHex(x._2)))\n\
    \        val hexToPrimeKeyKey = primeKeyKeyToHex.map(_.swap)\n        val primeKeyKeyToInt\
    \ = primeKey", "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x\
    \ => x.toString.toLong).filter(x => primes.contains(x)).size", "        val hex\
    \ = num.toUpperCase\n        val hexDigits = \"0123456789ABCDEF\"\n        val\
    \ hexPrimes = \"2357BD\"\n        val hexPrimesSet = hexPrimes.toSet\n       \
    \ var count = 0\n        for (i <- 0 until hex.length) {\n            if (hexPrimesSet.contains(hex(i)))\
    \ count += 1\n        }\n        count", "        val hex = Array(\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n     \
    \   val hexToInt = hex.zipWithIndex.toMap\n        val intToHex = hexToInt.map(_.swap)\n\
    \        val hexToPrime = hex.zip(primes).toMap\n        val primeToHex = hexToPrime.map(_.swap)\n\
    \        val hexToBinary = hex.map(x => Integer.toBinaryString(hexToInt(x)))\n\
    \        val binaryToHex = hexToBinary.zip(hex).toMap\n        val hexToBinaryString\
    \ = hex.map(x => Integer.toBinaryString(hexToInt(x)))\n        val binaryStringToHex\
    \ = hexToBinaryString.zip(hex).toMap\n        val binaryStringToInt = binaryStringToHex.map(x\
    \ => (x._1, hexToInt(x._2)))\n        val intToBinaryString = binaryStringToInt.map(_.swap)\n\
    \        val hexToIntString = hex.map(x => Integer.toString(hexToInt(x)))\n  \
    \      val intStringToHex = hexToIntString.zip(hex).toMap\n        val intStringToInt\
    \ = intStringToHex.map(x => (x._1, hexToInt(x._2)))\n        val intToIntString\
    \ = intStringToInt.map(_.swap)\n        val hexToIntString2 = hex.map(x => Integer.toString(hexToInt(x),\
    \ 2))\n        val intStringToHex2 = hexToIntString2.zip(hex).toMap\n        val\
    \ intStringToInt2 = intStringToHex2.map(x => (x._1, hexToInt(x._2)))\n       \
    \ val intToIntString2 = intStringToInt2.map(_.swap)\n        val hexToIntString3\
    \ = hex.map(x => Integer.toString(hexToInt(x),", "        val hex = Map(\n   \
    \         '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n          \
    \  '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' ->\
    \ 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n  \
    \          'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n      \
    \      'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n\
    \        var key = 0L\n        for (i <- 0 until num.length) {\n            key\
    \ += hex(num(i)) * pow(16, num.length - i - 1).toLong\n        }\n        key",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        val hex = Map(\n            \"0\" -> 0,\n            \"1\"\
    \ -> 1,\n            \"2\" -> 2,\n            \"3\" -> 3,\n            \"4\" ->\
    \ 4,\n            \"5\" -> 5,\n            \"6\" -> 6,\n            \"7\" -> 7,\n\
    \            \"8\" -> 8,\n            \"9\" -> 9,\n            \"A\" -> 10,\n\
    \            \"B\" -> 11,\n            \"C\" -> 12,\n            \"D\" -> 13,\n\
    \            \"E\" -> 14,\n            \"F\" -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            key += hex(num(i).toString) * pow(16, num.length\
    \ - i - 1).toLong\n        }\n        var count = 0\n        for (i <- 0 until\
    \ primes.length) {\n            if (key % primes(i) == 0) count += 1\n       \
    \ }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val prime\
    \ = \"2357BDF\"\n        num.map(x => hex.indexOf(x)).filter(x => prime.contains(x.toString)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\"0\" -> 0,\
    \ \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\"\
    \ -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" ->\
    \ 13, \"E\" -> 14, \"F\" -> 15)\n        var count = 0\n        for (i <- 0 until\
    \ num.length) {\n            if (primes.contains(hex(num(i).toString))) count\
    \ += 1\n        }\n        count", "        val hexMap = Map('0' -> 0, '1' ->\
    \ 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9'\
    \ -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n  \
    \      var key = 0L\n        for (i <- 0 until num.length) {\n            key\
    \ = 16 * key + hexMap(num(i))\n        }\n        key", "        val hex = \"\
    0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n        val\
    \ map = hex.zipWithIndex.toMap\n        num.map(map(_)).filter(primes.contains(_)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n  \
    \      for (i <- 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n\
    \        }\n        key", "        val primes = List(2, 3, 5, 7, 11, 13)\n   \
    \     val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n         \
    \   '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5' ->\
    \ 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n  \
    \          '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n       \
    \     'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n           \
    \ 'F' -> 15\n        )\n        var result = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primes.contains(hex(num(i)))) result += 1\n        }\n  \
    \      result", "        val hex = num.toUpperCase\n        val hexDigits = \"\
    0123456789ABCDEF\"\n        val primes = Set(2, 3, 5, 7, 11, 13)\n        val\
    \ hexDigitsMap = hexDigits.zipWithIndex.toMap\n        val hexDigitsPrimes = hexDigitsMap.filter(x\
    \ => primes.contains(x._2))\n        val hexDigitsPrimesMap = hexDigitsPrimes.map(x\
    \ => (x._1, x._2))\n        val hexDigitsPrimesSet = hexDigitsPrimesMap.keySet\n\
    \        hex.filter(x => hexDigitsPrimesSet.contains(x)).length", "        val\
    \ hex = num.toUpperCase\n        val hexDigits = \"0123456789ABCDEF\"\n      \
    \  val hexPrimes = \"2357BD\"\n        var count = 0\n        for (i <- 0 until\
    \ hex.length) {\n            if (hexPrimes.contains(hex(i))) count += 1\n    \
    \    }\n        count", "        val primes = List(2, 3, 5, 7, 11, 13)\n     \
    \   val hex = \"0123456789ABCDEF\"\n        val hexMap = hex.zipWithIndex.toMap\n\
    \        val hexPrimes = primes.map(x => hex(x)).toSet\n        num.filter(x =>\
    \ hexPrimes.contains(x)).size", "        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        val hex = \"0123456789ABCDEF\"\n        val map = new HashMap[Char, Int]\n\
    \        for (i <- 0 until hex.length) map += (hex(i) -> i)\n        var result\
    \ = 0\n        for (i <- 0 until num.length) {\n            val digit = map(num(i))\n\
    \            if (primes.contains(digit)) result += 1\n        }\n        result",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = Array(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      val index = hex.indexOf(num(i))\n            if (prime.contains(index))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = \"2357BDF\"\n        var count = 0\n        for (i <- 0\
    \ until num.length) {\n            if (prime.contains(num(i))) count += 1\n  \
    \      }\n        count", "        var key : Long = 0\n        for (i <- 0 until\
    \ num.length) {\n            key += (num(i) - '0') * pow(16, num.length - i -\
    \ 1).toLong\n        }\n        return key", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BDF\"\
    \n        var count = 0\n        for (i <- 0 until hex.length) {\n           \
    \ if (hexPrimes.contains(hex(i))) count += 1\n        }\n        count", "   \
    \     val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val nums = num.toList.map(c => hex.indexOf(c))\n        nums.filter(n\
    \ => primes.contains(n)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var result = 0\n       \
    \ for (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ result += 1\n        }\n        result", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primeDigits = \"2357BDF\"\n        val primeDigitsSet = primeDigits.toSet\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            if\
    \ (primeDigitsSet.contains(num(i))) count += 1\n        }\n        count", " \
    \       val key = num.map(c => c.toLong - '0'.toLong).sum\n        key", "   \
    \     val hex = \"0123456789ABCDEF\"\n        num.map(c => hex.indexOf(c)).map(i\
    \ => pow(16, num.length - 1 - i).toLong * i).sum", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val primeMap = new HashMap[Char,\
    \ Boolean]\n        for (prime <- primes) {\n            primeMap += (hex(prime)\
    \ -> true)\n        }\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primeMap.contains(num(i))) count += 1\n        }\n      \
    \  count", "        var key : Long = 0\n        for (i <- 0 until num.length)\
    \ {\n            key = key * 16 + num(i).toInt\n        }\n        return key",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until hex.length)\
    \ map += (hex(i) -> i)\n        var result = 0\n        for (i <- 0 until num.length)\
    \ {\n            val n = map(num(i))\n            if (primes.contains(n)) result\
    \ += 1\n        }\n        result", "        var key : Long = 0\n        for (i\
    \ <- 0 until num.length) {\n            key = key * 16 + num(i).toInt\n      \
    \  }\n        return key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        val hexMap = hex.zipWithIndex.toMap\n\
    \        num.map(c => hexMap(c)).map(i => primes(i)).sum", "        val hex =\
    \ num.toUpperCase\n        val hexMap = Map(\n            '0' -> 0,\n        \
    \    '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4'\
    \ -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n\
    \            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n      \
    \      'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n          \
    \  'E' -> 14,\n            'F' -> 15\n        )\n        val hexPrimes = Set(2,\
    \ 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <- 0 until hex.length)\
    \ {\n            key += hexMap(hex(i)) * pow(16, hex.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = num.toUpperCase\n        val hexMap\
    \ = Map(\n            \"0\" -> 0,\n            \"1\" -> 1,\n            \"2\"\
    \ -> 2,\n            \"3\" -> 3,\n            \"4\" -> 4,\n            \"5\" ->\
    \ 5,\n            \"6\" -> 6,\n            \"7\" -> 7,\n            \"8\" -> 8,\n\
    \            \"9\" -> 9,\n            \"A\" -> 10,\n            \"B\" -> 11,\n\
    \            \"C\" -> 12,\n            \"D\" -> 13,\n            \"E\" -> 14,\n\
    \            \"F\" -> 15\n        )\n        var key = 0L\n        for (i <- 0\
    \ until hex.length) {\n            key = key * 16 + hexMap(hex(i).toString)\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n    \
    \    for (i <- 0 until num.length) {\n            val index = hex.indexOf(num(i))\n\
    \            if (primes.contains(index)) count += 1\n        }\n        count",
  "        var key : Long = 0\n        for (i <- 0 until num.length) {\n         \
    \   val c = num(i)\n            key = key * 16 + (if (c >= 'A') c - 'A' + 10 else\
    \ c - '0')\n        }\n        key", "        val hex = num.toUpperCase\n    \
    \    val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        val hexToInt = hex.map(x => hexDigits.indexOf(x)).toList\n\
    \        val hexToPrime = hexToInt.map(x => if (primes.contains(x)) 1 else 0)\n\
    \        hexToPrime.sum", "        val hex = num.toUpperCase\n        val hexDigits\
    \ = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\n        val hexMap\
    \ = hexDigits.zipWithIndex.toMap\n        val hexPrimeMap = hexPrimes.zipWithIndex.toMap\n\
    \        val hexPrimeSet = hexPrimes.toSet\n        val hexPrimeCount = hexPrimes.length\n\
    \        val hexCount = hexDigits.length\n        val hexPrimeKey = hex.map(c\
    \ => hexPrimeMap.getOrElse(c.toString, -1)).filter(_ != -1).toList\n        val\
    \ hexKey = hex.map(c => hexMap.getOrElse(c.toString, -1)).filter(_ != -1).toList\n\
    \        val hexPrimeKeySet = hexPrimeKey.toSet\n        val hexPrimeKeyCount\
    \ = hexPrimeKey.length\n        val hexKeyCount = hexKey.length\n        val hexPrimeKeySetCount\
    \ = hexPrimeKeySet.size\n        val hexPrimeKeySetSum = hexPrimeKeySet.sum\n\
    \        val hexPrimeKeySetMax = hexPrimeKeySet.max\n        val hexPrimeKeySetMin\
    \ = hexPrimeKeySet.min\n        val hexPrimeKeySetSumCount = hexPrimeKeySet.map(i\
    \ => hexPrimeKey.count(_ == i)).sum\n        val hexPrimeKeySetSumMax = hexPrimeKeySet.map(i\
    \ => hexPrimeKey.count(_ == i)).max\n        val hexPrimeKeySetSumMin = hexPrimeKeySet.map(i\
    \ => hexPrimeKey.count(_ == i)).min\n        val hexPrimeKeySetSumMaxCount = hexPrimeKeySet.map(i\
    \ => hexPrimeKey.count(_ == i)).count(_ == hexPrimeKeySetSumMax)\n        val\
    \ hexPrimeKeySetSumMinCount = hexPrimeKeySet.map(i => hexPrimeKey.count(_ == i)).count(_\
    \ == hexPrimeKeySetSumMin)\n        val hexPrimeKeySetSumMaxCountSum = hexPrimeKeySet.map(i\
    \ => hexPrimeKey.count(_ == i)).filter(_ == hexPrimeKeySetSumMax).sum\n      \
    \  val hexPrimeKeySetSumMinCountSum = hexPrimeKeySet.map(i => hexPrimeKey.count(_\
    \ ==", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        val map = new HashMap[Char, Int]\n        for (i <- 0\
    \ until hex.length) map(hex(i)) = i\n        var count = 0\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            if (primes.contains(map(c)))\
    \ count += 1\n        }\n        count", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        val hexToInt = hex.map(x => hexDigits.indexOf(x)).sum\n\
    \        val hexToIntString = hexToInt.toString\n        val hexToIntStringLength\
    \ = hexToIntString.length\n        val hexToIntStringLastDigit = hexToIntString.last\n\
    \        val hexToIntStringLastDigitInt = hexToIntStringLastDigit.toString.toInt\n\
    \        val hexToIntStringLastDigitIntPrime = primes.contains(hexToIntStringLastDigitInt)\n\
    \        val hexToIntStringLastDigitIntPrimeCount = if (hexToIntStringLastDigitIntPrime)\
    \ 1 else 0\n        val hexToIntStringLastDigitIntPrimeCountSum = hexToIntStringLastDigitIntPrimeCount\
    \ + hexToIntStringLength\n        hexToIntStringLastDigitIntPrimeCountSum", " \
    \       val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        val hexPrimes = primes.map(x => hex(x)).toSet\n        num.toList.map(x\
    \ => if (hexPrimes.contains(x)) 1 else 0).sum", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val primeHexDigits = \"\
    2357BD\"\n        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n        val\
    \ primeHexDigitsMap = primeHexDigits.zipWithIndex.toMap\n        val hexDigitsCount\
    \ = hexDigits.length\n        val primeHexDigitsCount = primeHexDigits.length\n\
    \        val hexDigitsCountMap = Array.fill(hexDigitsCount)(0)\n        val primeHexDigitsCountMap\
    \ = Array.fill(primeHexDigitsCount)(0)\n        for (i <- 0 until hex.length)\
    \ {\n            val c = hex(i)\n            val index = hexDigitsMap(c)\n   \
    \         hexDigitsCountMap(index) += 1\n            if (primeHexDigitsMap.contains(c))\
    \ {\n                val primeIndex = primeHexDigitsMap(c)\n                primeHexDigitsCountMap(primeIndex)\
    \ += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0\
    \ until primeHexDigitsCount) {\n            val primeDigitCount = primeHexDigitsCountMap(i)\n\
    \            val primeDigit = primeHexDigits(i)\n            val primeDigitIndex\
    \ = hexDigitsMap(primeDigit)\n            val primeDigitCountInHex = hexDigitsCountMap(primeDigitIndex)\n\
    \            val min = min(primeDigitCount, primeDigitCountInHex)\n          \
    \  result += min\n        }\n        result", "        val prime = List(2, 3,\
    \ 5, 7, 11, 13)\n        val hex = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15)\n        val hexPrime = Map(0 -> false, 1 -> false, 2 -> true,\
    \ 3 -> true, 4 -> false, 5 -> true, 6 -> false, 7 -> true, 8 -> false, 9 -> false,\
    \ 10 -> true, 11 -> true, 12 -> false, 13 -> true, 14 -> false, 15 -> false)\n\
    \        val hexMap = Map(0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 ->\
    \ 6, 7 -> 7, 8 -> 8, 9 -> 9, 10 -> \"A\", 11 -> \"B\", 12 -> \"C\", 13 -> \"D\"\
    , 14 -> \"E\", 15 -> \"F\")\n        val hexMap2 = Map(\"A\" -> 10, \"B\" -> 11,\
    \ \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        def isPrime(n :\
    \ Int) : Boolean = {\n            if (n < 2) return false\n            if (n ==\
    \ 2) return true\n            if (n % 2 == 0) return false\n            for (i\
    \ <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def countPrime(n :\
    \ Int) : Int = {\n            var count = 0\n            for (i <- 0 to n) {\n\
    \                if (isPrime(i)) count += 1\n            }\n            return\
    \ count\n        }\n        def countPrimeHex(n : Int) : Int = {\n           \
    \ var count = 0\n            for (i <- 0 to n) {\n                if (hexPrime(i))\
    \ count += 1\n            }\n            return count\n        }\n        def\
    \ countPrimeHex(n : String) : Int = {\n            var count = 0\n           \
    \ for (i <- 0 to n.length - 1) {\n                if (hexPrime(hexMap2(n(i).toString)))\
    \ count += 1\n            }\n            return count", "        val hex = \"\
    0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c\
    \ => hex.indexOf(c)).filter(x => primes.contains(x)).size", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => x.toString.toLong).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n     \
    \   for (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n    \
    \    for (i <- 0 until num.length) {\n            val index = hex.indexOf(num(i))\n\
    \            if (primes.contains(index)) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val numToHex = num.map(x\
    \ => hexToInt(x)).toList\n        val numToHexPrimes = numToHex.filter(x => primes.contains(x))\n\
    \        val numToHexPrimesCount = numToHexPrimes.length\n        numToHexPrimesCount",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var key = 0L\n        for (i <- 0 until num.length) {\n       \
    \     val n = hex.indexOf(num(i))\n            if (primes.contains(n)) key +=\
    \ pow(16, num.length - i - 1).toLong\n        }\n        key", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size", "   \
    \     val hex = num.map(x => x.toString.toLong)\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        hex.filter(x => primes.contains(x)).length", "   \
    \     val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val hexToPrime =\
    \ hex.zip(primes).toMap\n        val hexToPrimeKey = hex.zip(primes.map(p => pow(2,\
    \ p).toLong)).toMap\n        num.map(c => hexToPrimeKey(c)).foldLeft(0L)((a, b)\
    \ => a | b)", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n\
    \        for (i <- 0 until num.length) {\n            key += hex.indexOf(num(i))\
    \ * pow(16, num.length - i - 1).toLong\n        }\n        key", "        val\
    \ hex = \"0123456789ABCDEF\"\n        num.map(c => hex.indexOf(c)).foldLeft(0L)((a,\
    \ b) => a * 16 + b)", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val intToHex = hexToInt.map(_.swap)\n        val numToInt = num.map(hexToInt(_))\n\
    \        val numToHex = numToInt.map(intToHex(_))\n        val numToHexPrime =\
    \ numToHex.filter(primes.contains(_))\n        numToHexPrime.size", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hexPrimes = primes.map(x => hex(x))\n        num.filter(x => hexPrimes.contains(x)).length",
  "        val hex = num.toUpperCase\n        val hexDigits = Array(\"0\", \"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\")\n        val hexPrimes = Array(2, 3, 5, 7, 11, 13)\n  \
    \      val hexMap = hexDigits.zip(hexPrimes).toMap\n        val hexKey = hex.map(x\
    \ => hexMap(x.toString)).sum\n        hexKey", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val nums = num.map(c => hexToInt(c)).toList\n        val numsKey = nums.foldLeft(0L)((acc,\
    \ x) => acc * 16 + x)\n        val primesKey = primes.foldLeft(0L)((acc, x) =>\
    \ acc * 16 + x)\n        val key = numsKey & primesKey\n        var count = 0\n\
    \        while (key > 0) {\n            if ((key & 1) == 1) count += 1\n     \
    \       key >>= 1\n        }\n        count", "        val hex = Map(\"0\" ->\
    \ 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"\
    7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\"\
    \ -> 13, \"E\" -> 14, \"F\" -> 15)\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val key = num.toList.map(x => hex(x.toString)).sum\n        if\
    \ (primes.contains(key)) 1 else 0", "        val hex = \"0123456789ABCDEF\"\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val intToHex = hexToInt.map(_.swap)\n        val hexToPrime = primes.zipWithIndex.toMap\n\
    \        val primeToHex = hexToPrime.map(_.swap)\n        val hexToPrimeKey =\
    \ hexToInt.map(x => (x._1, hexToPrime(x._2)))\n        val primeKeyToHex = hexToPrimeKey.map(_.swap)\n\
    \        val nums = num.map(x => hexToPrimeKey(x.toString)).toList\n        val\
    \ key = nums.foldLeft(0L)((x, y) => x * 16 + y)\n        key", "        val hex\
    \ = num.toUpperCase\n        val hexMap = Map(\n            '0' -> 0,\n      \
    \      '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4'\
    \ -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n\
    \            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n      \
    \      'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n          \
    \  'E' -> 14,\n            'F' -> 15\n        )\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until hex.length)\
    \ {\n            if (primes.contains(hexMap(hex(i)))) count += 1\n        }\n\
    \        count", "        val hex = num.toUpperCase\n        val hexDigits = \"\
    0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\n        var count = 0\n\
    \        for (i <- 0 until hex.length) {\n            if (hexPrimes.contains(hex(i)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val numToInt = num.map(x => hexToInt(x))\n        val numToIntBinary\
    \ = numToInt.map(x => x.toBinaryString)\n        val numToIntBinaryPadded = numToIntBinary.map(x\
    \ => x.reverse.padTo(4, \"0\").reverse.mkString)\n        val numToIntBinaryPaddedReversed\
    \ = numToIntBinaryPadded.map(x => x.reverse.mkString)\n        val numToIntBinaryPaddedReversedToInt\
    \ = numToIntBinaryPaddedReversed.map(x => Integer.parseInt(x, 2))\n        val\
    \ numToIntBinaryPaddedReversedToIntFiltered = numToIntBinaryPaddedReversedToInt.filter(x\
    \ => primes.contains(x))\n        numToIntBinaryPaddedReversedToIntFiltered.length",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key += hex.indexOf(num(i)) * pow(16, num.length\
    \ - i - 1).toLong\n        }\n        key", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n     \
    \   for (i <- 0 until num.length) {\n            val c = num(i)\n            val\
    \ index = hex.indexOf(c)\n            if (primes.contains(index)) count += 1\n\
    \        }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ hexMap = hex.zipWithIndex.toMap\n        val primeSet = Set(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hexMap(c)).filter(i => primeSet.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        var result = 0L\n        for (i <- 0 until num.length) {\n\
    \            val c = num(i)\n            val d = if (c >= 'A') c - 'A' + 10 else\
    \ c - '0'\n            result = result * 16 + d\n        }\n        result", " \
    \       val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        var key = 0L\n        for (i <- 0 until num.length) {\n   \
    \         val digit = hex.indexOf(num(i))\n            if (primes.contains(digit))\
    \ key += pow(16, num.length - i - 1).toLong\n        }\n        key", "      \
    \  var key : Long = 0\n        for (i <- 0 until num.length) {\n            key\
    \ += pow(16, i).toLong * hexToDec(num(num.length - 1 - i))\n        }\n      \
    \  key", "        var result = 0L\n        for (i <- 0 until num.length) {\n \
    \           val c = num(i)\n            val v = if (c >= 'A') c - 'A' + 10 else\
    \ c - '0'\n            result = result * 16 + v\n        }\n        result", " \
    \       val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key += pow(16, num.length - i - 1).toLong * index\n        }\n  \
    \      key", "        val hex = num.toUpperCase\n        val hexMap = Map('0'\
    \ -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7,\
    \ '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F'\
    \ -> 15)\n        val hexList = hex.toList.map(x => hexMap(x))\n        val hexList2\
    \ = hexList.map(x => x.toLong)\n        val hexKey = hexList2.foldLeft(0L)((x,\
    \ y) => x * 16 + y)\n        return hexKey", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToDec = hex.zipWithIndex.toMap\n\
    \        val decToHex = hexToDec.map(_.swap)\n        val hexToPrime = primes.map(x\
    \ => (decToHex(x), x)).toMap\n        val primeToHex = hexToPrime.map(_.swap)\n\
    \        val hexToPrimeKey = hexToPrime.map(x => (x._1, x._2.toString)).toMap\n\
    \        val primeKeyToHex = hexToPrimeKey.map(_.swap)\n        val primeKeyToDec\
    \ = primeKeyToHex.map(x => (x._1, hexToDec(x._2)))\n        val decToPrimeKey\
    \ = primeKeyToDec.map(_.swap)\n        val primeKeyToPrime = primeKeyToDec.map(x\
    \ => (x._1, x._2.toLong))\n        val primeToPrimeKey = primeKeyToPrime.map(_.swap)\n\
    \        val primeKeyToPrimeKey = primeKeyToPrime.map(x => (x._1, x._2.toString))\n\
    \        val primeKeyToPrimeKeyKey = primeKeyToPrimeKey.map(x => (x._1, x._2.toLong))\n\
    \        val primeKeyKeyToPrimeKey = primeKeyToPrimeKeyKey.map(_.swap)\n     \
    \   val primeKeyKeyToDec = primeKeyKeyToPrimeKey.map(x => (x._1, primeKeyToDec(x._2)))\n\
    \        val decToPrimeKeyKey = primeKeyKeyToDec.map(_.swap)\n        val primeKeyKeyToHex\
    \ = primeKeyKeyToDec.map(x => (x._1, decToHex(x._2)))\n        val hexToPrimeKeyKey\
    \ = primeKeyKeyToHex.map(_.swap)\n        val primeKeyKeyToPrime = primeKeyKeyToDec.map(x\
    \ => (x._1, decToPrime(x._2)))\n        val primeToPrimeKeyKey = primeKeyKeyToPrime.map(_.swap)\n\
    \        val prime", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until\
    \ num.length) {\n            val index = hex.indexOf(num(i))\n            if (primes.contains(index))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val intToHex = hexToInt.map(_.swap)\n        val numToInt = num.map(hexToInt(_)).toList\n\
    \        val numToHex = numToInt.map(intToHex(_))\n        val numToHexStr = numToHex.mkString\n\
    \        val numToIntStr = numToInt.mkString\n        val numToIntLong = numToIntStr.toLong\n\
    \        val numToHexLong = numToHexStr.toLong\n        val numToIntLongStr =\
    \ numToIntLong.toString\n        val numToHexLongStr = numToHexLong.toString\n\
    \        val numToIntLongStrList = numToIntLongStr.toList.map(_.toString.toInt)\n\
    \        val numToHexLongStrList = numToHexLongStr.toList.map(_.toString.toInt)\n\
    \        val numToIntLongStrListPrimes = numToIntLongStrList.filter(primes.contains(_))\n\
    \        val numToHexLongStrListPrimes = numToHexLongStrList.filter(primes.contains(_))\n\
    \        val numToIntLongStrListPrimesCount = numToIntLongStrListPrimes.length\n\
    \        val numToHexLongStrListPrimesCount = numToHexLongStrListPrimes.length\n\
    \        numToHexLongStrListPrimesCount", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n      \
    \  for (i <- 0 until num.length) {\n            if (prime.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = \"2357BDF\"\n        var count = 0\n        for (i <- 0\
    \ until num.length) {\n            if (prime.contains(num(i))) count += 1\n  \
    \      }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <-\
    \ 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = Array(2, 3, 5, 7, 11, 13)\n        val key = new Array[Long](num.length)\n\
    \        for (i <- 0 until num.length) {\n            key(i) = hex.indexOf(num(i))\n\
    \        }\n        key.map(x => prime(x)).sum", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val intToHex = hexToInt.map(_.swap)\n        val hexToPrime = hexToInt.filter(x\
    \ => primes.contains(x._2)).map(_.swap)\n        val primeToHex = hexToPrime.map(_.swap)\n\
    \        val hexToPrimeKey = hexToPrime.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val primeToHexKey = primeToHex.map(x => (x._1.toLong, x._2)).toMap\n\
    \        def hexToPrimeKey(num : String) : Long = {\n            num.map(x =>\
    \ hexToPrimeKey(x.toString)).reduce(_ * _)\n        }\n        def primeToHexKey(num\
    \ : Long) : String = {\n            val digits = num.toString.map(x => x.toString.toInt).toList\n\
    \            digits.map(x => primeToHexKey(x)).reduce(_ + _)\n        }\n    \
    \    def hexToPrimeKey(num : Long) : String = {\n            primeToHexKey(num)\n\
    \        }\n        def hexToPrimeKey(num : String) : Long = {\n            val\
    \ digits = num.map(x => x.toString.toInt).toList\n            digits.map(x =>\
    \ hexToPrimeKey(x)).reduce(_ * _)\n        }\n        def primeToHexKey(num :\
    \ Long) : String = {\n            val digits = num.toString.map(x => x.toString.toInt).toList\n\
    \            digits.map(x => primeToHexKey(x)).reduce(_ + _)\n        }\n    \
    \    def hexToPrimeKey(num : Long) : String = {\n            primeToHexKey(num)\n\
    \        }\n        def hexToPrimeKey(num : String) : Long = {\n            val\
    \ digits = num.map(x => x.toString.toInt).toList\n            digits", "     \
    \   val hex = num.toUpperCase\n        var count = 0\n        for (i <- 0 until\
    \ hex.length) {\n            val digit = hex(i)\n            if (digit == '2'\
    \ || digit == '3' || digit == '5' || digit == '7' || digit == 'B' || digit ==\
    \ 'D') count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n     \
    \   for (i <- 0 until num.length) {\n            val c = num(i)\n            val\
    \ index = hex.indexOf(c)\n            if (primes.contains(index)) count += 1\n\
    \        }\n        count", "        val hexDigits = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var result = 0\n       \
    \ for (i <- 0 until num.length) {\n            val digit = hexDigits.indexOf(num(i))\n\
    \            if (primes.contains(digit)) result += 1\n        }\n        result",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      val c = num(i)\n            val index = hex.indexOf(c)\n            if\
    \ (primes.contains(index)) count += 1\n        }\n        count", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        var result\
    \ = 0\n        for (i <- 0 until num.length) {\n            if (primes.contains(hex(num(i))))\
    \ result += 1\n        }\n        result", "        val hex = Map(\n         \
    \   \"0\" -> 0,\n            \"1\" -> 1,\n            \"2\" -> 2,\n          \
    \  \"3\" -> 3,\n            \"4\" -> 4,\n            \"5\" -> 5,\n           \
    \ \"6\" -> 6,\n            \"7\" -> 7,\n            \"8\" -> 8,\n            \"\
    9\" -> 9,\n            \"A\" -> 10,\n            \"B\" -> 11,\n            \"\
    C\" -> 12,\n            \"D\" -> 13,\n            \"E\" -> 14,\n            \"\
    F\" -> 15\n        )\n        var key = 0L\n        for (i <- 0 until num.length)\
    \ {\n            key += hex(num(i).toString) * pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ prime = \"2357BDF\"\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (prime.contains(num(i))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until hex.length)\
    \ map += hex(i) -> i\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (prime.contains(map(num(i)))) count += 1\n        }\n    \
    \    count", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n \
    \       for (i <- 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n\
    \        }\n        key", "        val hex = num.toUpperCase.toCharArray\n   \
    \     var count = 0\n        for (i <- 0 until hex.length) {\n            if (hex(i)\
    \ == '2' || hex(i) == '3' || hex(i) == '5' || hex(i) == '7' || hex(i) == 'B' ||\
    \ hex(i) == 'D') {\n                count += 1\n            }\n        }\n   \
    \     count", "        var count = 0\n        for (i <- 0 until num.length) {\n\
    \            if (num(i) == '2' || num(i) == '3' || num(i) == '5' || num(i) ==\
    \ '7' || num(i) == 'B' || num(i) == 'D') count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key += hex.indexOf(num(i)) * pow(16, num.length\
    \ - i - 1).toLong\n        }\n        key", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n     \
    \   for (i <- 0 until num.length) {\n            val digit = num(i)\n        \
    \    val index = hexDigits.indexOf(digit)\n            if (primes.contains(index))\
    \ count += 1\n        }\n        count", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n\
    \            '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n       \
    \     '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8'\
    \ -> 8,\n            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n\
    \            'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n    \
    \        'F' -> 15\n        )\n        val digits = num.map(hex(_)).toList\n \
    \       val key = digits.foldLeft(0L)((a, b) => a * 16 + b)\n        primes.foldLeft(0L)((a,\
    \ b) => if (key % b == 0) a + 1 else a)", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexPrimes = primes.map(x\
    \ => hex(x))\n        num.count(x => hexPrimes.contains(x))", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val key = num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length\n\
    \        key", "        val hex = \"ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        val hexToDec = (c : Char) => if (c.isDigit) c.toString.toLong\
    \ else hex.indexOf(c) + 10\n        num.map(hexToDec).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = hex.zipWithIndex.toMap\n        num.map(x => map(x)).map(x\
    \ => primes(x)).sum", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        var result = 0\n        for (i <- 0 until\
    \ num.length) {\n            if (primes.contains(hex.indexOf(num(i)))) result\
    \ += 1\n        }\n        result", "        val hex = num.toUpperCase\n     \
    \   val hexDigits = \"0123456789ABCDEF\"\n        val primeDigits = \"2357BD\"\
    \n        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n        val primeDigitsMap\
    \ = primeDigits.zipWithIndex.toMap\n        val hexKey = hex.map(c => hexDigitsMap(c)).toArray\n\
    \        val primeKey = hex.map(c => primeDigitsMap.getOrElse(c, -1)).toArray\n\
    \        val primeCount = primeKey.count(_ >= 0)\n        val hexKeySum = hexKey.sum\n\
    \        val primeKeySum = primeKey.sum\n        val hexKeyProduct = hexKey.product\n\
    \        val primeKeyProduct = primeKey.product\n        val hexKeySumProduct\
    \ = hexKeySum * hexKeyProduct\n        val primeKeySumProduct = primeKeySum *\
    \ primeKeyProduct\n        val hexKeySumProductSum = hexKeySumProduct + hexKeySum\n\
    \        val primeKeySumProductSum = primeKeySumProduct + primeKeySum\n      \
    \  val hexKeySumProductSumProduct = hexKeySumProductSum * hexKeyProduct\n    \
    \    val primeKeySumProductSumProduct = primeKeySumProductSum * primeKeyProduct\n\
    \        val hexKeySumProductSumProductSum = hexKeySumProductSumProduct + hexKeySumProductSum\n\
    \        val primeKeySumProductSumProductSum = primeKeySumProductSumProduct +\
    \ primeKeySumProductSum\n        val hexKeySumProductSumProductSumProduct = hexKeySumProductSumProductSum\
    \ * hexKeyProduct\n        val primeKeySumProductSumProductSumProduct = primeKeySumProductSumProductSum\
    \ * primeKeyProduct\n        val hexKeySumProductSumProductSumProductSum = hexKeySumProductSumProductSumProduct\
    \ + hexKeySumProductSumProductSum\n        val primeKeySumProductSumProductSumProductSum\
    \ = primeKeySumProductSumProductSumProduct + primeKeySumProductSumProductSum\n\
    \        val hexKeySumProductSumProductSumProductSumProduct = hexKeySumProductSumProductSumProductSum\
    \ * hexKeyProduct\n        val primeKeySumProductSumProductSumProductSumProduct\
    \ = primeKeySumProductSumProductSumProductSum * primeKeyProduct\n        val hexKeySumProductSumProductSumProductSumProductSum\
    \ = hexKeySumProductSumProductSumProductSum", "        if (num.length == 0) return\
    \ 0\n        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n\
    \            if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n\
    \        return count", "        val primes = List(2, 3, 5, 7, 11, 13)\n     \
    \   val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n           \
    \ '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5' ->\
    \ 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n  \
    \          '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n       \
    \     'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n           \
    \ 'F' -> 15\n        )\n        var sum = 0\n        for (i <- 0 until num.length)\
    \ {\n            val digit = hex(num(i))\n            if (primes.contains(digit))\
    \ sum += 1\n        }\n        sum", "        val hex = \"0123456789ABCDEF\"\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToPrime = hex.zip(primes).toMap\n\
    \        num.map(x => hexToPrime(x)).filter(x => x != 0).length", "        val\
    \ hex = num.toUpperCase\n        val hexMap = Map(\n            '0' -> 0,\n  \
    \          '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n         \
    \   '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' ->\
    \ 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n \
    \           'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n     \
    \       'E' -> 14,\n            'F' -> 15\n        )\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <- 0 until hex.length)\
    \ {\n            val digit = hexMap(hex(i))\n            if (primes.contains(digit))\
    \ key += pow(16, hex.length - i - 1).toLong\n        }\n        key", "      \
    \  val hex = \"0123456789ABCDEF\"\n        val prime = Array(2, 3, 5, 7, 11, 13)\n\
    \        var key = 0L\n        for (i <- 0 until num.length) {\n            val\
    \ n = hex.indexOf(num(i))\n            if (prime.contains(n)) key += pow(16, num.length\
    \ - i - 1).toLong\n        }\n        key", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\
    \n        val hexMap = hexDigits.zipWithIndex.toMap\n        val hexPrimeMap =\
    \ hexPrimes.zipWithIndex.toMap\n        val hexKey = hex.map(x => hexMap(x)).toList\n\
    \        val hexPrimeKey = hex.map(x => hexPrimeMap(x)).toList\n        val hexKeySum\
    \ = hexKey.sum\n        val hexPrimeKeySum = hexPrimeKey.sum\n        val hexKeySumMod\
    \ = hexKeySum % hexDigits.length\n        val hexPrimeKeySumMod = hexPrimeKeySum\
    \ % hexPrimes.length\n        val hexKeySumModPow = pow(hexKeySumMod, hexKeySumMod).toLong\n\
    \        val hexPrimeKeySumModPow = pow(hexPrimeKeySumMod, hexPrimeKeySumMod).toLong\n\
    \        val hexKeySumModPowMod = hexKeySumModPow % hexDigits.length\n       \
    \ val hexPrimeKeySumModPowMod = hexPrimeKeySumModPow % hexPrimes.length\n    \
    \    val hexKeySumModPowModSum = hexKeySumModPowMod + hexPrimeKeySumModPowMod\n\
    \        val hexKeySumModPowModSumMod = hexKeySumModPowModSum % hexDigits.length\n\
    \        val hexKeySumModPowModSumModSum = hexKeySumModPowModSumMod + hexKeySumModPowModSum\n\
    \        val hexKeySumModPowModSumModSumMod = hexKeySumModPowModSumModSum % hexDigits.length\n\
    \        val hexKeySumModPowModSumModSumModSum = hexKeySumModPowModSumModSumMod\
    \ + hexKeySumModPowModSumModSum\n        val hexKeySumModPowModSumModSumModSumMod\
    \ = hexKeySumModPowModSumModSumModSum % hexDigits.length\n        val hexKeySumModPowModSumModSumModSumModSum\
    \ = hexKeySumModPowModSumModSumModSumMod + hexKeySumModPowModSumModSumModSum\n\
    \        val hexKeySum", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n\
    \        val nums = num.map(c => hexToInt(c))\n        val key = nums.foldLeft(0L)((acc,\
    \ n) => acc * 16 + n)\n        val count = primes.count(p => key % p == 0)\n \
    \       count", "        val hex = \"0123456789ABCDEF\"\n        val prime = \"\
    2357BDF\"\n        var count = 0\n        for (i <- 0 until num.length) {\n  \
    \          if (prime.contains(num(i))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key += hex.indexOf(num(i)) * pow(16, num.length\
    \ - i - 1).toLong\n        }\n        key", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexDigitsToPrimes\
    \ = hexDigits.zip(primes).toMap\n        val hexDigitsToPrimes2 = hexDigits.zipWithIndex.toMap\n\
    \        val hexDigitsToPrimes3 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes4 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes5 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes6 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes7 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes8 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes9 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes10 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes11 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes12 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes13 = hexDigits.zipWithIndex.map(x => (x._1, x._2.toLong)).toMap\n\
    \        val hexDigitsToPrimes14 = hexDigits.zipWithIndex.map(x => (x._1", " \
    \       val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        val hexToPrime = hex.zip(primes).toMap\n        num.map(x =>\
    \ hexToPrime(x)).sum", "        val hex = Map(\n            '0' -> 0,\n      \
    \      '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4'\
    \ -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n\
    \            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n      \
    \      'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n          \
    \  'E' -> 14,\n            'F' -> 15\n        )\n        var key = 0L\n      \
    \  for (i <- 0 until num.length) {\n            key = key * 16 + hex(num(i))\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        val hexPrimes = primes.map(x => hex(x))\n\
    \        num.toList.filter(x => hexPrimes.contains(x)).length", "        var key\
    \ : Long = 0\n        for (i <- 0 until num.length) {\n            key += pow(16,\
    \ i).toLong * hexValue(num(num.length - 1 - i))\n        }\n        key", "  \
    \      val hex = num.toUpperCase\n        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primeDigits = \"2357BD\"\n        var count = 0\n        for (i\
    \ <- 0 until hex.length) {\n            if (primeDigits.contains(hex(i))) count\
    \ += 1\n        }\n        count", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hex = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ hexToInt = hex.zipWithIndex.toMap\n        val intToHex = hexToInt.map(_.swap)\n\
    \        val hexToPrime = hex.zip(primes).toMap\n        val primeToHex = hexToPrime.map(_.swap)\n\
    \        val hexToPrimeKey = hex.zipWithIndex.map(x => (x._1, primeToHex(x._2))).toMap\n\
    \        val primeKeyToHex = hexToPrimeKey.map(_.swap)\n        val hexToPrimeKeyKey\
    \ = hex.zipWithIndex.map(x => (x._1, primeKeyToHex(x._2))).toMap\n        val\
    \ primeKeyKeyToHex = hexToPrimeKeyKey.map(_.swap)\n        val hexToPrimeKeyKeyKey\
    \ = hex.zipWithIndex.map(x => (x._1, primeKeyKeyToHex(x._2))).toMap\n        val\
    \ primeKeyKeyKeyToHex = hexToPrimeKeyKeyKey.map(_.swap)\n        val hexToPrimeKeyKeyKeyKey\
    \ = hex.zipWithIndex.map(x => (x._1, primeKeyKeyKeyToHex(x._2))).toMap\n     \
    \   val primeKeyKeyKeyKeyToHex = hexToPrimeKeyKeyKeyKey.map(_.swap)\n        val\
    \ hexToPrimeKeyKeyKeyKeyKey = hex.zipWithIndex.map(x => (x._1, primeKeyKeyKeyKeyToHex(x._2))).toMap\n\
    \        val primeKeyKeyKeyKeyKeyToHex = hexToPrimeKeyKeyKeyKeyKey.map(_.swap)\n\
    \        val hexToPrimeKeyKeyKeyKeyKeyKey = hex.zipWithIndex.map(x => (x._1, primeKeyKeyKeyKeyKeyToHex(x._2))).toMap\n\
    \        val primeKeyKeyKeyKeyKeyKeyTo", "        val hex = num.toUpperCase\n\
    \        val hexDigits = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\
    \n        var count = 0\n        for (i <- 0 until hex.length) {\n           \
    \ if (hexPrimes.contains(hex(i))) count += 1\n        }\n        count", "   \
    \     val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key = key * 16 + index\n        }\n        key", "        val hex\
    \ = num.toUpperCase\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        val\
    \ hexDigits = Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F')\n        val hexToDec = hexDigits.zipWithIndex.toMap\n \
    \       val decToHex = hexToDec.map(_.swap)\n        val hexToPrime = primes.zipWithIndex.toMap\n\
    \        val primeToHex = hexToPrime.map(_.swap)\n        var key = 0L\n     \
    \   for (i <- 0 until hex.length) {\n            val digit = hex(i)\n        \
    \    val dec = hexToDec(digit)\n            if (primes.contains(dec)) {\n    \
    \            val prime = hexToPrime(dec)\n                key += pow(2, prime).toLong\n\
    \            }\n        }\n        key", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToPrime = hex.zip(primes).toMap\n\
    \        num.map(c => hexToPrime(c)).filter(x => x != 0).toList.distinct.length",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n  \
    \      }\n        key", "        val hex = num.toUpperCase\n        val hexDigits\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val hexPrimes = primes.map(x => hexDigits(x))\n        hex.filter(x => hexPrimes.contains(x)).length",
  "        val hex = num.toUpperCase\n        val hexMap = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        var key = 0L\n\
    \        for (i <- 0 until hex.length) {\n            key += hexMap(hex(i)) *\
    \ pow(16, hex.length - i - 1).toLong\n        }\n        key", "        val hex\
    \ = num.toUpperCase.toCharArray.map(x => x.toString.toLong).toList\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        hex.filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        var key = 0L\n        for (i <- 0 until num.length)\
    \ {\n            key = key * 16 + hex(num(i))\n        }\n        key", "    \
    \    val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToDec = hex.zipWithIndex.toMap\n        val decToHex = hexToDec.map(_.swap)\n\
    \        val hexToPrime = primes.map(decToHex(_)).toSet\n        num.map(hexToDec(_)).count(hexToPrime.contains(_))",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n       \
    \     '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3'\
    \ -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n\
    \            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n       \
    \     'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n           \
    \ 'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n     \
    \   var count = 0\n        for (i <- 0 until num.length) {\n            if (primes.contains(hex(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val prime = List(2, 3, 5, 7, 11, 13)\n        var key = 0L\n       \
    \ for (i <- 0 until num.length) {\n            val c = num(i)\n            val\
    \ index = hex.indexOf(c)\n            if (prime.contains(index)) key += pow(16,\
    \ num.length - i - 1).toLong\n        }\n        key", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        var key = 0L\n      \
    \  for (i <- 0 until num.length) {\n            val index = hex.indexOf(num(i))\n\
    \            if (primes.contains(index)) key += pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        var\
    \ result = 0L\n        for (i <- 0 until num.length) {\n            val c = num(i)\n\
    \            val index = hex.indexOf(c)\n            result = result * 16 + index\n\
    \        }\n        result", "        val hex = num.toUpperCase.toList.map(x =>\
    \ x.toString.toLong)\n        val primes = List(2, 3, 5, 7, 11, 13)\n        hex.filter(x\
    \ => primes.contains(x)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n      \
    \      '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primes.contains(hex(num(i)))) count += 1\n        }\n   \
    \     count", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primes.contains(hex.indexOf(num(i)))) count += 1\n      \
    \  }\n        count", "        val hex = \"0123456789ABCDEF\"\n        var key\
    \ = 0L\n        for (i <- 0 until num.length) {\n            key += hex.indexOf(num(i))\
    \ * pow(16, num.length - i - 1).toLong\n        }\n        key", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n        val key\
    \ = num.map(c => hex.indexOf(c)).filter(i => prime.contains(hex(i))).length\n\
    \        return key", "        var result = 0L\n        for (i <- 0 until num.length)\
    \ {\n            val c = num(i)\n            val n = if (c >= 'A') c - 'A' + 10\
    \ else c - '0'\n            result = result * 16 + n\n        }\n        result",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = hex.zipWithIndex.toMap\n        val key = num.map(map(_)).map(BigInt(_)).sum\n\
    \        key.toString(2).zipWithIndex.filter(x => primes.contains(x._2)).map(x\
    \ => x._1).count(x => x == '1')", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex(c)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexPrimes = primes.map(x => hex(x))\n        num.toList.filter(x\
    \ => hexPrimes.contains(x)).length", "        var result = 0L\n        for (i\
    \ <- 0 until num.length) {\n            val digit = num(i)\n            val value\
    \ = digit match {\n                case '0' => 0\n                case '1' =>\
    \ 1\n                case '2' => 2\n                case '3' => 3\n          \
    \      case '4' => 4\n                case '5' => 5\n                case '6'\
    \ => 6\n                case '7' => 7\n                case '8' => 8\n       \
    \         case '9' => 9\n                case 'A' => 10\n                case\
    \ 'B' => 11\n                case 'C' => 12\n                case 'D' => 13\n\
    \                case 'E' => 14\n                case 'F' => 15\n            }\n\
    \            result = result * 16 + value\n        }\n        result", "     \
    \   val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count"]
stop_tokens:
- "\n    }\n"
