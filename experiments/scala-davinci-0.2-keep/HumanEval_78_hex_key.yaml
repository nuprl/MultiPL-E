name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should\
  \ be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"\
  ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output\
  \ should be 6.\n    // For num = \"2020\" the output should be 2.\n    def hexKey(num\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val\
    \ hexToPrime = hex.zip(primes).toMap\n        val hexToPrimeKey = hex.zip(primes.map(p\
    \ => BigInt(p).pow(2).toLong)).toMap\n        val key = num.map(c => hexToPrimeKey(c)).sum\n\
    \        key", "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n\
    \        for (i <- 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n\
    \        }\n        key", "        val hex = num.toUpperCase\n        val hexDigits\
    \ = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BD\"\n        val hexMap\
    \ = hexDigits.zipWithIndex.toMap\n        val hexPrimeMap = hexPrimes.zipWithIndex.toMap\n\
    \        val hexKey = hex.map(x => hexMap(x)).toList\n        val hexPrimeKey\
    \ = hex.map(x => hexPrimeMap.getOrElse(x, -1)).toList\n        val hexPrimeCount\
    \ = hexPrimeKey.filter(x => x != -1).length\n        hexPrimeCount", "       \
    \ val hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n        var\
    \ count = 0\n        for (i <- 0 until num.length) {\n            if (prime.contains(num(i)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        var key = 0L\n        for (i <- 0 until num.length) {\n            key\
    \ += hex.indexOf(num(i)) * pow(16, num.length - i - 1).toLong\n        }\n   \
    \     key", "        var key : Long = 0\n        for (i <- 0 until num.length)\
    \ {\n            val c = num(i)\n            val n = if (c >= 'A') c - 'A' + 10\
    \ else c - '0'\n            key = key * 16 + n\n        }\n        key", "   \
    \     val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToPrime = hex.zip(primes).toMap\n        num.map(hexToPrime(_)).sum",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            key = key * 16 + hex.indexOf(num(i))\n  \
    \      }\n        key", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i)\n            val n = hex.indexOf(c)\n\
    \            if (primes.contains(n)) key += pow(16, num.length - i - 1).toLong\n\
    \        }\n        key", "        val hex = \"0123456789ABCDEF\"\n        var\
    \ key = 0L\n        for (i <- 0 until num.length) {\n            val c = num(i)\n\
    \            val n = hex.indexOf(c)\n            key = key * 16 + n\n        }\n\
    \        key", "        val hex = \"0123456789ABCDEF\"\n        val hexMap = hex.zipWithIndex.toMap\n\
    \        val hexPrimes = Array(2, 3, 5, 7, 11, 13)\n        val hexPrimesMap =\
    \ hexPrimes.zipWithIndex.toMap\n        var key = 0L\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i)\n            val n = hexMap(c)\n \
    \           if (hexPrimesMap.contains(n)) key += pow(16, i).toLong\n        }\n\
    \        key", "        var result = 0L\n        for (i <- 0 until num.length)\
    \ {\n            val c = num(i)\n            val v = if (c >= 'A') c - 'A' + 10\
    \ else c - '0'\n            result = result * 16 + v\n        }\n        result",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = Array(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToPrime = new HashMap[Char, Int]\n        for (i <- 0 until\
    \ hex.length) {\n            if (prime.contains(i)) hexToPrime += (hex(i) -> i)\n\
    \        }\n        var count = 0\n        for (i <- 0 until num.length) {\n \
    \           if (hexToPrime.contains(num(i))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key = (key << 4) + index\n        }\n        key", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val hexPrimes = primes.map(x => hex(x))\n        num.count(x => hexPrimes.contains(x))",
  "        val hex = \"0123456789ABCDEF\"\n        var key = 0L\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            val index = hex.indexOf(c)\n\
    \            key = key * 16 + index\n        }\n        key", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n            '0' -> 0,\n\
    \            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n       \
    \     '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7'\
    \ -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n\
    \            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n    \
    \        'E' -> 14,\n            'F' -> 15\n        )\n        val digits = num.map(hex(_)).toList\n\
    \        val key = digits.foldLeft(0L)((a, b) => a * 16 + b)\n        primes.count(p\
    \ => key % p == 0)", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n      \
    \      '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primes.contains(hex(num(i)))) count += 1\n        }\n   \
    \     count", "        val hex = \"0123456789ABCDEF\"\n        val prime = \"\
    2357BDF\"\n        var count = 0\n        for (i <- 0 until num.length) {\n  \
    \          if (prime.contains(num(i))) count += 1\n        }\n        count"]
stop_tokens:
- "\n    }\n"
