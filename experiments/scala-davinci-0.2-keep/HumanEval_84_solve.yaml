name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // For N = 1000, the sum of digits will be 1 the output should\
  \ be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be\
  \ \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be\
  \ \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
  \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        var result = 0\n        var n = N\n        while (n > 0) {\n\
    \            result += n % 2\n            n /= 2\n        }\n        result.toString",
  "        var sum = 0\n        var n = N\n        while (n > 0) {\n            sum\
    \ += (n % 2).toInt\n            n /= 2\n        }\n        return sum.toString",
  "        var sum = 0\n        var binary = N.toBinaryString\n        for (i <- 0\
    \ until binary.length) {\n            sum += binary(i).asDigit\n        }\n  \
    \      return sum.toString", "        var result = 0\n        var n = N\n    \
    \    while (n > 0) {\n            result += n % 2\n            n /= 2\n      \
    \  }\n        result.toString", "        var result = \"\"\n        var n = N\n\
    \        while (n > 0) {\n            result = (n % 2).toString + result\n   \
    \         n /= 2\n        }\n        result", "        var sum = 0\n        var\
    \ binary = \"\"\n        var n = N\n        while (n > 0) {\n            sum +=\
    \ n % 2\n            binary = (n % 2).toString + binary\n            n /= 2\n\
    \        }\n        return sum.toString", "        var result = 0\n        var\
    \ n = N\n        while (n > 0) {\n            result += n % 2\n            n /=\
    \ 2\n        }\n        result.toString", "        var result = 0\n        var\
    \ n = N\n        while (n > 0) {\n            result += n % 2\n            n /=\
    \ 2\n        }\n        result.toString", "        var sum = 0\n        var binary\
    \ = N.toBinaryString\n        for (i <- 0 until binary.length) {\n           \
    \ sum += binary(i).asDigit\n        }\n        return sum.toString", "       \
    \ var sum = 0\n        var binary = N.toBinaryString\n        for (i <- 0 until\
    \ binary.length) {\n            sum += binary(i).asDigit\n        }\n        sum.toString",
  "        var result = \"\"\n        var n = N\n        while (n > 0) {\n       \
    \     result = (n % 2).toString + result\n            n /= 2\n        }\n    \
    \    result", "        var sum = 0\n        var binary = \"\"\n        var n =\
    \ N\n        while (n > 0) {\n            var remainder = n % 2\n            sum\
    \ += remainder\n            binary = remainder.toString + binary\n           \
    \ n = n / 2\n        }\n        sum.toString", "        var sum = 0\n        var\
    \ binary = N.toBinaryString\n        for (i <- 0 until binary.length) {\n    \
    \        sum += binary(i).asDigit\n        }\n        sum.toString", "       \
    \ var sum = 0\n        var n = N\n        while (n > 0) {\n            sum +=\
    \ (n % 2).toInt\n            n /= 2\n        }\n        sum.toString", "     \
    \   var result = 0\n        var n = N\n        while (n > 0) {\n            result\
    \ += n % 2\n            n /= 2\n        }\n        result.toString", "       \
    \ var result = 0\n        var n = N\n        while (n > 0) {\n            result\
    \ += n % 2\n            n /= 2\n        }\n        result.toString", "       \
    \ var sum = 0\n        var binary = N.toBinaryString\n        for (i <- 0 until\
    \ binary.length) {\n            sum += binary(i).asDigit\n        }\n        sum.toString",
  "        var sum = 0\n        var binary = \"\"\n        var temp = N\n        while\
    \ (temp > 0) {\n            sum += temp % 2\n            binary = (temp % 2).toString\
    \ + binary\n            temp /= 2\n        }\n        return sum.toString", " \
    \       var result = \"\"\n        var n = N\n        while (n > 0) {\n      \
    \      result = (n % 2).toString + result\n            n /= 2\n        }\n   \
    \     result", "        var sum = 0\n        var binary = N.toBinaryString\n \
    \       for (i <- 0 until binary.length) {\n            sum += binary(i).asDigit\n\
    \        }\n        sum.toString"]
stop_tokens:
- "\n    }\n"
