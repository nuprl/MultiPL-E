name: HumanEval_55_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>>\
  \ fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    def fib(n : Long) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
  \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
  \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
completions: ["        if (n == 1) return 1\n        if (n == 2) return 1\n      \
    \  var a = 1L\n        var b = 1L\n        for (i <- 3 to n) {\n            val\
    \ c = a + b\n            a = b\n            b = c\n        }\n        return b",
  "        if (n == 1) 1\n        else if (n == 2) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n == 1) 1\n        else if (n == 2) 1\n        else fib(n\
    \ - 1) + fib(n - 2)", "        if (n == 1) 1\n        else if (n == 2) 1\n   \
    \     else fib(n - 1) + fib(n - 2)", "        var a = 0L\n        var b = 1L\n\
    \        for (i <- 0 until n) {\n            val c = a + b\n            a = b\n\
    \            b = c\n        }\n        a", "        if (n == 1) 1\n        else\
    \ if (n == 2) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n == 1) return\
    \ 1\n        if (n == 2) return 1\n        var a = 1L\n        var b = 1L\n  \
    \      for (i <- 3 to n) {\n            val c = a + b\n            a = b\n   \
    \         b = c\n        }\n        return b", "        if (n == 1) 1\n      \
    \  else if (n == 2) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n ==\
    \ 1) 1\n        else if (n == 2) 1\n        else fib(n - 1) + fib(n - 2)", " \
    \       if (n == 1) 1\n        else if (n == 2) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n == 1) 1\n        else if (n == 2) 1\n        else fib(n\
    \ - 1) + fib(n - 2)", "        if (n == 1) return 1\n        if (n == 2) return\
    \ 1\n        var a = 1L\n        var b = 1L\n        for (i <- 3 to n) {\n   \
    \         val c = a + b\n            a = b\n            b = c\n        }\n   \
    \     return b", "        if (n == 1) 1\n        else if (n == 2) 1\n        else\
    \ fib(n - 1) + fib(n - 2)", "        if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fib(n - 1) + fib(n - 2)", "        var a = 0L\n        var b = 1L\n\
    \        for (i <- 1L to n) {\n            val c = a + b\n            a = b\n\
    \            b = c\n        }\n        a", "        if (n <= 2) 1\n        else\
    \ fib(n - 1) + fib(n - 2)", "        if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fib(n - 1) + fib(n - 2)", "        if (n == 1) 1\n        else if\
    \ (n == 2) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n == 1) return\
    \ 1\n        if (n == 2) return 1\n        var a = 1L\n        var b = 1L\n  \
    \      for (i <- 3 to n) {\n            val c = a + b\n            a = b\n   \
    \         b = c\n        }\n        return b", "        if (n == 1) return 1\n\
    \        if (n == 2) return 1\n        var a = 1L\n        var b = 1L\n      \
    \  for (i <- 3 to n) {\n            val c = a + b\n            a = b\n       \
    \     b = c\n        }\n        return b"]
stop_tokens:
- "\n    }\n"
