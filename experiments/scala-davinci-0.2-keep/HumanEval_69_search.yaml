name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1]) == 2\n    // search([1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5, 4, 4, 4]) == -1\n    def search(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        val freq = lst.groupBy(identity).mapValues(_.size)\n      \
    \  val max = freq.keys.max\n        if (freq(max) >= max) max else -1", "    \
    \    val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val map = new HashMap[Long, Long]\n        for (e <- lst) {\n         \
    \   if (map.contains(e)) map(e) += 1\n            else map(e) = 1\n        }\n\
    \        var result = -1L\n        for (e <- lst) {\n            if (map(e) >=\
    \ e && e > result) result = e\n        }\n        result", "        val map =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1 else map(i) = 1\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        for (i <- sorted) {\n            if (i._1 <= i._2) return i._1\n    \
    \    }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val maxFreq = freq.values.max\n        val maxFreqKeys = freq.filter(x\
    \ => x._2 == maxFreq).keys\n        val maxFreqKey = maxFreqKeys.max\n       \
    \ if (maxFreq >= maxFreqKey) maxFreqKey else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val maxFreq = freq.values.max\n        val maxFreqKeys = freq.filter(_._2\
    \ == maxFreq).keys\n        if (maxFreqKeys.exists(freq(_) >= _)) maxFreqKeys.max\
    \ else -1", "        val freq = new HashMap[Long, Long]\n        for (x <- lst)\
    \ {\n            if (freq.contains(x)) freq(x) += 1\n            else freq(x)\
    \ = 1\n        }\n        for (x <- lst) {\n            if (freq(x) >= x) return\
    \ x\n        }\n        return -1", "        val map = new HashMap[Long, Long]\n\
    \        for (x <- lst) {\n            if (map.contains(x)) map(x) += 1\n    \
    \        else map(x) = 1\n        }\n        var max = -1L\n        for (x <-\
    \ map.keys) {\n            if (x <= map(x) && x > max) max = x\n        }\n  \
    \      max", "        val map = new HashMap[Long, Long]\n        for (i <- lst)\
    \ {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n\
    \        }\n        var max = -1L\n        for (i <- map.keys) {\n           \
    \ if (i <= map(i) && i > max) max = i\n        }\n        max", "        val m\
    \ = lst.groupBy(x => x).mapValues(_.size)\n        val max = m.keys.max\n    \
    \    val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "       \
    \ val map = new HashMap[Long, Long]\n        for (i <- lst) {\n            if\
    \ (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n    \
    \    var max = -1L\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val max = m.keys.max\n        for (i <- max\
    \ to 1 by -1) {\n            if (m.contains(i) && m(i) >= i) return i\n      \
    \  }\n        return -1", "        val map = HashMap[Long, Long]()\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1L\n        for (i <- map.keys) {\n\
    \            if (i <= map(i) && i > max) max = i\n        }\n        max", " \
    \       val map = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1L\n        for (i <- lst) {\n            if (i > 0 && map(i)\
    \ >= i && i > max) max = i\n        }\n        max", "        val freq = new HashMap[Long,\
    \ Long]()\n        for (i <- lst) {\n            if (freq.contains(i)) freq(i)\
    \ += 1\n            else freq(i) = 1\n        }\n        var max = -1L\n     \
    \   for (i <- freq.keys) {\n            if (freq(i) >= i && i > max) max = i\n\
    \        }\n        max", "        val map = new HashMap[Long, Long]\n       \
    \ for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n           \
    \ else map(i) = 1\n        }\n        var max = -1L\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        var map = Map[Long, Long]()\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        return max", "        val freq = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1 else\
    \ freq(i) = 1\n        }\n        var max = -1L\n        for (i <- freq.keys)\
    \ {\n            if (i <= freq(i) && i > max) max = i\n        }\n        max",
  "        val freq = new HashMap[Long, Long]\n        for (x <- lst) {\n        \
    \    if (freq.contains(x)) freq(x) += 1\n            else freq(x) = 1\n      \
    \  }\n        var max = -1L\n        for (x <- freq.keys) {\n            if (x\
    \ <= freq(x) && x > max) max = x\n        }\n        max", "        val map =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- lst) {\n            if (i <= map(i) && i > max) max = i\n \
    \       }\n        max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val max = keys.max\n        for (i <- 0 until keys.size) {\n        \
    \    if (keys(i) >= values(i)) return keys(i)\n        }\n        return -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val counts = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = counts.keys.max\n        if (counts(max) >= max) max else -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= max._1) max._1 else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val k = m.keys.toList.sorted.reverse\n\
    \        for (i <- k) {\n            if (i <= m(i)) return i\n        }\n    \
    \    return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        for (i <- max to 1 by -1) {\n      \
    \      if (freq.contains(i) && freq(i) >= i) return i\n        }\n        return\
    \ -1", "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n\
    \            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n\
    \        }\n        var max = -1L\n        for (i <- freq.keys) {\n          \
    \  if (i <= freq(i) && i > max) max = i\n        }\n        max", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.keys.toList.sorted\n\
    \        for (i <- l) {\n            if (m(i) >= i) return i\n        }\n    \
    \    return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n  \
    \      val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0 by\
    \ -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val freq = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq(i) = 1\n        }\n        var max = -1L\n        for (i\
    \ <- freq.keys) {\n            if (i <= freq(i) && i > max) max = i\n        }\n\
    \        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n    \
    \    val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map += (i -> 1)\n        }\n        var max = -1\n     \
    \   for (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i.toInt\n\
    \        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        val maxFreq = freq(max)\n        if\
    \ (maxFreq < max) -1 else max", "        val freq = new HashMap[Long, Long]\n\
    \        for (x <- lst) {\n            if (freq.contains(x)) freq(x) += 1\n  \
    \          else freq(x) = 1\n        }\n        var max = -1L\n        for (x\
    \ <- freq.keys) {\n            if (x <= freq(x) && x > max) max = x\n        }\n\
    \        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n \
    \       val max = freq.keys.max\n        if (freq(max) >= max) max else -1", " \
    \       val map = lst.groupBy(x => x).mapValues(_.size)\n        val max = map.keys.max\n\
    \        for (i <- max to 1 by -1) {\n            if (map.contains(i) && map(i)\
    \ >= i) return i\n        }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        for (i <- max to 1 by -1) {\n      \
    \      if (freq.contains(i) && freq(i) >= i) return i\n        }\n        return\
    \ -1", "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n\
    \            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n\
    \        }\n        val keys = freq.keys.toList.sorted\n        for (i <- keys.reverse)\
    \ {\n            if (freq(i) >= i) return i\n        }\n        return -1", " \
    \       val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n       \
    \     if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n     \
    \   }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val freq =\
    \ new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (freq.contains(i))\
    \ freq(i) += 1\n            else freq(i) = 1\n        }\n        var max = -1\n\
    \        for (i <- freq.keys) {\n            if (freq(i) >= i && i > max) max\
    \ = i.toInt\n        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val keys =\
    \ freq.keys.toList.sorted\n        for (i <- keys.length - 1 to 0 by -1) {\n \
    \           if (freq(keys(i)) >= keys(i)) return keys(i)\n        }\n        return\
    \ -1", "        if (lst.isEmpty) return -1\n        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val freq = new HashMap[Long, Long]\n        for (i\
    \ <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n            else\
    \ freq(i) = 1\n        }\n        val keys = freq.keys.toList.sorted\n       \
    \ for (i <- keys.reverse) {\n            if (freq(i) >= i) return i\n        }\n\
    \        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).maxBy(_._1)\n        if (v._1 ==\
    \ v._2) v._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val max = keys.zip(values).filter(x => x._1 <= x._2).maxBy(_._1)\n  \
    \      if (max._1 == max._2) max._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val k = m.keys.toList.sorted\n        for (i <- k.size - 1 to 0 by -1)\
    \ {\n            if (m(k(i)) >= k(i)) return k(i)\n        }\n        return -1",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val freq =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val maxFreq = freq.values.max\n\
    \        val maxFreqKeys = freq.filter(_._2 == maxFreq).keys\n        if (maxFreqKeys.exists(freq(_)\
    \ >= _)) maxFreqKeys.max else -1", "        val map = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i.toInt\n        }\n      \
    \  max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n       \
    \ val max = freq.keys.max\n        if (freq(max) < max) -1 else max", "      \
    \  val m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.max\n   \
    \     for (i <- 1 to max.toInt) {\n            if (keys.contains(i) && values(keys.indexOf(i))\
    \ >= i) return i\n        }\n        -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- map.keys) {\n            if (i > 0 && map(i) >= i && i > max) max = i\n\
    \        }\n        max", "        val map = new HashMap[Long, Long]()\n     \
    \   for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n         \
    \   else map(i) = 1\n        }\n        var max = -1L\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i.toInt\n        }\n        max", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.keys.toList.sorted\n\
    \        for (i <- l.size - 1 to 0 by -1) {\n            if (m(l(i)) >= l(i))\
    \ return l(i)\n        }\n        return -1", "        val freq = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (freq.contains(i)) freq(i) +=\
    \ 1\n            else freq(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- freq.keys) {\n            if (i <= freq(i) && i > max) max = i\n     \
    \   }\n        max", "        val freq = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1", "   \
    \     val freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n       \
    \     if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n     \
    \   }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (freq(i)\
    \ >= i && i > max) max = i\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- lst) {\n            if (i > max && map(i) >= i) max = i\n        }\n \
    \       max", "        val map = new HashMap[Long, Long]()\n        for (i <-\
    \ lst) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        var max = -1L\n        for (i <- map.keys) {\n     \
    \       if (i <= map(i) && i > max) max = i\n        }\n        max", "      \
    \  val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "   \
    \     val map = new HashMap[Long, Long]\n        for (i <- lst) {\n          \
    \  if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        val max = map.maxBy(_._2)\n        if (max._1 <= max._2) max._1 else\
    \ -1", "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n\
    \            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n\
    \        }\n        var max = -1\n        for (i <- freq.keys) {\n           \
    \ if (i <= freq(i) && i > max) max = i.toInt\n        }\n        max", "     \
    \   val map = new HashMap[Long, Long]()\n        for (i <- lst) {\n          \
    \  if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n      \
    \  }\n        var result = -1L\n        for (i <- lst) {\n            if (map(i)\
    \ >= i && i > result) result = i\n        }\n        result", "        val freq\
    \ = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to\
    \ 0 by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val map = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map += (i -> 1)\n        }\n        var max = -1\n        for (i\
    \ <- lst) {\n            if (map(i) >= i && i > max) max = i.toInt\n        }\n\
    \        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n    \
    \    val m2 = m.filter(x => x._1 <= x._2)\n        if (m2.isEmpty) -1 else m2.keys.max",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val n = keys.size\n        for (i <- 0 until n) {\n            if (keys(i)\
    \ <= values(i)) return keys(i)\n        }\n        return -1", "        val freq\
    \ = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val map = new HashMap[Long,\
    \ Long]()\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ max = freq.keys.max\n        if (freq(max) >= max) max else -1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        for (i <- max to 1 by -1) {\n            if (m.contains(i) && m(i) >=\
    \ i) return i\n        }\n        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val counts = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = counts.keys.max\n        for (i <- max to 1 by -1) {\n    \
    \        if (counts.contains(i) && counts(i) >= i) return i\n        }\n     \
    \   return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val map =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val maxFreq = freq.values.max\n        val maxFreqInt = freq.filter(_._2\
    \ == maxFreq).keys.max\n        if (maxFreqInt > maxFreq) -1 else maxFreqInt",
  "        val freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n      \
    \      if (freq.contains(i)) {\n                freq(i) += 1\n            } else\
    \ {\n                freq(i) = 1\n            }\n        }\n        var max =\
    \ -1\n        for (i <- freq.keys) {\n            if (i <= freq(i) && i > max)\
    \ {\n                max = i.toInt\n            }\n        }\n        return max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        for (i <- sorted.length\
    \ - 1 to 0 by -1) {\n            if (sorted(i)._1 <= sorted(i)._2) return sorted(i)._1\n\
    \        }\n        return -1", "        val map = new HashMap[Long, Long]\n \
    \       for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n     \
    \       else map(i) = 1\n        }\n        var max = -1L\n        for (i <- lst)\
    \ {\n            if (i > max && map(i) >= i) max = i\n        }\n        max",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= max._1) max._1 else -1", "        val map = new HashMap[Long,\
    \ Long]()\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        if (m(max) >= max) max else -1", "    \
    \    val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to\
    \ 0 by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val freq = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq(i) = 1\n        }\n        var max = -1L\n        for (i\
    \ <- freq.keys) {\n            if (freq(i) >= i && i > max) max = i\n        }\n\
    \        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n    \
    \    val r = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n  \
    \      if (r.isEmpty) -1 else r.head._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val r = m.filter(x => x._1 <= x._2).toList.sortBy(_._1).reverse\n   \
    \     if (r.isEmpty) -1 else r.head._1", "        val freq = new HashMap[Long,\
    \ Long]\n        for (x <- lst) {\n            if (freq.contains(x)) freq(x) +=\
    \ 1\n            else freq(x) = 1\n        }\n        val keys = freq.keys.toList.sorted\n\
    \        for (x <- keys) {\n            if (freq(x) >= x) return x\n        }\n\
    \        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to\
    \ 0 by -1) {\n            val k = keys(i)\n            if (k <= m(k)) return k\n\
    \        }\n        -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val freq =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n \
    \       val maxFreq = freq(max)\n        if (maxFreq >= max) max else -1", " \
    \       val freq = new HashMap[Long, Long]()\n        for (x <- lst) {\n     \
    \       if (freq.contains(x)) freq(x) += 1\n            else freq(x) = 1\n   \
    \     }\n        var max = -1\n        for (x <- freq.keys) {\n            if\
    \ (freq(x) >= x && x > max) max = x.toInt\n        }\n        return max", " \
    \       val counts = lst.groupBy(identity).mapValues(_.size)\n        val max\
    \ = counts.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1", "     \
    \   val m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).keys.toList.sorted\n        if (v.isEmpty) -1 else v.last",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val map =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val freq = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq(i) = 1\n        }\n        var max = -1L\n        for (i\
    \ <- freq.keys) {\n            if (freq(i) >= i && i > max) max = i\n        }\n\
    \        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n    \
    \    val k = m.keys.toList.sorted\n        for (i <- k.size - 1 to 0 by -1) {\n\
    \            if (m(k(i)) >= k(i)) return k(i)\n        }\n        return -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val k = m.keys.toList.sorted\n\
    \        for (i <- k.length - 1 to 0 by -1) {\n            if (m(k(i)) >= k(i))\
    \ return k(i)\n        }\n        return -1", "        val freq = new HashMap[Long,\
    \ Long]\n        for (x <- lst) {\n            if (freq.contains(x)) freq(x) +=\
    \ 1 else freq(x) = 1\n        }\n        val result = freq.filter(x => x._1 <=\
    \ x._2).maxBy(_._1)\n        if (result._1 == 0) -1 else result._1", "       \
    \ val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n            if\
    \ (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n \
    \       var max = -1L\n        for (i <- freq.keys) {\n            if (i <= freq(i)\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (k <- keys) {\n        \
    \    if (m(k) >= k) return k\n        }\n        return -1", "        val m =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x => x._1\
    \ <= x._2).keys.toList.sorted\n        if (v.isEmpty) -1 else v.last", "     \
    \   val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0\
    \ by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val m = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (m.contains(i)) m(i) += 1\n        \
    \    else m(i) = 1\n        }\n        var max = -1L\n        for (i <- lst) {\n\
    \            if (i > max && m(i) >= i) max = i\n        }\n        max", "   \
    \     val map = new HashMap[Long, Long]\n        for (x <- lst) {\n          \
    \  if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n\
    \        var max = -1L\n        for (x <- map.keys) {\n            if (x <= map(x)\
    \ && x > max) max = x\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- lst) {\n            if (i >= map(i) && i > max) max = i\n        }\n \
    \       max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n  \
    \      val max = freq.keys.max\n        if (freq(max) >= max) max else -1", " \
    \       val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        val maxFreq = freq(max)\n        if\
    \ (maxFreq >= max) max else -1", "        val map = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var result = -1L\n        for (i\
    \ <- map.keys) {\n            if (i <= map(i) && i > result) result = i\n    \
    \    }\n        result", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val k = m.keys.toList.sorted\n        for (i <- k.size - 1 to 0 by -1)\
    \ {\n            if (m(k(i)) >= k(i)) return k(i)\n        }\n        return -1",
  "        val map = new HashMap[Long, Long]()\n        for (i <- lst) {\n       \
    \     if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        var\
    \ max = -1L\n        for (i <- map.keys) {\n            if (i <= map(i) && i >\
    \ max) max = i\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]()\n        lst.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n   \
    \     val keys = map.keys.toList.sorted\n        val max = keys.last\n       \
    \ for (i <- max to 1 by -1) {\n            if (map.getOrElse(i, 0) >= i) return\
    \ i\n        }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val maxFreq = freq.values.max\n        val maxFreqKeys = freq.filter(_._2\
    \ == maxFreq).keys\n        val maxFreqKey = maxFreqKeys.max\n        if (maxFreqKey\
    \ <= maxFreq) maxFreqKey else -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0\
    \ by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val map = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1L\n        for (i <-\
    \ lst) {\n            if (i > max && map(i) >= i) max = i\n        }\n       \
    \ max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ max = freq.keys.max\n        if (freq(max) >= max) max else -1", "        val\
    \ m = lst.groupBy(x => x).mapValues(_.size)\n        val max = m.keys.max\n  \
    \      for (i <- max to 1 by -1) {\n            if (m.contains(i) && m(i) >= i)\
    \ return i\n        }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        var max = -1\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i.toInt\n        }\n        max", "        val\
    \ freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (freq.contains(i))\
    \ freq(i) += 1\n            else freq(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- freq.keys) {\n            if (freq(i) >= i && i > max) max\
    \ = i\n        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqInts = freq.filter(_._2\
    \ == maxFreq).keys.toList.sorted\n        if (maxFreqInts.head > maxFreq) -1 else\
    \ maxFreqInts.head", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0\
    \ by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1", "        val freq = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq(i) = 1\n        }\n        var max = -1L\n        for (i\
    \ <- freq.keys) {\n            if (i <= freq(i) && i > max) max = i\n        }\n\
    \        max", "        val map = new HashMap[Long, Long]\n        for (i <- lst)\
    \ {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n\
    \        }\n        var max = -1L\n        for (i <- map.keys) {\n           \
    \ if (i <= map(i) && i > max) max = i\n        }\n        max", "        val freq\
    \ = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (freq.contains(i))\
    \ freq(i) += 1\n            else freq(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- lst) {\n            if (freq(i) >= i && i > max) max = i\n\
    \        }\n        max", "        val freq = new HashMap[Long, Long]()\n    \
    \    for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n      \
    \      else freq(i) = 1\n        }\n        var max = -1L\n        for (i <- freq.keys)\
    \ {\n            if (freq(i) >= i && i > max) max = i\n        }\n        max",
  "        val freq = new HashMap[Long, Long]\n        for (x <- lst) {\n        \
    \    if (freq.contains(x)) freq(x) += 1\n            else freq(x) = 1\n      \
    \  }\n        var max = -1L\n        for (x <- freq.keys) {\n            if (x\
    \ <= freq(x) && x > max) max = x\n        }\n        max", "        val map =\
    \ new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        val maxFreq = freq(max)\n        if\
    \ (maxFreq >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        val maxFreq = freq(max)\n        if\
    \ (maxFreq >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        for (i <- max to 1 by -1) {\n      \
    \      if (freq.contains(i) && freq(i) >= i) return i\n        }\n        return\
    \ -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1", "   \
    \     val m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).toList.sortBy(_._1).reverse\n        if (v.isEmpty) -1 else\
    \ v.head._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n     \
    \   val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0 by -1)\
    \ {\n            val key = keys(i)\n            if (key <= m(key)) return key\n\
    \        }\n        return -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = m.keys.max\n        if (m(max) >= max) max else -1", "    \
    \    val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "   \
    \     val map = lst.groupBy(x => x).mapValues(_.size)\n        val keys = map.keys.toList.sorted\n\
    \        for (i <- keys.length - 1 to 0 by -1) {\n            val key = keys(i)\n\
    \            if (key <= map(key)) return key\n        }\n        return -1", " \
    \       val map = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1L\n        for (i <- lst) {\n            if (i > max && map(i)\
    \ >= i) max = i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val k = m.keys.toList.sorted\n        val v = m.values.toList.sorted\n\
    \        val n = k.size\n        for (i <- 0 until n) {\n            if (k(i)\
    \ <= v(i)) return k(i)\n        }\n        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.keys.toList.sorted\n        val r = l.filter(x => m(x) >= x)\n\
    \        if (r.isEmpty) -1 else r.last", "        val freq = new HashMap[Long,\
    \ Long]()\n        for (x <- lst) {\n            if (freq.contains(x)) freq(x)\
    \ += 1\n            else freq(x) = 1\n        }\n        var max = -1\n      \
    \  for (x <- freq.keys) {\n            if (freq(x) >= x && x > max) max = x.toInt\n\
    \        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        if (m(max) >= max) max else -1", "    \
    \    val freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n        \
    \    if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n      \
    \  }\n        val sorted = freq.toList.sortBy(_._1)\n        var max = -1L\n \
    \       for (i <- sorted) {\n            if (i._1 <= i._2) max = max max i._1\n\
    \        }\n        max", "        val freq = new HashMap[Long, Long]\n      \
    \  for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n        \
    \    else freq(i) = 1\n        }\n        var max = -1L\n        for (i <- freq.keys)\
    \ {\n            if (i <= freq(i) && i > max) max = i\n        }\n        max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1L\n        for (i <- lst) {\n            if (i > max && map(i)\
    \ >= i) max = i\n        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val maxFreq\
    \ = freq.values.max\n        val maxFreqKeys = freq.filter(_._2 == maxFreq).keys\n\
    \        if (maxFreqKeys.max >= maxFreq) maxFreqKeys.max else -1", "        val\
    \ freq = new HashMap[Long, Long]\n        for (i <- lst) {\n            if (freq.contains(i))\
    \ freq(i) += 1\n            else freq(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- freq.keys) {\n            if (i > 0 && freq(i) >= i && i >\
    \ max) max = i\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1L\n        for\
    \ (i <- lst) {\n            if (i > 0 && map(i) >= i && i > max) max = i\n   \
    \     }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max\
    \ = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq >= max) max\
    \ else -1", "        val map = new HashMap[Long, Long]\n        for (x <- lst)\
    \ {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n\
    \        }\n        var max = -1L\n        for (x <- map.keys) {\n           \
    \ if (x <= map(x) && x > max) max = x\n        }\n        max", "        val m\
    \ = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n  \
    \      if (m(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val map = new HashMap[Long, Long]()\n       \
    \ for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n           \
    \ else map(i) = 1\n        }\n        var max = -1L\n        for (i <- lst) {\n\
    \            if (i > max && map(i) >= i) max = i\n        }\n        max", " \
    \       val freq = lst.groupBy(identity).mapValues(_.size)\n        val maxFreq\
    \ = freq.maxBy(_._2)._2\n        val maxFreqInts = freq.filter(_._2 == maxFreq).keys.toList.sorted\n\
    \        val maxFreqInt = maxFreqInts.last\n        if (maxFreqInt > maxFreq)\
    \ -1 else maxFreqInt", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map += (i -> 1)\n        }\n        var max = -1L\n        for (i <- lst) {\n\
    \            if (i <= map(i) && i > max) max = i\n        }\n        max", " \
    \       val freq = lst.groupBy(identity).mapValues(_.size)\n        val max =\
    \ freq.keys.max\n        if (freq(max) >= max) max else -1", "        val m =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n    \
    \    if (m(max) >= max) max else -1", "        val counts = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = counts.keys.max\n        if (counts(max) >= max) max else -1",
  "        val freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n      \
    \      if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n    \
    \    }\n        var max = -1\n        for (i <- freq.keys) {\n            if (freq(i)\
    \ >= i && i > max) max = i.toInt\n        }\n        max", "        val freq =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val maxFreq = freq.values.max\n\
    \        val maxFreqKeys = freq.filter(_._2 == maxFreq).keys\n        val maxFreqKey\
    \ = maxFreqKeys.max\n        if (maxFreq >= maxFreqKey) maxFreqKey else -1", " \
    \       val freq = lst.groupBy(identity).mapValues(_.size)\n        val max =\
    \ freq.keys.max\n        if (freq(max) >= max) max else -1", "        val counts\
    \ = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (counts.contains(i))\
    \ counts(i) += 1\n            else counts(i) = 1\n        }\n        var max =\
    \ -1L\n        for (i <- lst) {\n            if (counts(i) >= i && i > max) max\
    \ = i\n        }\n        max", "        val freq = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq += (i -> 1)\n        }\n        var max = -1\n        for\
    \ (i <- freq.keys) {\n            if (i <= freq(i) && i > max) max = i.toInt\n\
    \        }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        val maxFreq = freq(max)\n        if\
    \ (maxFreq >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size).toList.sortBy(_._1)\n\
    \        val r = m.filter(x => x._1 <= x._2).lastOption\n        if (r == None)\
    \ -1 else r.get._1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ maxFreq = freq.maxBy(_._2)._2\n        val maxFreqKeys = freq.filter(_._2 ==\
    \ maxFreq).keys.toList.sorted\n        if (maxFreqKeys.head > maxFreq) -1 else\
    \ maxFreqKeys.head", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1L\n        for (i <- map.keys) {\n\
    \            if (i <= map(i) && i > max) max = i\n        }\n        max", " \
    \       val freq = new HashMap[Long, Long]\n        for (i <- lst) {\n       \
    \     if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n     \
    \   }\n        var max = -1L\n        for (i <- freq.keys) {\n            if (i\
    \ <= freq(i) && i > max) max = i\n        }\n        max", "        val map =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1L\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val freq = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (freq.contains(i)) freq(i) += 1\n  \
    \          else freq += (i -> 1)\n        }\n        var max = -1\n        for\
    \ (i <- freq.keys) {\n            if (freq(i) >= i && i > max) max = i.toInt\n\
    \        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to\
    \ 0 by -1) {\n            val key = keys(i)\n            if (key <= m(key)) return\
    \ key\n        }\n        return -1"]
stop_tokens:
- "\n    }\n"
