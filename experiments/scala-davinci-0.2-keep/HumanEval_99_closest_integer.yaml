name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"\
  10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n\
  \    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) == abs(number\
    \ - ceil)) {\n            if (number >= 0) ceil else floor\n        } else if\
    \ (abs(number - floor) < abs(number - ceil)) floor else ceil", "        val n\
    \ = value.toDouble\n        if (n < 0) -closestInteger(-n)\n        else {\n \
    \           val i = n.toLong\n            if (n - i < 0.5) i\n            else\
    \ i + 1\n        }", "        val v = value.toDouble\n        val c = round(v)\n\
    \        if (c - v == 0.5) {\n            if (c > 0) c + 1 else c - 1\n      \
    \  } else c.toLong", "        val d = value.toDouble\n        val floor = floor(d)\n\
    \        val ceil = ceil(d)\n        if (abs(d - floor) < abs(d - ceil)) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        if (d > 0) {\n \
    \           val x = round(d)\n            if (x - d == 0.5) x + 1 else x\n   \
    \     } else {\n            val x = round(d)\n            if (x - d == -0.5) x\
    \ - 1 else x\n        }", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ == abs(number - ceil)) {\n            if (number > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(number - floor) < abs(number - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val v = value.toDouble\n\
    \        val v1 = floor(v)\n        val v2 = ceil(v)\n        if (abs(v - v1)\
    \ == abs(v - v2)) {\n            if (v1 < 0) v2 else v1\n        } else if (abs(v\
    \ - v1) < abs(v - v2)) v1 else v2", "        val d = value.toDouble\n        val\
    \ l = d.toLong\n        if (d - l < 0.5) l else l + 1", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if ((number - floor) < (ceil - number)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) {\n                ceil.toLong\n            } else {\n     \
    \           floor.toLong\n            }\n        } else if (abs(floor - num) <\
    \ abs(ceil - num)) {\n            floor.toLong\n        } else {\n           \
    \ ceil.toLong\n        }", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val n = value.toDouble\n        val\
    \ floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(floor - n) < abs(ceil\
    \ - n)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n    \
    \    val floor = d.floor\n        val ceil = d.ceil\n        if (abs(floor - d)\
    \ == abs(ceil - d)) {\n            if (floor < 0) ceil else floor\n        } else\
    \ if (abs(floor - d) < abs(ceil - d)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) {\n               \
    \ ceil.toLong\n            } else {\n                floor.toLong\n          \
    \  }\n        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (floor\
    \ == ceil) floor.toLong\n        else if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong\n        else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong else\
    \ ceil.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num >= 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val n = value.toDouble\n        val floor = math.floor(n)\n        val ceil\
    \ = math.ceil(n)\n        if (abs(n - floor) == abs(n - ceil)) {\n           \
    \ if (n >= 0) ceil.toLong else floor.toLong\n        } else if (abs(n - floor)\
    \ < abs(n - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor > 0) floor else ceil\n \
    \       } else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (num - floor > ceil - num) ceil.toLong else floor.toLong",
  "        val num = value.toDouble\n        val floor = math.floor(num)\n       \
    \ val ceil = math.ceil(num)\n        if (num - floor >= ceil - num) ceil.toLong\
    \ else floor.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(floor - num) == abs(ceil - num))\
    \ {\n            if (floor < 0) floor.toLong else ceil.toLong\n        } else\
    \ if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n      \
    \  } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val num = value.toDouble\n        if (num > 0) {\n            if (num - num.toLong\
    \ < 0.5) num.toLong else num.toLong + 1\n        } else {\n            if (num\
    \ - num.toLong > -0.5) num.toLong else num.toLong - 1\n        }", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val d = value.toDouble\n        val i = d.toLong\n    \
    \    if (abs(d - i) < 0.5) i else i + 1", "        val v = value.toDouble\n  \
    \      if (v > 0) {\n            ceil(v).toLong\n        } else {\n          \
    \  floor(v).toLong\n        }", "        val num = value.toDouble\n        if\
    \ (num == floor(num)) floor(num).toLong\n        else if (num > 0) {\n       \
    \     if (num - floor(num) < ceil(num) - num) floor(num).toLong\n            else\
    \ ceil(num).toLong\n        }\n        else {\n            if (num - floor(num)\
    \ < ceil(num) - num) ceil(num).toLong\n            else floor(num).toLong\n  \
    \      }", "        val x = value.toDouble\n        val y = round(x)\n       \
    \ val z = floor(x)\n        val w = ceil(x)\n        if (abs(x - y) < abs(x -\
    \ z)) y.toLong\n        else if (abs(x - y) < abs(x - w)) y.toLong\n        else\
    \ if (abs(x - z) < abs(x - w)) z.toLong\n        else w.toLong", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num < 0)\
    \ floor.toLong else ceil.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) {\n            floor.toLong\n        } else {\n            ceil.toLong\n\
    \        }", "        val number = value.toDouble\n        if (number > 0) {\n\
    \            ceil(number).toLong\n        } else {\n            floor(number).toLong\n\
    \        }", "        val num = value.toDouble\n        if (num > 0) {\n     \
    \       if (num - num.toLong < 0.5) num.toLong else num.toLong + 1\n        }\
    \ else {\n            if (num - num.toLong > -0.5) num.toLong else num.toLong\
    \ - 1\n        }", "        val number = value.toDouble\n        if (number >\
    \ 0) {\n            val floor = floor(number)\n            if (number - floor\
    \ < 0.5) floor.toLong else ceil(number).toLong\n        } else {\n           \
    \ val ceil = ceil(number)\n            if (number - ceil < 0.5) ceil.toLong else\
    \ floor(number).toLong\n        }", "        val v = value.toDouble\n        val\
    \ i = v.toLong\n        if (abs(v - i) >= 0.5) i + (if (v > 0) 1 else -1) else\
    \ i", "        val x = value.toDouble\n        val y = round(x)\n        if (abs(x\
    \ - y) == 0.5) {\n            if (x < 0) {\n                return y.toLong -\
    \ 1\n            } else {\n                return y.toLong + 1\n            }\n\
    \        } else {\n            return y.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        if (d >= 0) ceil(d).toLong else floor(d).toLong", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(floor - num) == abs(ceil - num)) {\n            if (floor > 0)\
    \ floor else ceil\n        } else if (abs(floor - num) < abs(ceil - num)) floor\
    \ else ceil", "        val n = value.toDouble\n        val m = round(n)\n    \
    \    val k = floor(n)\n        val l = ceil(n)\n        if (abs(m - n) < abs(k\
    \ - n)) m.toLong\n        else if (abs(m - n) > abs(k - n)) k.toLong\n       \
    \ else if (m > 0) l.toLong\n        else k.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (num\
    \ - floor < ceil - num) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ num = value.toDouble\n        if (num < 0) {\n            val floor = math.floor(num)\n\
    \            val ceil = math.ceil(num)\n            if (num - floor > ceil - num)\
    \ ceil.toLong else floor.toLong\n        } else {\n            val floor = math.floor(num)\n\
    \            val ceil = math.ceil(num)\n            if (ceil - num > num - floor)\
    \ floor.toLong else ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val l = d.toLong\n        if (abs(d - l) < 0.5) l else l + 1", "    \
    \    val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (number - floor < ceil - number) floor.toLong\
    \ else ceil.toLong", "        val num = value.toDouble\n        if (num > 0) {\n\
    \            ceil(num).toLong\n        } else {\n            floor(num).toLong\n\
    \        }", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor - num) ==\
    \ abs(ceil - num)) {\n            if (floor >= 0) floor else ceil\n        } else\
    \ if (abs(floor - num) < abs(ceil - num)) floor else ceil", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) ceil else floor\n        } else if (abs(floor - num) < abs(ceil\
    \ - num)) floor else ceil", "        val n = BigDecimal(value)\n        val floor\
    \ = n.floor\n        val ceil = n.ceil\n        if (n - floor <= ceil - n) floor.toLong\
    \ else ceil.toLong", "        val number = value.toDouble\n        if (number\
    \ > 0) {\n            val floor = floor(number)\n            val ceil = ceil(number)\n\
    \            if (number - floor < ceil - number) floor.toLong else ceil.toLong\n\
    \        } else {\n            val floor = floor(number)\n            val ceil\
    \ = ceil(number)\n            if (number - floor < ceil - number) ceil.toLong\
    \ else floor.toLong\n        }", "        val num = value.toDouble\n        if\
    \ (num > 0) {\n            if (num - num.toLong < 0.5) num.toLong else num.toLong\
    \ + 1\n        } else {\n            if (num - num.toLong > -0.5) num.toLong else\
    \ num.toLong - 1\n        }", "        val number = value.toDouble\n        val\
    \ floor = floor(number)\n        val ceil = ceil(number)\n        if (number -\
    \ floor > ceil - number) ceil.toLong else floor.toLong", "        val num = value.toDouble\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) ceil else floor\n \
    \       } else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong else\
    \ ceil.toLong", "        val v = value.toDouble\n        val v1 = floor(v)\n \
    \       val v2 = ceil(v)\n        if (abs(v - v1) == abs(v - v2)) {\n        \
    \    if (v >= 0) v2 else v1\n        } else if (abs(v - v1) < abs(v - v2)) v1\
    \ else v2", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) == abs(number\
    \ - ceil)) {\n            if (number >= 0) ceil else floor\n        } else if\
    \ (abs(number - floor) < abs(number - ceil)) floor else ceil", "        val d\
    \ = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i\
    \ else i + signum(d)", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(floor - number)\
    \ == abs(ceil - number)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - number) < abs(ceil - number)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val v = value.toDouble\n        val i = v.toLong\n        if (abs(v - i)\
    \ < 0.5) i else i + signum(v)", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (abs(d - i) >= 0.5) i + signum(d) else i", "        val\
    \ num = value.toDouble\n        val floor = num.floor\n        val ceil = num.ceil\n\
    \        if (abs(floor - num) == abs(ceil - num)) {\n            if (floor < 0)\
    \ floor else ceil\n        } else if (abs(floor - num) < abs(ceil - num)) floor\
    \ else ceil", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) < abs(number\
    \ - ceil)) floor.toLong else ceil.toLong", "        val v = value.toDouble\n \
    \       val floor = math.floor(v)\n        val ceil = math.ceil(v)\n        if\
    \ (abs(v - floor) == abs(v - ceil)) {\n            if (v > 0) ceil else floor\n\
    \        } else if (abs(v - floor) < abs(v - ceil)) floor else ceil", "      \
    \  val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil.toLong else floor.toLong\n        } else\
    \ if (abs(number - floor) < abs(number - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val v = value.toDouble\n\
    \        val floor = v.floor\n        val ceil = v.ceil\n        if (abs(floor\
    \ - v) == abs(ceil - v)) {\n            if (floor < 0) floor else ceil\n     \
    \   } else if (abs(floor - v) < abs(ceil - v)) floor else ceil", "        val\
    \ d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) floor.toLong else ceil.toLong\n        } else if (abs(floor\
    \ - num) < abs(ceil - num)) {\n            floor.toLong\n        } else {\n  \
    \          ceil.toLong\n        }", "        val num = value.toDouble\n      \
    \  val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num -\
    \ floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num =\
    \ value.toDouble\n        if (num > 0) {\n            if (num - num.toLong ==\
    \ 0.5) num.toLong + 1 else num.toLong\n        } else {\n            if (num -\
    \ num.toLong == -0.5) num.toLong - 1 else num.toLong\n        }", "        val\
    \ number = value.toDouble\n        val floor = floor(number)\n        val ceil\
    \ = ceil(number)\n        if (abs(number - floor) == abs(number - ceil)) {\n \
    \           if (number >= 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val d = value.toDouble\n        val floor = d.floor\n        val ceil\
    \ = d.ceil\n        if (abs(d - floor) < abs(d - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ == 0.5) {\n            if (d > 0) i + 1 else i - 1\n        } else {\n     \
    \       i\n        }", "        val num = value.toDouble\n        val floor =\
    \ floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num\
    \ - ceil)) {\n            if (num > 0) ceil else floor\n        } else if (abs(num\
    \ - floor) < abs(num - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n\
    \            if (d1 - d < d - d2) d1.toLong else d2.toLong\n        } else {\n\
    \            val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d2\
    \ - d < d - d1) d2.toLong else d1.toLong\n        }", "        val valueDouble\
    \ = value.toDouble\n        val valueInt = value.toInt\n        val valueIntDouble\
    \ = valueInt.toDouble\n        if (valueDouble - valueIntDouble >= 0.5) valueInt\
    \ + 1\n        else valueInt", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val v = value.toDouble\n\
    \        val v1 = floor(v)\n        val v2 = ceil(v)\n        if (abs(v1 - v)\
    \ < abs(v2 - v)) v1.toLong else v2.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val number\
    \ = value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (number - floor == ceil - number) {\n            if (number < 0) floor.toLong\
    \ else ceil.toLong\n        } else if (number - floor < ceil - number) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) >= 0.5) i + signum(d) else i", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val v = value.toDouble\n        val v1 = floor(v)\n        val v2 = ceil(v)\n\
    \        if (abs(v - v1) == abs(v - v2)) {\n            if (v > 0) v2 else v1\n\
    \        } else if (abs(v - v1) < abs(v - v2)) v1 else v2", "        val number\
    \ = value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val floor = floor(d)\n        val ceil\
    \ = ceil(d)\n        if (abs(d - floor) < abs(d - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + 1", "        val d = value.toDouble\n        val l = d.toLong\n\
    \        if (abs(d - l) < 0.5) l else l + 1", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val num = value.toDouble\n        if (num > 0) {\n            ceil(num).toLong\n\
    \        } else {\n            floor(num).toLong\n        }", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i else\
    \ i + signum(d)", "        val v = value.toDouble\n        val i = v.toLong\n\
    \        if (abs(v - i) > 0.5) i + signum(v) else i", "        val n = value.toDouble\n\
    \        if (n - n.toLong >= 0.5) n.toLong + 1\n        else n.toLong", "    \
    \    val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val number\
    \ = value.toDouble\n        if (number > 0) {\n            if (number - number.toLong\
    \ < 0.5) number.toLong else number.toLong + 1\n        } else {\n            if\
    \ (number - number.toLong > -0.5) number.toLong else number.toLong - 1\n     \
    \   }", "        val d = value.toDouble\n        val floor = d.floor\n       \
    \ val ceil = d.ceil\n        if (d - floor > ceil - d) ceil else floor", "   \
    \     val num = value.toDouble\n        val floor = math.floor(num)\n        val\
    \ ceil = math.ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n\
    \            if (floor < 0) {\n                floor.toLong\n            } else\
    \ {\n                ceil.toLong\n            }\n        } else if (abs(floor\
    \ - num) < abs(ceil - num)) {\n            floor.toLong\n        } else {\n  \
    \          ceil.toLong\n        }", "        val num = value.toDouble\n      \
    \  val lower = floor(num)\n        val upper = ceil(num)\n        if (abs(num\
    \ - lower) == abs(num - upper)) {\n            if (num > 0) upper.toLong else\
    \ lower.toLong\n        } else if (abs(num - lower) < abs(num - upper)) lower.toLong\
    \ else upper.toLong", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i > 0.5) i + 1 else i", "        val\
    \ v = value.toDouble\n        val i = v.toLong\n        if (v - i >= 0.5) i +\
    \ 1 else i", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(floor - number) == abs(ceil\
    \ - number)) {\n            if (floor < 0) {\n                floor.toLong\n \
    \           } else {\n                ceil.toLong\n            }\n        } else\
    \ if (abs(floor - number) < abs(ceil - number)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val n = value.toDouble\n\
    \        val floor = math.floor(n)\n        val ceil = math.ceil(n)\n        if\
    \ (n - floor < ceil - n) floor else ceil", "        val d = value.toDouble\n \
    \       if (d < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n\
    \            if (d1 - d < d - d2) d1.toLong else d2.toLong\n        } else {\n\
    \            val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d2\
    \ - d < d - d1) d2.toLong else d1.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = math.floor(num)\n        val ceil = math.ceil(num)\n    \
    \    if (abs(floor - num) < abs(ceil - num)) floor.toLong else ceil.toLong", " \
    \       val number = value.toDouble\n        val floor = floor(number)\n     \
    \   val ceil = ceil(number)\n        if (number - floor < ceil - number) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        val f = floor(d)\n\
    \        val c = ceil(d)\n        if (f == c) f.toLong\n        else if (d - f\
    \ < c - d) f.toLong\n        else c.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val d = value.toDouble\n        if\
    \ (d < 0) -closestInteger(-d)\n        else {\n            val i = d.toLong\n\
    \            if (d - i < 0.5) i\n            else i + 1\n        }", "       \
    \ val num = value.toDouble\n        val floor = floor(num)\n        val ceil =\
    \ ceil(num)\n        if (num - floor < ceil - num) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (d - i >=\
    \ 0.5) i + 1 else i", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor >= 0) floor else ceil\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "  \
    \      val (intPart, fracPart) = value.split(\"\\\\.\").map(_.toLong) match {\n\
    \            case Array(intPart, fracPart) => (intPart, fracPart)\n          \
    \  case Array(intPart) => (intPart, 0)\n        }\n        if (fracPart >= 5)\
    \ intPart + 1 else intPart", "        val d = value.toDouble\n        val floor\
    \ = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor - d) < abs(ceil\
    \ - d)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n  \
    \      val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        if (num > 0) ceil(num).toLong\n     \
    \   else floor(num).toLong", "        val d = value.toDouble\n        if (d >\
    \ 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val num = value.toDouble\n        if (num > 0) {\n     \
    \       if (num - num.toLong >= 0.5) num.toLong + 1\n            else num.toLong\n\
    \        } else {\n            if (num - num.toLong <= -0.5) num.toLong - 1\n\
    \            else num.toLong\n        }", "        val n = value.toDouble\n  \
    \      val m = round(n)\n        if (abs(n - m) == 0.5) {\n            if (n >\
    \ 0) m + 1 else m - 1\n        } else m", "        val d = value.toDouble\n  \
    \      if (d > 0) {\n            val floor = d.floor\n            if (d - floor\
    \ < 0.5) floor else floor + 1\n        } else {\n            val ceil = d.ceil\n\
    \            if (ceil - d < 0.5) ceil else ceil - 1\n        }", "        val\
    \ d = value.toDouble\n        val floor = floor(d)\n        val ceil = ceil(d)\n\
    \        if (abs(d - floor) == abs(d - ceil)) {\n            if (d >= 0) ceil.toLong\
    \ else floor.toLong\n        } else if (abs(d - floor) < abs(d - ceil)) {\n  \
    \          floor.toLong\n        } else {\n            ceil.toLong\n        }",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + 1", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(floor - number)\
    \ == abs(ceil - number)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - number) < abs(ceil - number)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val ceil = ceil(num)\n        val floor = floor(num)\n        if (ceil\
    \ - num < num - floor) ceil.toLong else floor.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ d = value.toDouble\n        if (d >= 0) {\n            ceil(d).toLong\n    \
    \    } else {\n            floor(d).toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) < abs(ceil - num)) floor.toLong else ceil.toLong", "        val number\
    \ = value.toDouble\n        val floor = math.floor(number)\n        val ceil =\
    \ math.ceil(number)\n        if (number - floor < ceil - number) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) > 0.5) i + signum(d) else i", "        val n = value.toDouble\n\
    \        val a = floor(n)\n        val b = ceil(n)\n        if (abs(n - a) < abs(n\
    \ - b)) a.toLong else b.toLong", "        val d = value.toDouble\n        val\
    \ floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d - floor) ==\
    \ abs(d - ceil)) {\n            if (d >= 0) ceil.toLong else floor.toLong\n  \
    \      } else if (abs(d - floor) < abs(d - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        if (num - num.toLong > 0.5) num.toLong + 1\n        else num.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ >= 0.5) i + signum(d) else i", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val number =\
    \ value.toDouble\n        val floor = math.floor(number)\n        val ceil = math.ceil(number)\n\
    \        if (number - floor > ceil - number) ceil.toLong else floor.toLong", " \
    \       val num = value.toDouble\n        val floor = floor(num)\n        val\
    \ ceil = ceil(num)\n        if (num - floor < ceil - num) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (number - floor < ceil - number) floor.toLong\
    \ else ceil.toLong", "        val doubleValue = value.toDouble\n        val floor\
    \ = floor(doubleValue)\n        val ceil = ceil(doubleValue)\n        if (abs(doubleValue\
    \ - floor) == abs(doubleValue - ceil)) {\n            if (doubleValue < 0) ceil.toLong\
    \ else floor.toLong\n        } else if (abs(doubleValue - floor) < abs(doubleValue\
    \ - ceil)) {\n            floor.toLong\n        } else {\n            ceil.toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   val r = d - i\n        if (r < 0.5) i else i + 1", "        val d = value.toDouble\n\
    \        if (d > 0) (d + 0.5).toLong\n        else (d - 0.5).toLong", "      \
    \  val d = value.toDouble\n        val floor = d.floor\n        val ceil = d.ceil\n\
    \        if (abs(floor - d) == abs(ceil - d)) {\n            if (floor < 0) ceil\
    \ else floor\n        } else if (abs(floor - d) < abs(ceil - d)) floor else ceil",
  "        val d = value.toDouble\n        val floor = floor(d)\n        val ceil\
    \ = ceil(d)\n        if (d - floor < ceil - d) floor.toLong else ceil.toLong",
  "        val n = value.toDouble\n        if (n > 0) {\n            if (n - n.toLong\
    \ < 0.5) n.toLong else n.toLong + 1\n        } else {\n            if (n - n.toLong\
    \ > -0.5) n.toLong else n.toLong - 1\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n          \
    \  if (num >= 0) ceil else floor\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor else ceil", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor - num) < abs(ceil\
    \ - num)) floor.toLong else ceil.toLong", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = math.floor(num)\n       \
    \ val ceil = math.ceil(num)\n        if (num - floor < ceil - num) floor.toLong\
    \ else ceil.toLong", "        val x = value.toDouble\n        if (x < 0) {\n \
    \           val y = ceil(x)\n            if (y - x == 0.5) y - 1 else y\n    \
    \    } else {\n            val y = floor(x)\n            if (x - y == 0.5) y +\
    \ 1 else y\n        }", "        val num = value.toDouble\n        val floor =\
    \ floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val floor = math.floor(d)\n        val ceil = math.ceil(d)\n        if\
    \ (abs(d - floor) == abs(d - ceil)) {\n            if (d > 0) ceil else floor\n\
    \        } else if (abs(d - floor) < abs(d - ceil)) floor else ceil", "      \
    \  val n = value.toDouble\n        val floor = floor(n)\n        val ceil = ceil(n)\n\
    \        if (n - floor < ceil - n) floor.toLong else ceil.toLong", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val x = value.toDouble\n \
    \       val y = x.toLong\n        if (x - y > 0.5) y + 1 else y", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(floor - num) == abs(ceil - num)) {\n            if (floor >=\
    \ 0) floor else ceil\n        } else if (abs(floor - num) < abs(ceil - num)) floor\
    \ else ceil", "        val num = value.toDouble\n        val floor = math.floor(num)\n\
    \        val ceil = math.ceil(num)\n        if (num - floor < ceil - num) floor.toLong\
    \ else ceil.toLong", "        val x = value.toDouble\n        val y = round(x)\n\
    \        if (x - y < 0) y.toLong - 1 else y.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i > 0.5) i + 1 else i", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val d = value.toDouble\n        val i = d.toLong\n    \
    \    if (abs(d - i) > 0.5) {\n            if (d > 0) i + 1 else i - 1\n      \
    \  } else i", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) floor.toLong else ceil.toLong\n        } else if (abs(floor\
    \ - num) < abs(ceil - num)) {\n            floor.toLong\n        } else {\n  \
    \          ceil.toLong\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + 1", "        val d = value.toDouble\n        val i = d.toLong\n \
    \       if (abs(d - i) >= 0.5) i + signum(d) else i", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val number = value.toDouble\n        if (number > 0) {\n            ceil(number).toLong\n\
    \        } else {\n            floor(number).toLong\n        }", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d =\
    \ value.toDouble\n        if (d > 0) {\n            if (d - d.toLong < 0.5) d.toLong\
    \ else d.toLong + 1\n        } else {\n            if (d - d.toLong > -0.5) d.toLong\
    \ else d.toLong - 1\n        }", "        val d = value.toDouble\n        if (d\
    \ < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n      \
    \      if (d1 - d == d - d2) d1.toLong else d2.toLong\n        } else {\n    \
    \        val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d1 -\
    \ d == d - d2) d1.toLong else d2.toLong\n        }", "        val x = value.toDouble\n\
    \        if (x > 0) {\n            if (x - x.toLong < 0.5) x.toLong else x.toLong\
    \ + 1\n        } else {\n            if (x - x.toLong > -0.5) x.toLong else x.toLong\
    \ - 1\n        }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        val\
    \ f = floor(d)\n        val c = ceil(d)\n        if (abs(d - f) == abs(d - c))\
    \ {\n            if (d >= 0) c else f\n        } else if (abs(d - f) < abs(d -\
    \ c)) f else c", "        val n = value.toDouble\n        val n1 = floor(n)\n\
    \        val n2 = ceil(n)\n        if (abs(n - n1) == abs(n - n2)) {\n       \
    \     if (n > 0) n2 else n1\n        } else if (abs(n - n1) < abs(n - n2)) n1\
    \ else n2", "        val d = value.toDouble\n        if (d < 0) -closestInteger(-d)\n\
    \        else {\n            val i = d.toLong\n            if (d - i < 0.5) i\n\
    \            else i + 1\n        }", "        val num = value.toDouble\n     \
    \   val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        if (num > 0) ceil(num).toLong\n      \
    \  else floor(num).toLong", "        val n = value.toDouble\n        val floor\
    \ = math.floor(n)\n        val ceil = math.ceil(n)\n        if (n - floor > ceil\
    \ - n) ceil else floor", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (d - floor\
    \ <= ceil - d) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        if (d >= 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = value.toLong\n        if (d - i >= 0.5) i + 1 else i", "     \
    \   val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) {\n                floor.toLong\n            } else {\n    \
    \            ceil.toLong\n            }\n        } else if (abs(floor - num) <\
    \ abs(ceil - num)) {\n            floor.toLong\n        } else {\n           \
    \ ceil.toLong\n        }"]
stop_tokens:
- "\n    }\n"
