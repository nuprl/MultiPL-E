name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"\
  10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n\
  \    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) == abs(number\
    \ - ceil)) {\n            if (number >= 0) ceil else floor\n        } else if\
    \ (abs(number - floor) < abs(number - ceil)) floor else ceil", "        val n\
    \ = value.toDouble\n        if (n < 0) -closestInteger(-n)\n        else {\n \
    \           val i = n.toLong\n            if (n - i < 0.5) i\n            else\
    \ i + 1\n        }", "        val v = value.toDouble\n        val c = round(v)\n\
    \        if (c - v == 0.5) {\n            if (c > 0) c + 1 else c - 1\n      \
    \  } else c.toLong", "        val d = value.toDouble\n        val floor = floor(d)\n\
    \        val ceil = ceil(d)\n        if (abs(d - floor) < abs(d - ceil)) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        if (d > 0) {\n \
    \           val x = round(d)\n            if (x - d == 0.5) x + 1 else x\n   \
    \     } else {\n            val x = round(d)\n            if (x - d == -0.5) x\
    \ - 1 else x\n        }", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ == abs(number - ceil)) {\n            if (number > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(number - floor) < abs(number - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val v = value.toDouble\n\
    \        val v1 = floor(v)\n        val v2 = ceil(v)\n        if (abs(v - v1)\
    \ == abs(v - v2)) {\n            if (v1 < 0) v2 else v1\n        } else if (abs(v\
    \ - v1) < abs(v - v2)) v1 else v2", "        val d = value.toDouble\n        val\
    \ l = d.toLong\n        if (d - l < 0.5) l else l + 1", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if ((number - floor) < (ceil - number)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) {\n                ceil.toLong\n            } else {\n     \
    \           floor.toLong\n            }\n        } else if (abs(floor - num) <\
    \ abs(ceil - num)) {\n            floor.toLong\n        } else {\n           \
    \ ceil.toLong\n        }", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val n = value.toDouble\n        val\
    \ floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(floor - n) < abs(ceil\
    \ - n)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n    \
    \    val floor = d.floor\n        val ceil = d.ceil\n        if (abs(floor - d)\
    \ == abs(ceil - d)) {\n            if (floor < 0) ceil else floor\n        } else\
    \ if (abs(floor - d) < abs(ceil - d)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) {\n               \
    \ ceil.toLong\n            } else {\n                floor.toLong\n          \
    \  }\n        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (floor\
    \ == ceil) floor.toLong\n        else if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong\n        else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong else\
    \ ceil.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num >= 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong"]
stop_tokens:
- "\n    }\n"
