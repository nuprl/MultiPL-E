language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                        count += 1\n         \
    \           }\n                }\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcof091n8.scala:28)\n\tat Problem.main(tmpcof091n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1\
    \ + 3 * k * k - 3 * k + 1\n        // = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\n        // = 3 * (i * i + j * j + k * k - i - j - k) + 3\n     \
    \   // = 3 * (i * i + j * j + k * k - i - j - k + 1)\n        // = 3 * (i * i\
    \ + j * j + k * k - i - j - k + 1 - 1) + 3\n        // = 3 * (i * i + j * j +\
    \ k * k - i - j - k + 1 - 1 + 1) - 3\n        // = 3 * (i * i + j * j + k * k\
    \ - i - j - k + 1 - 1 + 1 - 1)\n        // = 3 * (i * i + j * j + k * k - i -\
    \ j - k + 1 - 1 + 1 - 1 + 1) - 3\n        // = 3 * (i * i + j * j + k * k - i\
    \ - j - k + 1 - 1 + 1 - 1 + 1 - 1)\n        // = 3 * (i * i + j * j + k * k -\
    \ i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1) - 3\n        // = 3 * (i * i + j * j\
    \ + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1)\n        // = 3 * (i *\
    \ i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1) - 3\n   \
    \     // = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1\
    \ - 1 + 1 - 1)\n        // = 3 * (i * i + j * j + k\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgbyr0ncy.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m17 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i -\
    \ j - k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// = 3 * (i * i + j * j + k *\
    \ k - i - j - k + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// = 3 * (i * i + j *\
    \ j + k * k - i - j - k + 1 - 1) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// = 3\
    \ * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1) - 3\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1)\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i - j - k\
    \ + 1 - 1 + 1 - 1 + 1) - 3\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i * i\
    \ + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1)\e[0m\n\e[31m25 |\e[0m \
    \       \e[34m// = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1\
    \ - 1 + 1) - 3\e[0m\n\e[31m26 |\e[0m        \e[34m// = 3 * (i * i + j * j + k\
    \ * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1)\e[0m\n\e[31m27 |\e[0m     \
    \   \e[34m// = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1\
    \ + 1 - 1 + 1) - 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = 3 * (i * i + j * j\
    \ + k * k - i - j - k + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1)\e[0m\n\e[31m29\
    \ |\e[0m        \e[34m// = 3 * (i * i + j * j + k\e[0m\n\e[31m30 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5k52zpey.scala:28)\n\tat Problem.main(tmp5k52zpey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcof091n8.scala:28)\n\tat Problem.main(tmpcof091n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3 * j * j - 3 * j + 3 * k\
    \ * k - 3 * k + 3\n        // = 3 * (i * i - i + j * j - j + k * k - k) + 3\n\
    \        // = 3 * (i * i - i + j * j - j + k * k - k + 1)\n        // = 3 * (i\
    \ * i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k -\
    \ k)\n        // = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i -\
    \ i + j * j - j + k * k - k)\n        // = 3 * (i * i - i + j * j - j + k * k\
    \ - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\n        // = 3 * (i * i\
    \ - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\n\
    \        // = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j\
    \ * j - j + k * k - k)\n        // = 3 * (i * i - i + j * j - j + k * k - k +\
    \ 1) + 3 * (i * i - i + j * j - j + k * k - k)\n        // = 3 * (i * i - i +\
    \ j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\n     \
    \   // = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j\
    \ - j + k * k - k)\n       \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw30lqf5d.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3 * j * j - 3 * j + 3 * k * k - 3 * k + 3\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k) + 3\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k + 1)\e[0m\n\e\
    [31m19 |\e[0m        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k + 1) +\
    \ 3 * (i * i - i + j * j - j + k * k - k)\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j +\
    \ k * k - k)\e[0m\n\e[31m21 |\e[0m        \e[34m// = 3 * (i * i - i + j * j -\
    \ j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i\
    \ * i - i + j * j - j + k * k - k)\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 *\
    \ (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k\
    \ - k)\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i * i - i + j * j - j + k\
    \ * k - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k + 1) + 3 * (i * i -\
    \ i + j * j - j + k * k - k)\e[0m\n\e[31m26 |\e[0m        \e[34m// = 3 * (i *\
    \ i - i + j * j - j + k * k - k + 1) + 3 * (i * i - i + j * j - j + k * k - k)\e\
    [0m\n\e[31m27 |\e[0m       \n\e[31m28 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                        count += 1\n         \
    \           }\n                }\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt - 1) {\n \
    \               for (k <- j + 1 to n.toInt) {\n                    if ((i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n            \
    \    }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = (i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1)\n        // = i * i + j * j + k * k - i - j - k + 3\n        // = (i\
    \ + j + k) * (i + j + k) - (i + j + k) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i +\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tt92job.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)\e[0m\n\e[31m17 |\e[0m     \
    \   \e[34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m18 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m21 |\e[0m  \
    \      \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m22 |\e[0m    \
    \    \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m23 |\e[0m      \
    \  \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m26 |\e[0m        \e[34m// =\
    \ (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = (i\
    \ + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i +\
    \ j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j\
    \ + k) * (i + j + k - 1) + 3\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j +\
    \ k) * (i + j + k - 1) + 3\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m32 |\e[0m        \e[34m// = (i + j + k) *\
    \ (i + j + k - 1) + 3\e[0m\n\e[31m33 |\e[0m        \e[34m// = (i + j + k) * (i\
    \ + j + k - 1) + 3\e[0m\n\e[31m34 |\e[0m        \e[34m// = (i + j + k) * (i +\
    \ j + k - 1) + 3\e[0m\n\e[31m35 |\e[0m        \e[34m// = (i + j + k) * (i + j\
    \ + k - 1) + 3\e[0m\n\e[31m36 |\e[0m        \e[34m// = (i +\e[0m\n\e[31m37 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found"
  stdout: ''
  timestamp: 1659797999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0L)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod = 3\n        val\
    \ a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i) = i\
    \ * i - i + 1\n        val sum = Array.ofDim[Long](n.toInt)\n        sum(0) =\
    \ a(0)\n        for (i <- 1 until n.toInt) sum(i) = sum(i - 1) + a(i)\n      \
    \  val count = Array.ofDim[Long](mod)\n        for (i <- 0 until n.toInt) count(sum(i).toInt\
    \ % mod) += 1\n        var result = 0L\n        for (i <- 0 until mod) result\
    \ += count(i) * (count(i) - 1) * (count(i) - 2) / 6\n        for (i <- 0 until\
    \ n.toInt) {\n            val c = sum(i).toInt % mod\n            result -= count(c)\
    \ * (count(c) - 1) / 2\n            count(c) -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsl8nhlb9.scala:33)\n\tat Problem.main(tmpsl8nhlb9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n   \
    \         for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j +\
    \ 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjxob1xf.scala:32)\n\tat Problem.main(tmpbjxob1xf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0\n        for (i <- 0 until n.toInt - 2) {\n    \
    \        for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j + 1\
    \ until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv29gee7x.scala:32)\n\tat Problem.main(tmpv29gee7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        var sum = 0\n        for (i <- 1 to n.toInt) {\n            a(i - 1)\
    \ = i * i - i + 1\n            sum += a(i - 1)\n        }\n        val mod = sum\
    \ % 3\n        if (mod == 0) {\n            var count = 0\n            for (i\
    \ <- 0 until n.toInt - 2) {\n                for (j <- i + 1 until n.toInt - 1)\
    \ {\n                    for (k <- j + 1 until n.toInt) {\n                  \
    \      if (a(i) + a(j) + a(k) == sum) count += 1\n                    }\n    \
    \            }\n            }\n            count\n        } else {\n         \
    \   var count = 0\n            for (i <- 0 until n.toInt - 2) {\n            \
    \    for (j <- i + 1 until n.toInt - 1) {\n                    for (k <- j + 1\
    \ until n.toInt) {\n                        if (a(i) + a(j) + a(k) == sum - mod)\
    \ count += 1\n                        else if (a(i) + a(j) + a(k) == sum + mod)\
    \ count += 1\n                    }\n                }\n            }\n      \
    \      count\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7rbau1t.scala:46)\n\tat Problem.main(tmp_7rbau1t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0L)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Let a[i] = i * i - i +\
    \ 1 = i * (i - 1) + 1\n        // a[i] + a[j] + a[k] = i * (i - 1) + j * (j -\
    \ 1) + k * (k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j +\
    \ k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n     \
    \   // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n        // a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n        // a[i] + a[j] +\
    \ a[k] = (i + j + k) * (i + j + k - 1) + 3\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\
    \ + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n   \
    \     // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) +\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpymtifvvk.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Let\
    \ a[i] = i * i - i + 1 = i * (i - 1) + 1\e[0m\n\e[31m16 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = i * (i - 1) + j * (j - 1) + k * (k - 1) + 3\e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) +\
    \ 3\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i\
    \ + j + k - 1) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m21 |\e[0m    \
    \    \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e\
    [31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k -\
    \ 1) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m26 |\e[0m    \
    \    \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e\
    [31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k -\
    \ 1) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) +\e[0m\n\e[31m29 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count += 1\n \
    \                   }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var result\
    \ = 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1\
    \ until n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n   \
    \                 if ((a(i) + a(j) + a(k)) % 3 == 0) result += 1\n           \
    \     }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8941vftv.scala:28)\n\tat Problem.main(tmp8941vftv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n   \
    \     // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 * a[k]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\n        // a[i]\
    \ + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3\
    \ * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n\
    \        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8y_q0ai0.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * a[i]\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[j]\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[k]\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// a[i] + a[j] + a\e[0m\n\e[31m32 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var cnt = 0\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                }\n         \
    \   }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcof091n8.scala:28)\n\tat Problem.main(tmpcof091n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // (1, 7, 13)\n        //\
    \ (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7,\
    \ 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mzyjlqb.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// (1,\
    \ 7, 13)\e[0m\n\e[31m16 |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m17 |\e[0m\
    \        \e[34m// (1, 13, 21)\e[0m\n\e[31m18 |\e[0m        \e[34m// (3, 7, 13)\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m20 |\e[0m        \e\
    [34m// (3, 13, 21)\e[0m\n\e[31m21 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e\
    [31m22 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ (1, 3, 13)\e[0m\n\e[31m24 |\e[0m        \e[34m// (1, 3, 21)\e[0m\n\e[31m25 |\e\
    [0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m26 |\e[0m        \e[34m// (1, 7, 21)\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m28 |\e[0m       \
    \ \e[34m// (3, 7, 13)\e[0m\n\e[31m29 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e\
    [31m30 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m31 |\e[0m        \e[34m//\
    \ (7, 13, 21)\e[0m\n\e[31m32 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m33 |\e\
    [0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m34 |\e[0m        \e[34m// (1, 3, 21)\e\
    [0m\n\e[31m35 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m36 |\e[0m        \e\
    [34m// (1, 7, 21)\e[0m\n\e[31m37 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m38\
    \ |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m39 |\e[0m        \e[34m// (3,\
    \ 7, 21)\e[0m\n\e[31m40 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m41 |\e\
    [0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m42 |\e[0m        \e[34m// (1, 3, 7)\e\
    [0m\n\e[31m43 |\e[0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m44 |\e[0m        \e\
    [34m// (1, 3, 21)\e[0m\n\e[31m45 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m46\
    \ |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m47 |\e[0m        \e[34m// (1,\
    \ 13, 21)\e[0m\n\e[31m48 |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m49 |\e\
    [0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m50 |\e[0m        \e[34m// (3, 13, 21)\e\
    [0m\n\e[31m51 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m52 "
  stdout: ''
  timestamp: 1659798007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod3 = n % 3\n      \
    \  val mod6 = n % 6\n        val mod9 = n % 9\n        val mod12 = n % 12\n  \
    \      val mod15 = n % 15\n        val mod18 = n % 18\n        val mod21 = n %\
    \ 21\n        val mod24 = n % 24\n        val mod27 = n % 27\n        val mod30\
    \ = n % 30\n        val mod33 = n % 33\n        val mod36 = n % 36\n        val\
    \ mod39 = n % 39\n        val mod42 = n % 42\n        val mod45 = n % 45\n   \
    \     val mod48 = n % 48\n        val mod51 = n % 51\n        val mod54 = n %\
    \ 54\n        val mod57 = n % 57\n        val mod60 = n % 60\n        val mod63\
    \ = n % 63\n        val mod66 = n % 66\n        val mod69 = n % 69\n        val\
    \ mod72 = n % 72\n        val mod75 = n % 75\n        val mod78 = n % 78\n   \
    \     val mod81 = n % 81\n        val mod84 = n % 84\n        val mod87 = n %\
    \ 87\n        val mod90 = n % 90\n        val mod93 = n % 93\n        val mod96\
    \ = n % 96\n        val mod99 = n % 99\n        val mod102 = n % 102\n       \
    \ val mod105 = n % 105\n        val mod108 = n % 108\n        val mod111 = n %\
    \ 111\n        val mod114 = n % 114\n        val mod117 = n % 117\n        val\
    \ mod120 = n % 120\n        val mod123 = n % 123\n        val mod126 = n % 126\n\
    \        val mod129 = n % 129\n        val mod132 = n % 132\n        val mod135\
    \ = n % 135\n        val mod138 = n % 138\n        val mod141 = n % 141\n    \
    \    val mod144 = n % 144\n        val mod147 = n % 147\n        val mod150 =\
    \ n % 150\n        val mod153 = n % 153\n        val mod156 = n % 156\n      \
    \  val mod159 = n % 159\n        val mod162 = n % 162\n        val mod165 = n\
    \ % 165\n        val mod168 = n % 168\n        val mod171 = n %\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp23nxnlmq.scala:71:24 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36mmod171\e[0m = n %\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp23nxnlmq.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        val b = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) b(i - 1) = a(i - 1) % 3\n        val c = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) c(i - 1) = b(i - 1) match {\n            case\
    \ 0 => 1\n            case 1 => 2\n            case 2 => 3\n        }\n      \
    \  val d = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) d(i - 1) =\
    \ c(i - 1) match {\n            case 1 => 0\n            case 2 => 1\n       \
    \     case 3 => 2\n        }\n        val e = Array.fill(n.toInt)(0)\n       \
    \ for (i <- 1 to n.toInt) e(i - 1) = d(i - 1) match {\n            case 0 => 0\n\
    \            case 1 => 1\n            case 2 => 2\n        }\n        val f =\
    \ Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) f(i - 1) = e(i - 1)\
    \ match {\n            case 0 => 0\n            case 1 => 1\n            case\
    \ 2 => 2\n        }\n        val g = Array.fill(n.toInt)(0)\n        for (i <-\
    \ 1 to n.toInt) g(i - 1) = f(i - 1) match {\n            case 0 => 0\n       \
    \     case 1 => 1\n            case 2 => 2\n        }\n        val h = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) h(i - 1) = g(i - 1) match {\n            case\
    \ 0 => 0\n            case 1 => 1\n            case 2 => 2\n        }\n      \
    \  val i = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) i(i - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpeb82ygee.scala:56:32 -----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ i(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                ^\e\
    [0m\n\e[31m   |\e[0m                                \e[33mparameter\e[0m \e[35mi\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod = 3\n        val\
    \ a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i) = i\
    \ * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt) {\n\
    \            for (j <- i + 1 until n.toInt) {\n                for (k <- j + 1\
    \ until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % mod == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo11p0nul.scala:29)\n\tat Problem.main(tmpo11p0nul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count += 1\n \
    \                   }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg8ss4o0n.scala:28)\n\tat Problem.main(tmpg8ss4o0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod = 3\n        val\
    \ a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i) = i *\
    \ i - i + 1\n        val sum = new Array[Long](n.toInt)\n        sum(0) = a(0)\n\
    \        for (i <- 1 until n.toInt) sum(i) = sum(i - 1) + a(i)\n        val count\
    \ = new Array[Long](mod)\n        for (i <- 0 until n.toInt) count(sum(i).toInt\
    \ % mod) += 1\n        var result = 0L\n        for (i <- 0 until mod) result\
    \ += count(i) * (count(i) - 1) * (count(i) - 2) / 6\n        for (i <- 0 until\
    \ n.toInt) {\n            val x = sum(i) % mod\n            result += count(x)\
    \ * (count(x) - 1) / 2 * (n - i - 1)\n            result += count(x) * (count(x)\
    \ - 1) * (count(x) - 2) / 6\n            count(x) -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw3eh1r3c.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            result += count(x) * (count(x) - \e[31m1\e\
    [0m) / \e[31m2\e[0m * (n - i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw3eh1r3c.scala:27:28\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            result += count(x)\
    \ * (count(x) - \e[31m1\e[0m) / \e[31m2\e[0m * (n - i - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw3eh1r3c.scala:27:40\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            result += count(x)\
    \ * (count(x) - \e[31m1\e[0m) / \e[31m2\e[0m * (n - i - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m \
    \                                       Found:    (x : Long)\n\e[31m   |\e[0m\
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpw3eh1r3c.scala:28:19 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            result += count(x) * (count(x) - \e[31m1\e\
    [0m) * (count(x) - \e[31m2\e[0m) / \e[31m6\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw3eh1r3c.scala:28:28\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            result += count(x)\
    \ * (count(x) - \e[31m1\e[0m) * (count(x) - \e[31m2\e[0m) / \e[31m6\e[0m\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Found:    (x : Long)\n\e[31m   |\e[0m                        \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1659798010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1\
    \ + 3 * k * k - 3 * k + 1\n        // = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\n        // = 3 * (i * i + j * j + k * k - i - j - k) + 3\n     \
    \   // = 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i - j) * (i -\
    \ k) * (j - k) + 3\n        // = 3 * (i - j) * (i - k) * (j - k) + 3\n       \
    \ // = 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i - j) * (i - k)\
    \ * (j - k) + 3\n        // = 3 * (i - j) * (i - k) * (j - k) + 3\n        //\
    \ = 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i - j) * (i - k) *\
    \ (j - k) + 3\n        // = 3 * (i - j) * (i - k) * (j - k) + 3\n        // =\
    \ 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\n        // = 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 *\
    \ (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i - j) * (i - k) * (j - k)\
    \ + 3\n        // = 3 * (i - j) * (i - k) * (j - k) + 3\n        // = 3 * (i -\
    \ j)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7fcwafrc.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m17 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i -\
    \ j - k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m20 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m22 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m26 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m30 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m31 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m32 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m33 |\e[0m        \e[34m// = 3 * (i - j) * (i - k) * (j\
    \ - k) + 3\e[0m\n\e[31m34 |\e[0m        \e[34m// = 3 * (i - j)\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsavckbd.scala:28)\n\tat Problem.main(tmplsavckbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n\
    \        // = i * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k)\
    \ * (i + j + k) - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1)\
    \ + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpagtuy2rd.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m20 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m21 |\e[0m       \
    \ \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m22 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// =\
    \ (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// = (i\
    \ + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m26 |\e[0m        \e[34m// = (i +\
    \ j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = (i + j\
    \ + k) * (i + j + k - 1) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i + j +\
    \ k) * (i + j + k - 1) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) *\
    \ (i + j + k - 1) + 3\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i\
    \ + j + k - 1) + 3\e[0m\n\e[31m32 |\e[0m        \e[34m// = (i + j + k) * (i +\
    \ j + k - 1) + 3\e[0m\n\e[31m33 |\e[0m        \e[34m// = (i + j + k) * (i + j\
    \ + k - 1) + 3\e[0m\n\e[31m34 |\e[0m        \e[34m// = (i + j + k) * (i + j +\
    \ k - 1) + 3\e[0m\n\e[31m35 |\e[0m        \e[34m// = (i + j + k) * (i + j + k\
    \ - 1) + 3\e[0m\n\e[31m36 |\e[0m        \e[34m// = (i + j + k) * (\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error "
  stdout: ''
  timestamp: 1659798008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1 to n.toInt).map(i\
    \ => i * i - i + 1).toArray\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var result\
    \ = 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1\
    \ until n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n   \
    \                 if ((a(i) + a(j) + a(k)) % 3 == 0) result += 1\n           \
    \     }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n   \
    \         for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j +\
    \ 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpili6xkx5.scala:30)\n\tat Problem.main(tmpili6xkx5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var result\
    \ = 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1\
    \ until n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n   \
    \                 if ((a(i) + a(j) + a(k)) % 3 == 0) result += 1\n           \
    \     }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // (1, 3, 7, 13, 21, 31,\
    \ 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343, 381, 421, 463,\
    \ 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123, 1191, 1261, 1333,\
    \ 1407, 1483, 1561, 1641, 1723, 1807, 1883, 1973, 2063, 2157, 2253, 2353, 2457,\
    \ 2563, 2673, 2787, 2903, 3023, 3147, 3273, 3403, 3537, 3675, 3817, 3963, 4113,\
    \ 4267, 4425, 4587, 4753, 4923, 5097, 5275, 5457, 5643, 5833, 6027, 6223, 6423,\
    \ 6627, 6835, 7047, 7263, 7483, 7707, 7935, 8167, 8403, 8643, 8887, 9135, 9387,\
    \ 9643, 9903, 10167, 10435, 10707, 10983, 11263, 11547, 11835, 12127, 12423, 12723,\
    \ 13027, 13335, 13647, 13965, 14287, 14613, 14943, 15277, 15615, 15957, 16303,\
    \ 16653, 17007, 17365, 17727, 18093, 18465, 18841, 19221, 19605, 19993, 20385,\
    \ 20781, 21181, 21585, 21993, 22405, 22821, 23241, 23665, 24093, 24525, 24959,\
    \ 25397, 25839, 26285, 26735, 27189, 27647, 28109, 28575, 29045, 29519, 29997,\
    \ 30479, 30965, 31455, 31949, 32447, 32949, 33455, 33965, 34479, 34997, 35519,\
    \ 36045, 36575, 37109, 37647, 38189, 38735, 39285, 39839, 40397, 40961, 41529,\
    \ 42099, 42675, 43255, 43839, 44427, 45019, 45615, 46215,\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpboan29lh.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// (1,\
    \ 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343,\
    \ 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,\
    \ 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1883, 1973, 2063, 2157,\
    \ 2253, 2353, 2457, 2563, 2673, 2787, 2903, 3023, 3147, 3273, 3403, 3537, 3675,\
    \ 3817, 3963, 4113, 4267, 4425, 4587, 4753, 4923, 5097, 5275, 5457, 5643, 5833,\
    \ 6027, 6223, 6423, 6627, 6835, 7047, 7263, 7483, 7707, 7935, 8167, 8403, 8643,\
    \ 8887, 9135, 9387, 9643, 9903, 10167, 10435, 10707, 10983, 11263, 11547, 11835,\
    \ 12127, 12423, 12723, 13027, 13335, 13647, 13965, 14287, 14613, 14943, 15277,\
    \ 15615, 15957, 16303, 16653, 17007, 17365, 17727, 18093, 18465, 18841, 19221,\
    \ 19605, 19993, 20385, 20781, 21181, 21585, 21993, 22405, 22821, 23241, 23665,\
    \ 24093, 24525, 24959, 25397, 25839, 26285, 26735, 27189, 27647, 28109, 28575,\
    \ 29045, 29519, 29997, 30479, 30965, 31455, 31949, 32447, 32949, 33455, 33965,\
    \ 34479, 34997, 35519, 36045, 36575, 37109, 37647, 38189, 38735, 39285, 39839,\
    \ 40397, 40961, 41529, 42099, 42675, 43255, 43839, 44427, 45019, 45615, 46215,\e\
    [0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = n / 3\n        val\
    \ r = n % 3\n        if (r == 0) m * (m - 1) * (m - 2) / 6\n        else if (r\
    \ == 1) m * (m - 1) * (m + 1) / 6\n        else m * (m + 1) * (m + 2) / 6\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5n_65_z.scala:23)\n\tat Problem.main(tmp_5n_65_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcof091n8.scala:28)\n\tat Problem.main(tmpcof091n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // (i, j, k) = (i, j, n -\
    \ i - j)\n        // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + (n -\
    \ i - j) * (n - i - j) - (n - i - j) + 1\n        // = i * i + j * j + (n - i\
    \ - j) * (n - i - j) + n - i - j\n        // = i * i + j * j + n * n - 2 * n *\
    \ i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n - i - j\n        // =\
    \ i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 *\
    \ j * n + n - i - j\n        // = i * i + j * j + n * n - 2 * n * i - 2 * n *\
    \ j + 2 * i * j + 2 * i * n - 2 * j * n + n - i - j\n        // = i * i + j *\
    \ j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n -\
    \ i - j\n        // = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i *\
    \ j + 2 * i * n - 2 * j * n + n - i - j\n        // = i * i + j * j + n * n -\
    \ 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n - i - j\n    \
    \    // = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i *\
    \ n - 2 * j * n + n - i - j\n        // = i * i + j * j + n * n - 2 * n * i -\
    \ 2 * n * j + 2 * i * j + 2 * i * n - 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw066dh44.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// (i,\
    \ j, k) = (i, j, n - i - j)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = i * i - i + 1 + j * j - j + 1 + (n - i - j) * (n - i - j) - (n - i\
    \ - j) + 1\e[0m\n\e[31m17 |\e[0m        \e[34m// = i * i + j * j + (n - i - j)\
    \ * (n - i - j) + n - i - j\e[0m\n\e[31m18 |\e[0m        \e[34m// = i * i + j\
    \ * j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n\
    \ - i - j\e[0m\n\e[31m19 |\e[0m        \e[34m// = i * i + j * j + n * n - 2 *\
    \ n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n - i - j\e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 *\
    \ i * j + 2 * i * n - 2 * j * n + n - i - j\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2\
    \ * j * n + n - i - j\e[0m\n\e[31m22 |\e[0m        \e[34m// = i * i + j * j +\
    \ n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n - i -\
    \ j\e[0m\n\e[31m23 |\e[0m        \e[34m// = i * i + j * j + n * n - 2 * n * i\
    \ - 2 * n * j + 2 * i * j + 2 * i * n - 2 * j * n + n - i - j\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i *\
    \ j + 2 * i * n - 2 * j * n + n - i - j\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ = i * i + j * j + n * n - 2 * n * i - 2 * n * j + 2 * i * j + 2 * i * n - 2\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        val b = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) b(i - 1) = a(i - 1) % 3\n        val c = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) c(i - 1) = b(i - 1) match {\n            case\
    \ 0 => 1\n            case 1 => 2\n            case 2 => 3\n        }\n      \
    \  var count = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- i\
    \ + 1 to n.toInt) {\n                for (k <- j + 1 to n.toInt) {\n         \
    \           if (c(i - 1) + c(j - 1) + c(k - 1) == 6) count += 1\n            \
    \    }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2z7v5yi6.scala:38)\n\tat Problem.main(tmp2z7v5yi6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsavckbd.scala:28)\n\tat Problem.main(tmplsavckbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n   \
    \         for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j +\
    \ 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8veaop7.scala:30)\n\tat Problem.main(tmpe8veaop7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n\
    \        // = i * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k)\
    \ * (i + j + k) - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1)\
    \ + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 3\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 3\n        // = (i + j + k) * (\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpagtuy2rd.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m20 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m21 |\e[0m       \
    \ \e[34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m22 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// =\
    \ (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// = (i\
    \ + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m26 |\e[0m        \e[34m// = (i +\
    \ j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = (i + j\
    \ + k) * (i + j + k - 1) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i + j +\
    \ k) * (i + j + k - 1) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) *\
    \ (i + j + k - 1) + 3\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i\
    \ + j + k - 1) + 3\e[0m\n\e[31m32 |\e[0m        \e[34m// = (i + j + k) * (i +\
    \ j + k - 1) + 3\e[0m\n\e[31m33 |\e[0m        \e[34m// = (i + j + k) * (i + j\
    \ + k - 1) + 3\e[0m\n\e[31m34 |\e[0m        \e[34m// = (i + j + k) * (i + j +\
    \ k - 1) + 3\e[0m\n\e[31m35 |\e[0m        \e[34m// = (i + j + k) * (i + j + k\
    \ - 1) + 3\e[0m\n\e[31m36 |\e[0m        \e[34m// = (i + j + k) * (\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error "
  stdout: ''
  timestamp: 1659798008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = n / 3\n        val\
    \ r = n % 3\n        if (r == 0) m * (m - 1) * (m - 2) / 6\n        else if (r\
    \ == 1) m * (m - 1) * (m + 1) / 6\n        else m * (m + 1) * (m + 2) / 6\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5n_65_z.scala:23)\n\tat Problem.main(tmp_5n_65_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsavckbd.scala:28)\n\tat Problem.main(tmplsavckbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0L)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        val s = new\
    \ Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) s(i - 1) = s(i - 2) +\
    \ a(i - 1)\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n  \
    \          for (j <- i + 1 to n.toInt - 2) {\n                if ((s(j) - s(i))\
    \ % 3 == 0) {\n                    val k = (s(j) - s(i)) / 3 + s(i)\n        \
    \            val index = binarySearch(s, k, j + 1, n.toInt - 1)\n            \
    \        if (index != -1) count += (n.toInt - index)\n                }\n    \
    \        }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rrheqlf.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mval\e[0m \e[36mindex\e[0m =\
    \ binarySearch(s, k, j + \e[31m1\e[0m, n.toInt - \e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              Not found: binarySearch\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcof091n8.scala:28)\n\tat Problem.main(tmpcof091n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsavckbd.scala:28)\n\tat Problem.main(tmplsavckbd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aqjnfr6.scala:28)\n\tat Problem.main(tmp3aqjnfr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798001
