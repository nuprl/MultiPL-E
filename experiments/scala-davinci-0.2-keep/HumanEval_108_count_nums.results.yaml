language: scala
name: HumanEval_108_count_nums
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => if (x < 0) -x else\
    \ x).map(x => x.toString.map(_.asDigit).sum).filter(_ > 0).size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5lw7waj.scala:16)\n\tat Problem.main(tmpb5lw7waj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            var sum = 0\n            var num = i\n            if\
    \ (num < 0) num = -num\n            while (num > 0) {\n                sum +=\
    \ num % 10\n                num /= 10\n            }\n            if (sum > 0)\
    \ count += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jd198l7.scala:18:20 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum += num % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659788888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(n => n.toString.map(c\
    \ => c.asDigit).sum > 0).size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6_m3utq.scala:16)\n\tat Problem.main(tmpo6_m3utq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            if (n < 0) -n else n\n        }\n        arr.map(sumDigits).filter(_\
    \ > 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqk2l0b6.scala:19)\n\tat Problem.main(tmpvqk2l0b6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        val sum = arr.map(x => abs(x).toString.map(_.asDigit).sum).filter(_\
    \ > 0).length\n        sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9l5t2qv6.scala:17)\n\tat Problem.main(tmp9l5t2qv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => abs(x)).map(x =>\
    \ x.toString.map(x => x.asDigit).sum).filter(x => x > 0).size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfcdpz_eo.scala:16)\n\tat Problem.main(tmpfcdpz_eo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => if (x < 0) -x else\
    \ x).map(x => x.toString.map(_.asDigit).sum).count(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2ekfa3l.scala:16)\n\tat Problem.main(tmpd2ekfa3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.map(sumDigits).filter(_ > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5t_7jui0.scala:25)\n\tat Problem.main(tmp5t_7jui0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = n\n            if (m < 0)\
    \ m = -m\n            while (m > 0) {\n                sum += m % 10\n       \
    \         m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctvvzv28.scala:26)\n\tat Problem.main(tmpctvvzv28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.count(x => x.toString.map(x\
    \ => x.asDigit).sum > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cxykalf.scala:16)\n\tat Problem.main(tmp9cxykalf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) {\n                var sum = 0\n         \
    \       var n = i\n                while (n > 0) {\n                    sum +=\
    \ n % 10\n                    n /= 10\n                }\n                if (sum\
    \ > 0) count += 1\n            } else {\n                var sum = 0\n       \
    \         var n = -i\n                while (n > 0) {\n                    sum\
    \ += n % 10\n                    n /= 10\n                }\n                if\
    \ (sum > 0) count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbqsx5mdv.scala:18:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    sum += n % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbqsx5mdv.scala:26:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    sum += n % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659788929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var m = n\n            var s = 0L\n            while (m !=\
    \ 0) {\n                s += m % 10\n                m /= 10\n            }\n\
    \            s\n        }\n        arr.filter(sumDigits(_) > 0).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbly5pikl.scala:29)\n\tat Problem.main(tmpbly5pikl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        return arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvtp5zt_r.scala:16)\n\tat Problem.main(tmpvtp5zt_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            var sum = 0\n            var n = i\n            if (n\
    \ < 0) n = -n\n            while (n > 0) {\n                sum += n % 10\n  \
    \              n /= 10\n            }\n            if (sum > 0) count += 1\n \
    \       }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmszlvjs7.scala:18:20 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum += n % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659788945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = n\n            if (m < 0)\
    \ m = -m\n            while (m > 0) {\n                sum += m % 10\n       \
    \         m /= 10\n            }\n            sum\n        }\n        arr.map(sumDigits).filter(_\
    \ > 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcyvxbtu9.scala:26)\n\tat Problem.main(tmpcyvxbtu9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var x = n\n            while (x !=\
    \ 0) {\n                sum += x % 10\n                x /= 10\n            }\n\
    \            sum\n        }\n        arr.filter(x => sumDigits(x) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso3lzfch.scala:29)\n\tat Problem.main(tmpso3lzfch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            if (n < 0) sum *= -1\n            sum\n        }\n       \
    \ arr.filter(sumDigits(_) > 0).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbbfvy6v.scala:30)\n\tat Problem.main(tmpvbbfvy6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(x : Long) : Long\
    \ = {\n            var sum = 0L\n            var x2 = x\n            if (x < 0)\
    \ x2 = -x\n            while (x2 > 0) {\n                sum += x2 % 10\n    \
    \            x2 /= 10\n            }\n            if (x < 0) sum = -sum\n    \
    \        sum\n        }\n        arr.map(sumDigits).filter(_ != 0).length\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8oyav97j.scala:27)\n\tat Problem.main(tmp8oyav97j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4j91c4jd.scala:24)\n\tat Problem.main(tmp4j91c4jd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var x = abs(n)\n            while\
    \ (x > 0) {\n                sum += x % 10\n                x /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxapfo73.scala:25)\n\tat Problem.main(tmpxxapfo73.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var m = n\n            var sum = 0L\n            while (m !=\
    \ 0) {\n                sum += m % 10\n                m /= 10\n            }\n\
    \            sum\n        }\n        arr.filter(x => sumDigits(x) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwpug7c1o.scala:29)\n\tat Problem.main(tmpwpug7c1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var m = abs(n)\n            var sum = 0L\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptd73qld1.scala:25)\n\tat Problem.main(tmptd73qld1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) {\n                var sum = 0\n         \
    \       var j = i\n                while (j > 0) {\n                    sum +=\
    \ j % 10\n                    j /= 10\n                }\n                if (sum\
    \ > 0) count += 1\n            } else {\n                var sum = 0\n       \
    \         var j = i\n                while (j < 0) {\n                    sum\
    \ += j % 10\n                    j /= 10\n                }\n                if\
    \ (sum < 0) count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc6mh8fpe.scala:18:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc6mh8fpe.scala:26:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659788981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) {\n                var sum = 0\n         \
    \       var j = i\n                while (j > 0) {\n                    sum +=\
    \ j % 10\n                    j /= 10\n                }\n                if (sum\
    \ > 0) count += 1\n            } else {\n                var sum = 0\n       \
    \         var j = -i\n                while (j > 0) {\n                    sum\
    \ += j % 10\n                    j /= 10\n                }\n                if\
    \ (sum > 0) count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfzmu6qa.scala:18:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvfzmu6qa.scala:26:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659788989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => if (x < 0) -x else\
    \ x).map(x => x.toString.map(_.asDigit).sum).count(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2ekfa3l.scala:16)\n\tat Problem.main(tmpd2ekfa3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.count(x => x.toString.map(_.asDigit).sum\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0l18qg81.scala:16)\n\tat Problem.main(tmp0l18qg81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => if (x < 0) -x else\
    \ x).map(x => x.toString.map(_.asDigit).sum).filter(_ > 0).size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5lw7waj.scala:16)\n\tat Problem.main(tmpb5lw7waj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) {\n                var sum = 0\n         \
    \       var j = i\n                while (j > 0) {\n                    sum +=\
    \ j % 10\n                    j /= 10\n                }\n                if (sum\
    \ > 0) count += 1\n            } else {\n                var sum = 0\n       \
    \         var j = -i\n                while (j > 0) {\n                    sum\
    \ += j % 10\n                    j /= 10\n                }\n                if\
    \ (sum > 0) count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvfzmu6qa.scala:18:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvfzmu6qa.scala:26:24 -------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    sum += j % \e[31m10\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659788989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        val sum = (arr.map(abs(_)).map(_.toString.map(_.asDigit.toLong).sum).filter(_\
    \ > 0)).length\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6yk_65_.scala:17)\n\tat Problem.main(tmpi6yk_65_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.map(x => if (x < 0) -x else\
    \ x).map(x => x.toString.map(_.asDigit).sum).count(_ > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2ekfa3l.scala:16)\n\tat Problem.main(tmpd2ekfa3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        def sumDigits(n : Long) : Long\
    \ = {\n            var sum = 0L\n            var m = abs(n)\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphce5i_b4.scala:25)\n\tat Problem.main(tmphce5i_b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(x\
    \ => x.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrjii4wu.scala:16)\n\tat Problem.main(tmpvrjii4wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>>\
    \ count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def\
    \ countNums(arr : List[Long]) : Long = {\n        arr.filter(x => x.toString.map(y\
    \ => y.asDigit).sum > 0).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajgl2o6.scala:16)\n\tat Problem.main(tmptajgl2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659788881
