name: HumanEval_132_is_nested
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a string as input which contains only square\
  \ brackets.\n    // The function should return True if and only if there is a valid\
  \ subsequence of brackets \n    // where at least one bracket in the subsequence\
  \ is nested.\n    // is_nested('[[]]') \u279E True\n    // is_nested('[]]]]]]][[[[[]')\
  \ \u279E False\n    // is_nested('[][]') \u279E False\n    // is_nested('[]') \u279E\
  \ False\n    // is_nested('[[][]]') \u279E True\n    // is_nested('[[]][[') \u279E\
  \ True\n    def isNested(string : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
  )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
  [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
  [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
  \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"))\
  \ == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
  [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
  \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
  ]]]]]]]]\")) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack[Char]\n        for (c <- string) {\n\
    \            if (c == '[') stack.push(c)\n            else if (c == ']') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = Stack[Char]()\n        for (c <- string) {\n            if (c\
    \ == '[') {\n                stack.push(c)\n            } else if (c == ']') {\n\
    \                if (stack.isEmpty) {\n                    return false\n    \
    \            } else {\n                    stack.pop\n                }\n    \
    \        }\n        }\n        if (stack.isEmpty) {\n            return false\n\
    \        } else {\n            return true\n        }", "        var stack = Stack[Char]()\n\
    \        for (ch <- string) {\n            if (ch == '[') stack.push(ch)\n   \
    \         else if (ch == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true\n        else\
    \ false", "        var stack = new Stack[Char]\n        for (c <- string) {\n\
    \            if (c == '[') {\n                stack.push(c)\n            } else\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]()\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push(string(i))\n            else if (string(i) ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                else\
    \ if (stack.top == '[') stack.pop\n                else return false\n       \
    \     }\n        }\n        if (stack.isEmpty) true else false", "        var\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        var\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        return true", "        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else {\n        \
    \        if (stack.isEmpty) {\n                    return false\n            \
    \    } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) return false\n     \
    \           if (stack.pop() != '[') return false\n            }\n        }\n \
    \       return stack.isEmpty", "        val stack = Stack[Char]()\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return true", "       \
    \ var stack = new Stack[Char]\n        for (c <- string) {\n            if (c\
    \ == '[') stack.push(c)\n            else if (c == ']') {\n                if\
    \ (stack.isEmpty) return false\n                stack.pop\n            }\n   \
    \     }\n        if (stack.isEmpty) true else false", "        var stack = new\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        val stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') stack.push(c)\n            else if (c == ']') {\n  \
    \              if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        val stack =\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else {\n                if (stack.isEmpty) return false\n                else\
    \ stack.pop\n            }\n        }\n        return stack.isEmpty", "      \
    \  var stack = new Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) return false\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        return\
    \ true", "        val stack = Stack[Char]()\n        for (c <- string) {\n   \
    \         if (c == '[') stack.push(c)\n            else if (c == ']') {\n    \
    \            if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) false else true", "    \
    \    val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        val stack = Stack[Char]()\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        var stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        val stack =\
    \ new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push(string(i))\n            else if (string(i) ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        val stack = Stack[Char]()\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) false else true", "    \
    \    val stack = Stack[Char]()\n        for (c <- string) {\n            if (c\
    \ == '[') stack.push(c)\n            else if (c == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) false else true", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        // Write your code here\n\
    \        return true", "        val stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) false else true", "    \
    \    var stack = new Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) return\
    \ false\n                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = Stack[Char]()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push(string(i))\n            else if (string(i) == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) true else false", "        val\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        var stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]()\n        for (c <-\
    \ string) {\n            if (c == '[') stack.push(c)\n            else if (c ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                else\
    \ stack.pop\n            }\n        }\n        return stack.isEmpty", "      \
    \  var stack = new Stack[Char]\n        for (c <- string) {\n            if (c\
    \ == '[') stack.push(c)\n            else if (c == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push(string(i))\n            else if (string(i) == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return true",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        // Write your code here\n        var stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (ch <- string) {\n            if (ch == '[') stack.push(ch)\n   \
    \         else if (ch == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        val stack = Stack[Char]()\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        var stack = new Stack[Char]()\n        for (c <-\
    \ string) {\n            if (c == '[') {\n                stack.push(c)\n    \
    \        } else if (c == ']') {\n                if (stack.isEmpty) {\n      \
    \              return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]\n        for (c <- string) {\n           \
    \ if (c == '[') {\n                stack.push(c)\n            } else {\n     \
    \           if (stack.isEmpty) return false\n                stack.pop\n     \
    \       }\n        }\n        return stack.isEmpty", "        var stack = new\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                stack.pop\n            }\n\
    \        }\n        stack.isEmpty", "        var stack = new Stack[Char]()\n \
    \       for (c <- string) {\n            if (c == '[') stack.push(c)\n       \
    \     else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        return\
    \ true", "        val stack = Stack[Char]()\n        for (c <- string) {\n   \
    \         if (c == '[') stack.push(c)\n            else if (c == ']') {\n    \
    \            if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                stack.pop\n            }\n\
    \        }\n        return true", "        val stack = Stack[Char]()\n       \
    \ for (c <- string) {\n            if (c == '[') stack.push(c)\n            else\
    \ if (c == ']') {\n                if (stack.isEmpty) return false\n         \
    \       else stack.pop\n            }\n        }\n        if (stack.isEmpty) false\
    \ else true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        val stack =\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                if (stack.pop() != '[') return false\n            }\n       \
    \ }\n        return stack.isEmpty", "        var stack = Stack[Char]()\n     \
    \   for (c <- string) {\n            if (c == '[') stack.push(c)\n           \
    \ else if (c == ']') {\n                if (stack.isEmpty) return false\n    \
    \            else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        val stack = Stack[Char]()\n        for (ch <- string) {\n  \
    \          if (ch == '[') stack.push(ch)\n            else if (ch == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) false else true", "    \
    \    var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        // Write your code here\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') {\n                stack.push(string(i))\n          \
    \  } else {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n        }\n        return stack.isEmpty", "        val\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) false else true", "        var stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        var stack = Stack[Char]()\n        for (char <- string)\
    \ {\n            if (char == '[') stack.push(char)\n            else if (char\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) return false\n\
    \        return true", "        var stack = new Stack[Char]()\n        for (c\
    \ <- string) {\n            if (c == '[') stack.push(c)\n            else if (c\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) true else\
    \ false", "        var stack = Stack[Char]()\n        for (c <- string) {\n  \
    \          if (c == '[') stack.push(c)\n            else if (c == ']') {\n   \
    \             if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = Stack[Char]()\n        for (i <- 0 until\
    \ string.length) {\n            val c = string(i)\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                if (stack.pop() != '[') return false\n            }\n       \
    \ }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n \
    \       for (c <- string) {\n            if (c == '[') stack.push(c)\n       \
    \     else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        var stack = new Stack[Char]\n \
    \       for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]()\n        for (c <- string) {\n         \
    \   if (c == '[') stack.push(c)\n            else if (c == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        return stack.isEmpty", "        var stack = new\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        val stack = Stack[Char]()\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        var stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) false else true", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        var\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        var stack = Stack[Char]()\n        for (c\
    \ <- string) {\n            if (c == '[') stack.push(c)\n            else if (c\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ {\n                stack.push(string(i))\n            } else {\n           \
    \     if (stack.isEmpty) {\n                    return false\n               \
    \ } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) return false\n     \
    \           stack.pop\n            }\n        }\n        return true", "     \
    \   var stack = new Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push(string(i))\n            else if (string(i) == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        return stack.isEmpty", "        val stack = new\
    \ Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n    \
    \            stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        var flag = false\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == '[') {\n                stack.push(string(i))\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \                   flag = true\n                }\n            }\n        }\n\
    \        return flag", "        // Write your code here\n        var stack = new\
    \ Stack[Char]()\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ == '[') stack.push(string(i))\n            else if (string(i) == ']') {\n  \
    \              if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        return\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') stack.push(c)\n            else if (c == ']') {\n  \
    \              if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = Stack[Char]()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push(string(i))\n            else if (string(i) == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) true else false", "        var\
    \ stack = new Stack[Char]()\n        for (c <- string) {\n            if (c ==\
    \ '[') {\n                stack.push(c)\n            } else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (char <- string) {\n       \
    \     if (char == '[') {\n                stack.push(char)\n            } else\
    \ if (char == ']') {\n                if (stack.isEmpty) {\n                 \
    \   return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]\n        for (c <- string) {\n           \
    \ if (c == '[') stack.push(c)\n            else if (c == ']') {\n            \
    \    if (stack.isEmpty) return false\n                else stack.pop\n       \
    \     }\n        }\n        if (stack.isEmpty) return false\n        return true",
  "        var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push(string(i))\n            else if\
    \ (string(i) == ']') {\n                if (stack.isEmpty) return false\n    \
    \            else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return true", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return true",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') {\n                stack.push(c)\n            } else\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                if (stack.pop() != '[') return false\n            }\n       \
    \ }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n \
    \       for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) false else true", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        val stack = Stack[Char]()\n        for (i\
    \ <- 0 until string.length) {\n            if (string(i) == '[') stack.push('[')\n\
    \            else if (string(i) == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) false else true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        var stack = new Stack[Char]\n \
    \       for (c <- string) {\n            if (c == '[') stack.push(c)\n       \
    \     else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (i <- 0\
    \ until string.length) {\n            if (string(i) == '[') {\n              \
    \  stack.push(string(i))\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty", "        val stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        val stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (char <- string) {\n            if (char == '[')\
    \ stack.push(char)\n            else if (char == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        var flag = false\n        for (i <-\
    \ 0 until string.length) {\n            if (string(i) == '[') stack.push(string(i))\n\
    \            else if (string(i) == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else if (stack.top == '[') {\n               \
    \     stack.pop\n                    flag = true\n                }\n        \
    \    }\n        }\n        return flag", "        var stack = new Stack[Char]()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push('[')\n            else if (string(i) == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) return false\n        return true", " \
    \       var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        val stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return false\n       \
    \         else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        // Write your code here\n\
    \        var stack = new Stack[Char]\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == '[') stack.push(string(i))\n            else\
    \ if (string(i) == ']') {\n                if (stack.isEmpty) return false\n \
    \               else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ false else true", "        var stack = new Stack[Char]()\n        for (i <-\
    \ 0 until string.length) {\n            if (string(i) == '[') stack.push('[')\n\
    \            else if (string(i) == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        var stack = Stack[Char]()\n        for (c\
    \ <- string) {\n            if (c == '[') stack.push(c)\n            else if (c\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) return\
    \ false\n        return true", "        val stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        if (stack.isEmpty) false\
    \ else true", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) false else true", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) true else false", "        val\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        var stack = Stack[Char]()\n        for (c\
    \ <- string) {\n            if (c == '[') {\n                stack.push(c)\n \
    \           } else if (c == ']') {\n                if (stack.isEmpty) {\n   \
    \                 return false\n                } else {\n                   \
    \ stack.pop\n                }\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push(string(i))\n            else if (string(i) == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) true else false", "        val\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        // Write your code here\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop()\n                }\n            }\n        }\n        return\
    \ stack.isEmpty", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push(string(i))\n            else if (string(i) ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                else\
    \ stack.pop\n            }\n        }\n        return true", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else {\n                if (stack.isEmpty) return false\n             \
    \   else stack.pop\n            }\n        }\n        return true", "        val\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        val stack = Stack[Char]()\n        for (c\
    \ <- string) {\n            if (c == '[') stack.push(c)\n            else if (c\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) false else\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') {\n                stack.push(c)\n            } else\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = Stack[Char]()\n        for (c <- string) {\n            if (c\
    \ == '[') stack.push(c)\n            else if (c == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty"]
stop_tokens:
- "\n    }\n"
