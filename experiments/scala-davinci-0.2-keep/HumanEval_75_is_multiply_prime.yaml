name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 =\
  \ 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.exists(p\
    \ => a % p == 0 && isMultiplyPrime(a / p))", "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j\
    \ <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = new ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 until primes.length) {\n            for (j <- i until primes.length) {\n\
    \                for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        val primeSet = primes.toSet\n        for (i <- primes) {\n          \
    \  for (j <- primes) {\n                for (k <- primes) {\n                \
    \    if (i * j * k == a) return true\n                }\n            }\n     \
    \   }\n        false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2 to a) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        for (i <- 0 to primes.length - 1) {\n      \
    \      for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(x\
    \ => a % x == 0)\n        primeFactors.length == 3", "        // Write your code\
    \ here\n        return false", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) return true\n         \
    \       }\n            }\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) true\n   \
    \         else if (n < 2 || n % 2 == 0) false\n            else !(3 to (sqrt(n).toInt\
    \ + 1) by 2).exists(n % _ == 0)\n        }\n        def helper(n : Long, primes\
    \ : List[Long]) : Boolean = {\n            if (primes.length == 3) true\n    \
    \        else if (n == 1) false\n            else if (n % primes.head == 0) helper(n\
    \ / primes.head, primes)\n            else helper(n, primes.tail)\n        }\n\
    \        helper(a, (2 to sqrt(a).toInt).filter(isPrime(_)).toList)", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.map(x => a % x == 0).reduceLeft(_\
    \ || _)", "        val primes = ArrayBuffer[Long]()\n        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            true\n        }\n        for (i <- 2 to a / 2) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var result = false\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i to primes.length - 1) {\n                for (k <- j to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) false\n            else if (n < 4) true\n\
    \            else if (n % 2 == 0) false\n            else if (n < 9) true\n  \
    \          else if (n % 3 == 0) false\n            else {\n                val\
    \ r = floor(sqrt(n)).toLong\n                var f = 5\n                while\
    \ (f <= r) {\n                    if (n % f == 0) return false\n             \
    \       if (n % (f + 2) == 0) return false\n                    f += 6\n     \
    \           }\n                true\n            }\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (primes.isEmpty)\
    \ false\n            else if (a % primes.head == 0) {\n                if (a /\
    \ primes.head == 1) true\n                else isMultiplyPrime(a / primes.head,\
    \ primes)\n            }\n            else isMultiplyPrime(a, primes.tail)\n \
    \       }\n        isMultiplyPrime(a, (2L to a).filter(isPrime(_)).toList)", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        val primeMap = primes.zipWithIndex.toMap\n        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a <= 1) false\n            else if (a == 2) true\n\
    \            else !(2 to (sqrt(a).toInt)).exists(x => a % x == 0)\n        }\n\
    \        def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean = {\n  \
    \          if (primes.isEmpty) false\n            else if (a % primes.head ==\
    \ 0) isMultiplyPrime(a / primes.head, primes)\n            else isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        isMultiplyPrime(a, primes)", "        // Write\
    \ your code here\n        return false", "        if (a == 1) return false\n \
    \       var b = a\n        var c = 2\n        while (b > 1) {\n            if\
    \ (b % c == 0) {\n                b /= c\n                if (isPrime(c)) {\n\
    \                    if (b == 1) return true\n                    else if (isPrime(b))\
    \ return true\n                    else return false\n                }\n    \
    \        }\n            else c += 1\n        }\n        return false", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val sqrt = sqrt(a).toLong\n        for (i <-\
    \ 2L to sqrt) {\n            if (isPrime(i) && a % i == 0) {\n               \
    \ val b = a / i\n                if (isPrime(b)) {\n                    val c\
    \ = b / i\n                    if (isPrime(c)) return true\n                }\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val primesMap\
    \ = primes.zipWithIndex.toMap\n        val primesCount = primes.length\n     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ def isMultiplyPrime(a : Long, primes : List[Long], primesSet : Set[Long], primesMap\
    \ : Map[Long, Int], primesCount : Int) : Boolean = {\n            if (a == 1)\
    \ return true\n            if (primesSet.contains(a)) return true\n          \
    \  for (i <- 0 until primesCount) {\n                val p = primes(i)\n     \
    \           if (a % p == 0) {\n                    if (isMultiplyPrime(a / p,\
    \ primes, primesSet, primesMap, primesCount)) return true\n                }\n\
    \            }\n            return false\n        }\n        isMultiplyPrime(a,\
    \ primes, primesSet, primesMap, primesCount)", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length)\
    \ {\n            if (a % primes(i) == 0) {\n                var b = a / primes(i)\n\
    \                var j = 0\n                while (j < primes.length) {\n    \
    \                if (b % primes(j) == 0) {\n                        var c = b\
    \ / primes(j)\n                        var k = 0\n                        while\
    \ (k < primes.length) {\n                            if (c % primes(k) == 0) {\n\
    \                                if (c / primes(k) == 1) return true\n       \
    \                     }\n                            k += 1\n                \
    \        }\n                    }\n                    j += 1\n              \
    \  }\n            }\n            i += 1\n        }\n        false", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n    \
    \    val primesList = primes.toList\n        val primesListLength = primesList.length\n\
    \        def isMultiplyPrimeHelper(a : Long, primesList : List[Int], primesSet\
    \ : Set[Int]) : Boolean = {\n            if (a == 1) return true\n           \
    \ if (primesSet.contains(a.toInt)) return true\n            for (i <- 0 until\
    \ primesListLength) {\n                val p = primesList(i)\n               \
    \ if (a % p == 0) {\n                    if (isMultiplyPrimeHelper(a / p, primesList,\
    \ primesSet)) return true\n                }\n            }\n            false\n\
    \        }\n        isMultiplyPrimeHelper(a, primesList, primesSet)", "      \
    \  val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length -\
    \ 1) {\n            for (j <- i + 1 to primes.length - 1) {\n                for\
    \ (k <- j + 1 to primes.length - 1) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        return false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n        }\n     \
    \   for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primeSet = primes.toSet\n        val primePairs = for\
    \ (i <- primes; j <- primes) yield (i, j)\n        val primeTriples = for (i <-\
    \ primes; j <- primes; k <- primes) yield (i, j, k)\n        val primePairsSet\
    \ = primePairs.toSet\n        val primeTriplesSet = primeTriples.toSet\n     \
    \   val primePairsProduct = primePairs.map(x => x._1 * x._2)\n        val primeTriplesProduct\
    \ = primeTriples.map(x => x._1 * x._2 * x._3)\n        val primePairsProductSet\
    \ = primePairsProduct.toSet\n        val primeTriplesProductSet = primeTriplesProduct.toSet\n\
    \        if (primePairsProductSet.contains(a)) true\n        else if (primeTriplesProductSet.contains(a))\
    \ true\n        else false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var i = 0\n        while (i < primes.length) {\n            if (a % primes(i)\
    \ == 0) {\n                val b = a / primes(i)\n                var j = 0\n\
    \                while (j < primes.length) {\n                    if (b % primes(j)\
    \ == 0) {\n                        val c = b / primes(j)\n                   \
    \     var k = 0\n                        while (k < primes.length) {\n       \
    \                     if (c % primes(k) == 0) {\n                            \
    \    if (c / primes(k) == 1) return true\n                            }\n    \
    \                        k += 1\n                        }\n                 \
    \   }\n                    j += 1\n                }\n            }\n        \
    \    i += 1\n        }\n        false", "        val primes = Array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- primes) {\n            for (j <- primes)\
    \ {\n                for (k <- primes) {\n                    if (i * j * k ==\
    \ a) return true\n                }\n            }\n        }\n        return\
    \ false", "        def isPrime(a : Long) : Boolean = {\n            if (a < 2)\
    \ return false\n            if (a == 2) return true\n            if (a % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(a).toInt by 2) {\n        \
    \        if (a % i == 0) return false\n            }\n            return true\n\
    \        }\n        if (a < 6) return false\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (isPrime(i) && a % i == 0) {\n                val b = a /\
    \ i\n                if (isPrime(b)) {\n                    for (j <- 2 to sqrt(b).toInt)\
    \ {\n                        if (isPrime(j) && b % j == 0) {\n               \
    \             val c = b / j\n                            if (isPrime(c)) return\
    \ true\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i + 1\
    \ until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        var primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        var result = false\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        val primeList = primes.toList\n        def isPrime(a : Long) : Boolean\
    \ = {\n            if (a < 2) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isMultiplyPrime(a : Long, primes :\
    \ List[Int]) : Boolean = {\n            if (a == 1) return true\n            if\
    \ (primes.isEmpty) return false\n            if (a % primes.head == 0) {\n   \
    \             if (isMultiplyPrime(a / primes.head, primes)) return true\n    \
    \        }\n            return isMultiplyPrime(a, primes.tail)\n        }\n  \
    \      return isMultiplyPrime(a, primeList)", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        primes.foreach(p => {\n            if (a % p == 0) {\n\
    \                val b = a / p\n                primes.foreach(q => {\n      \
    \              if (b % q == 0) {\n                        val c = b / q\n    \
    \                    if (primes.contains(c)) return true\n                   \
    \ }\n                })\n            }\n        })\n        false", "        var\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i\
    \ <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length -\
    \ 1) {\n                for (k <- j + 1 to primes.length - 1) {\n            \
    \        if (primes(i) * primes(j) * primes(k) == a) {\n                     \
    \   result = true\n                    }\n                }\n            }\n \
    \       }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) return true\n         \
    \       }\n            }\n        }\n        return false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n       \
    \     if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n           \
    \     val b = a / i\n                if (isPrime(i) && isPrime(b)) return true\n\
    \            }\n        }\n        return false", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i) && isPrime(a\
    \ / i)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        def isPrime(n : Long) : Boolean =\
    \ {\n            if (n == 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i))\
    \ {\n                    for (j <- 2 to sqrt(a / i).toInt) {\n               \
    \         if ((a / i) % j == 0) {\n                            if (isPrime(j))\
    \ return true\n                        }\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i to primes.length - 1) {\n                for (k <- j to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = getPrimes(a)\n\
    \        val primeFactors = getPrimeFactors(a, primes)\n        val primeFactorsCount\
    \ = primeFactors.length\n        if (primeFactorsCount < 3) return false\n   \
    \     val primeFactorsCombinations = getCombinations(primeFactors, 3)\n      \
    \  for (primeFactorsCombination <- primeFactorsCombinations) {\n            val\
    \ product = primeFactorsCombination.reduceLeft(_ * _)\n            if (product\
    \ == a) return true\n        }\n        return false", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) false\n            else if (n\
    \ == 2) true\n            else !(2 to (sqrt(n).toInt)).exists(x => n % x == 0)\n\
    \        }\n        def helper(n : Long, primes : List[Long]) : Boolean = {\n\
    \            if (n == 1) true\n            else if (n % primes.head == 0) helper(n\
    \ / primes.head, primes)\n            else helper(n, primes.tail)\n        }\n\
    \        helper(a, (2 to (sqrt(a).toInt)).filter(isPrime(_)).toList)", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3L to sqrtN by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var n = a\n        for (i <- 2L to a by 2)\
    \ {\n            if (isPrime(i) && n % i == 0) {\n                n /= i\n   \
    \             if (n == 1) return true\n            }\n        }\n        return\
    \ false", "        var primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt)\
    \ {\n            if (isPrime(i)) {\n                primes += i\n            }\n\
    \        }\n        var count = 0\n        for (i <- 0 until primes.length) {\n\
    \            if (a % primes(i) == 0) {\n                count += 1\n         \
    \   }\n        }\n        if (count == 3) {\n            return true\n       \
    \ }\n        return false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var i = 0\n        while (i < primes.length) {\n            if (a % primes(i)\
    \ == 0) {\n                var b = a / primes(i)\n                var j = 0\n\
    \                while (j < primes.length) {\n                    if (b % primes(j)\
    \ == 0) {\n                        var c = b / primes(j)\n                   \
    \     var k = 0\n                        while (k < primes.length) {\n       \
    \                     if (c % primes(k) == 0) {\n                            \
    \    if (c / primes(k) == 1) return true\n                            }\n    \
    \                        k += 1\n                        }\n                 \
    \   }\n                    j += 1\n                }\n            }\n        \
    \    i += 1\n        }\n        return false", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val factors = new ListBuffer[Long]\n        var i = 0\n\
    \        while (a > 1) {\n            if (a % primes(i) == 0) {\n            \
    \    factors += primes(i)\n                a /= primes(i)\n            }\n   \
    \         else i += 1\n        }\n        factors.length == 3", "        val primes\
    \ = (2 to 100).filter(isPrime(_)).toList\n        primes.exists(p => a % p ==\
    \ 0 && isMultiplyPrime(a / p))", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = new ListBuffer[Long]\n        var x = a\n        for (p\
    \ <- primes) {\n            while (x % p == 0) {\n                factors += p\n\
    \                x /= p\n            }\n        }\n        if (factors.size ==\
    \ 3) true else false", "        if (a < 6) return false\n        if (a % 2 ==\
    \ 0) return isMultiplyPrime(a / 2)\n        if (a % 3 == 0) return isMultiplyPrime(a\
    \ / 3)\n        if (a % 5 == 0) return isMultiplyPrime(a / 5)\n        return\
    \ true", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new\
    \ ListBuffer[Long]\n        var b = a\n        for (i <- primes) {\n         \
    \   while (b % i == 0) {\n                factors += i\n                b /= i\n\
    \            }\n        }\n        if (factors.length == 3) true else false",
  "        if (a < 2) return false\n        var primes = List[Long]()\n        for\
    \ (i <- 2L to a) {\n            if (isPrime(i)) primes = i :: primes\n       \
    \ }\n        primes.foreach(p => {\n            if (a % p == 0) {\n          \
    \      val b = a / p\n                if (isPrime(b)) {\n                    val\
    \ c = b / p\n                    if (isPrime(c)) return true\n               \
    \ }\n            }\n        })\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        primes.foreach(x => {\n            if (a % x == 0)\
    \ {\n                val b = a / x\n                primes.foreach(y => {\n  \
    \                  if (b % y == 0) {\n                        val c = b / y\n\
    \                        if (primes.contains(c)) return true\n               \
    \     }\n                })\n            }\n        })\n        false", "    \
    \    val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        return false", "        def isPrime(n : Long) : Boolean =\
    \ {\n            if (n == 1) false\n            else if (n < 4) true\n       \
    \     else if (n % 2 == 0) false\n            else if (n < 9) true\n         \
    \   else if (n % 3 == 0) false\n            else {\n                val r = floor(sqrt(n)).toLong\n\
    \                var f = 5\n                while (f <= r) {\n               \
    \     if (n % f == 0) return false\n                    if (n % (f + 2) == 0)\
    \ return false\n                    f += 6\n                }\n              \
    \  true\n            }\n        }\n        def isMultiplyPrime(a : Long, primes\
    \ : List[Long]) : Boolean = {\n            if (primes.isEmpty) false\n       \
    \     else if (a % primes.head == 0) {\n                val b = a / primes.head\n\
    \                if (isPrime(b)) true\n                else isMultiplyPrime(a,\
    \ primes.tail)\n            }\n            else isMultiplyPrime(a, primes.tail)\n\
    \        }\n        isMultiplyPrime(a, List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.filter(x => a % x == 0).length\
    \ == 3", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a)\
    \ {\n            if (isPrime(i)) {\n                primes += i\n            }\n\
    \        }\n        val primesSet = primes.toSet\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) {\n                        return true\n                 \
    \   }\n                }\n            }\n        }\n        return false", " \
    \       val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while\
    \ (i < primes.length) {\n            if (a % primes(i) == 0) {\n             \
    \   var b = a / primes(i)\n                var j = 0\n                while (j\
    \ < primes.length) {\n                    if (b % primes(j) == 0) {\n        \
    \                var c = b / primes(j)\n                        var k = 0\n  \
    \                      while (k < primes.length) {\n                         \
    \   if (c % primes(k) == 0) {\n                                return true\n \
    \                           }\n                            k += 1\n          \
    \              }\n                    }\n                    j += 1\n        \
    \        }\n            }\n            i += 1\n        }\n        return false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n           \
    \     if (isPrime(i) && isPrime(a / i)) {\n                    return true\n \
    \               }\n            }\n        }\n        return false", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        val primeFactors = ArrayBuffer[Long]()\n        for (i <- primes)\
    \ {\n            if (a % i == 0) primeFactors += i\n        }\n        if (primeFactors.length\
    \ == 3) return true\n        else return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n            for\
    \ (j <- i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       var b = a\n        var c = 0\n        while (b != 1) {\n            if\
    \ (isPrime(b)) {\n                c += 1\n                b = 1\n            }\
    \ else {\n                for (i <- 2 to b.toInt) {\n                    if (b\
    \ % i == 0) {\n                        b /= i\n                        c += 1\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        if (c == 3) true else false", "        var primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to\
    \ primes.length - 1) {\n            if (a % primes(i) == 0) {\n              \
    \  result = true\n                a /= primes(i)\n            }\n        }\n \
    \       result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        val\
    \ primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesMap = primes.map(x\
    \ => (x, true)).toMap\n        var aa = a\n        var result = true\n       \
    \ while (aa > 1 && result) {\n            val prime = primes.find(x => aa % x\
    \ == 0)\n            if (prime.isDefined) {\n                aa /= prime.get\n\
    \            } else {\n                result = false\n            }\n       \
    \ }\n        result", "        val primes = ArrayBuffer[Long]()\n        for (i\
    \ <- 2 to a) {\n            if (isPrime(i)) primes += i\n        }\n        for\
    \ (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new ArrayBuffer[Long]\n        var i = 0\n  \
    \      while (a > 1) {\n            if (a % primes(i) == 0) {\n              \
    \  factors += primes(i)\n                a /= primes(i)\n            }\n     \
    \       else i += 1\n        }\n        factors.length == 3", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        if (a == 1) return false\n        if (a == 2) return true\n        if (a\
    \ == 3) return true\n        if (a == 5) return true\n        if (a == 7) return\
    \ true\n        if (a == 11) return true\n        if (a == 13) return true\n \
    \       if (a == 17) return true\n        if (a == 19) return true\n        if\
    \ (a == 23) return true\n        if (a == 29) return true\n        if (a == 31)\
    \ return true\n        if (a == 37) return true\n        if (a == 41) return true\n\
    \        if (a == 43) return true\n        if (a == 47) return true\n        if\
    \ (a == 53) return true\n        if (a == 59) return true\n        if (a == 61)\
    \ return true\n        if (a == 67) return true\n        if (a == 71) return true\n\
    \        if (a == 73) return true\n        if (a == 79) return true\n        if\
    \ (a == 83) return true\n        if (a == 89) return true\n        if (a == 97)\
    \ return true\n        if (a % 2 == 0) return false\n        if (a % 3 == 0) return\
    \ false\n        if (a % 5 == 0) return false\n        if (a % 7 == 0) return\
    \ false\n        if (a % 11 == 0) return false\n        if (a % 13 == 0) return\
    \ false\n        if (a % 17 == 0) return false\n        if (a % 19 == 0) return\
    \ false\n        if (a % 23 == 0) return false\n        if (a % 29 == 0) return\
    \ false\n        if (a % 31 == 0) return false\n        if (a % 37 == 0) return\
    \ false\n        if (a % 41 == 0) return false\n        if (a % 43 == 0) return\
    \ false\n        if (a % 47 == 0) return false\n        if (a % 53 == 0) return\
    \ false\n        if (a % 59 == 0) return false\n        if (a % 61 == 0) return\
    \ false\n        if (a % 67 == 0) return false\n        if (a % 71 == 0) return\
    \ false\n        if (a % 73 == 0) return false", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n               \
    \ if (n % i == 0) return false\n            }\n            return true\n     \
    \   }\n        val sqrt = sqrt(a).toLong\n        for (i <- 2L to sqrt) {\n  \
    \          if (isPrime(i) && a % i == 0) {\n                val b = a / i\n  \
    \              if (isPrime(b)) {\n                    val c = b / i\n        \
    \            if (isPrime(c)) return true\n                }\n            }\n \
    \       }\n        return false", "        var primes = new ArrayBuffer[Long]()\n\
    \        for (i <- 2 to a) {\n            if (isPrime(i)) {\n                primes\
    \ += i\n            }\n        }\n        var result = false\n        for (i <-\
    \ 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length - 1)\
    \ {\n                for (k <- j + 1 to primes.length - 1) {\n               \
    \     if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        return result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeSet = primes.toSet\n        val primeSet2 = primes.map(x => x * x).toSet\n\
    \        val primeSet3 = primes.map(x => x * x * x).toSet\n        val primeSet4\
    \ = primes.map(x => x * x * x * x).toSet\n        val primeSet5 = primes.map(x\
    \ => x * x * x * x * x).toSet\n        val primeSet6 = primes.map(x => x * x *\
    \ x * x * x * x).toSet\n        val primeSet7 = primes.map(x => x * x * x * x\
    \ * x * x * x).toSet\n        val primeSet8 = primes.map(x => x * x * x * x *\
    \ x * x * x * x).toSet\n        val primeSet9 = primes.map(x => x * x * x * x\
    \ * x * x * x * x * x).toSet\n        val primeSet10 = primes.map(x => x * x *\
    \ x * x * x * x * x * x * x * x).toSet\n        val primeSet11 = primes.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x).toSet\n        val primeSet12\
    \ = primes.map(x => x * x * x * x * x * x * x * x * x * x * x * x).toSet\n   \
    \     val primeSet13 = primes.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x).toSet\n        val primeSet14 = primes.map(x => x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x).toSet\n        val primeSet15 = primes.map(x\
    \ => x * x * x * x * x * x * x", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      primes.foreach(p => {\n            if (a % p == 0) {\n                val\
    \ b = a / p\n                if (primes.contains(b)) {\n                    val\
    \ c = b / p\n                    if (primes.contains(c)) return true\n       \
    \         }\n            }\n        })\n        false", "        val primes =\
    \ Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n      \
    \      for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n            if (a % i\
    \ == 0) {\n                for (j <- primes) {\n                    if (a % j\
    \ == 0 && i != j) {\n                        for (k <- primes) {\n           \
    \                 if (a % k == 0 && i != k && j != k) {\n                    \
    \            return true\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \       return false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.size ==\
    \ 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <- i +\
    \ 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i to primes.length - 1) {\n                for\
    \ (k <- j to primes.length - 1) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        return false", "        def isPrime(n : Long) : Boolean = {\n       \
    \     if (n <= 1) return false\n            if (n == 2) return true\n        \
    \    if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n   \
    \         for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 2 to sqrt) {\n            if (isPrime(i) &&\
    \ a % i == 0) {\n                val b = a / i\n                if (isPrime(b))\
    \ {\n                    val c = b / i\n                    if (isPrime(c)) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n  \
    \      for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primeSet = primes.toSet\n        val primeList = primes.toList\n  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def isMultiplyPrime(a : Long, primes : List[Long])\
    \ : Boolean = {\n            if (a == 1) return true\n            if (primes.isEmpty)\
    \ return false\n            val prime = primes.head\n            if (a % prime\
    \ == 0) return isMultiplyPrime(a / prime, primes)\n            return isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        return isMultiplyPrime(a, primeList)", "  \
    \      var primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length) {\n  \
    \          if (a % primes(i) == 0) {\n                val b = a / primes(i)\n\
    \                if (primes.contains(b)) {\n                    val c = primes(i)\n\
    \                    return true\n                }\n            }\n         \
    \   i += 1\n        }\n        return false", "        def isPrime(a : Long) :\
    \ Boolean = {\n            if (a < 2) return false\n            if (a == 2) return\
    \ true\n            if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (isPrime(i) && a % i == 0) {\n                val b = a / i\n    \
    \            if (isPrime(b)) {\n                    for (j <- 2 to sqrt(b).toInt)\
    \ {\n                        if (isPrime(j) && b % j == 0) {\n               \
    \             val c = b / j\n                            if (isPrime(c)) return\
    \ true\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // Write your code\
    \ here\n        return false", "        val primes = ArrayBuffer[Long]()\n   \
    \     for (i <- 2 to a) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new ListBuffer[Long]\n        var i = 0\n   \
    \     while (a > 1) {\n            if (a % primes(i) == 0) {\n               \
    \ factors += primes(i)\n                a /= primes(i)\n            }\n      \
    \      else i += 1\n        }\n        factors.length == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- 0 until primes.length; j <- i + 1 until primes.length;\
    \ k <- j + 1 until primes.length) {\n            if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n        }\n        false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeFactors = ArrayBuffer[Long]()\n        var\
    \ i = 0\n        var aa = a\n        while (i < primes.length && aa > 1) {\n \
    \           if (aa % primes(i) == 0) {\n                primeFactors += primes(i)\n\
    \                aa /= primes(i)\n            }\n            else i += 1\n   \
    \     }\n        if (aa > 1) return false\n        if (primeFactors.length < 3)\
    \ return false\n        return true", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        val primeSet = primes.toSet\n        for (i <- primes) {\n    \
    \        for (j <- primes) {\n                if (primeSet.contains(a - i - j))\
    \ return true\n            }\n        }\n        false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        var\
    \ primes = new ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        var result = false\n  \
    \      for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) result = true\n       \
    \         }\n            }\n        }\n        result", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Long]\n      \
    \  var i = 0\n        var n = a\n        while (i < primes.length && n > 1) {\n\
    \            if (n % primes(i) == 0) {\n                factors += primes(i)\n\
    \                n /= primes(i)\n            }\n            else i += 1\n    \
    \    }\n        factors.length == 3", "        // Write your code here\n     \
    \   val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n        \
    \    if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        val factors = ArrayBuffer[Long]()\n\
    \        for (i <- primes) {\n            if (a % i == 0) factors += i\n     \
    \   }\n        factors.length == 3", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean =\
    \ {\n            if (primes.isEmpty) false\n            else if (a % primes.head\
    \ == 0) {\n                if (a / primes.head == 1) true\n                else\
    \ isMultiplyPrime(a / primes.head, primes)\n            }\n            else isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        isMultiplyPrime(a, primes)", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet\
    \ = primes.toSet\n        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n == 1) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        def isMultiplyPrime(a : Long, primes : List[Long])\
    \ : Boolean = {\n            if (primes.isEmpty) return false\n            val\
    \ p = primes.head\n            if (a % p == 0) {\n                if (a / p ==\
    \ 1) return true\n                else return isMultiplyPrime(a / p, primes)\n\
    \            }\n            else return isMultiplyPrime(a, primes.tail)\n    \
    \    }\n        return isMultiplyPrime(a, primes.toList)", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        primes.foreach(p => {\n            if (a % p == 0) {\n        \
    \        val b = a / p\n                primes.foreach(q => {\n              \
    \      if (b % q == 0) {\n                        val c = b / q\n            \
    \            if (primes.contains(c)) {\n                            return true\n\
    \                        }\n                    }\n                })\n      \
    \      }\n        })\n        false", "        val primes = Array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        primes.exists(p => a % p == 0 && isMultiplyPrime(a / p))",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n       \
    \     if (isPrime(i)) primes += i\n        }\n        var result = false\n   \
    \     for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result", "        val primes = ArrayBuffer[Long]()\n        for (i <-\
    \ 2 to a) {\n            if (isPrime(i)) primes += i\n        }\n        for (i\
    \ <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        var primes = new ArrayBuffer[Long]\n    \
    \    for (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        var result = false\n        for (i <- 0 to primes.length - 1)\
    \ {\n            for (j <- i + 1 to primes.length - 1) {\n                for\
    \ (k <- j + 1 to primes.length - 1) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) result = true\n                }\n            }\n        }\n\
    \        result", "        val primes = ArrayBuffer[Long]()\n        for (i <-\
    \ 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n      \
    \  for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        if (a == 1) return false\n \
    \       val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while\
    \ (i < primes.length) {\n            if (a % primes(i) == 0) {\n             \
    \   if (a / primes(i) == 1) return true\n                else return isMultiplyPrime(a\
    \ / primes(i))\n            }\n            i += 1\n        }\n        return false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n     \
    \       for (j <- primes) {\n                for (k <- primes) {\n           \
    \         if (i * j * k == a) return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to a) {\n            if (isPrime(i)) primes += i\n      \
    \  }\n        for (i <- primes) {\n            for (j <- primes) {\n         \
    \       for (k <- primes) {\n                    if (i * j * k == a) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n          \
    \  if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        var primes = new ArrayBuffer[Long]\n        for (i <- 2L to a) {\n    \
    \        if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        return false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) return true\n         \
    \       }\n            }\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result\
    \ = false\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) result\
    \ = true\n                }\n            }\n        }\n        result", "    \
    \    val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n     \
    \       if (a % i == 0) {\n                for (j <- primes) {\n             \
    \       if (a % j == 0 && i != j) {\n                        for (k <- primes)\
    \ {\n                            if (a % k == 0 && i != k && j != k) {\n     \
    \                           return true\n                            }\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return false", "        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primeSet = primes.toSet\n        val primeMap = primes.zipWithIndex.toMap\n\
    \        val primePairs = primes.combinations(2).map(x => (x(0), x(1))).toSet\n\
    \        val primeTriples = primes.combinations(3).map(x => (x(0), x(1), x(2))).toSet\n\
    \        def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3 to sqrtN by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def isPrimePair(n : Long) : Boolean = {\n  \
    \          if (n < 4) return false\n            if (n == 4) return true\n    \
    \        if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3 to sqrtN by 2) {\n                if (n % i == 0) {\n\
    \                    if (isPrime(i) && isPrime(n / i)) return true\n         \
    \       }\n            }\n            return false\n        }\n        def isPrimeTriple(n\
    \ : Long) : Boolean = {\n            if (n < 6) return false\n            if (n\
    \ == 6) return true\n            if (n % 2 == 0) return false\n            val\
    \ sqrtN = sqrt(n).toLong\n            for (i <- 3 to sqrtN by 2) {\n         \
    \       if (n % i == 0) {\n                    if (isPrimePair(n / i)) return\
    \ true\n                }\n            }\n            return false\n        }\n\
    \        if (a < 6) return false\n        if (a == 6) return true\n        if\
    \ (a % 2 == 0", "        var primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result\
    \ = false\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        // Write your code here\n\
    \        return false", "        var primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  var result = false\n        for (i <- 0 to primes.length - 1) {\n         \
    \   for (j <- i to primes.length - 1) {\n                for (k <- j to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        def isPrime(n : Long) : Boolean = {\n     \
    \       if (n == 1) return false\n            if (n == 2) return true\n      \
    \      if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isMultiplyPrime(a : Long, primes :\
    \ List[Long]) : Boolean = {\n            if (a == 1) return true\n           \
    \ if (primes.isEmpty) return false\n            if (a % primes.head == 0) return\
    \ isMultiplyPrime(a / primes.head, primes)\n            return isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        return isMultiplyPrime(a, primes)", "     \
    \   var result = false\n        var primes = new ArrayBuffer[Long]()\n       \
    \ for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n        }\n \
    \       for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) result = true\n                }\n\
    \            }\n        }\n        result", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to sqrt(a).toInt) {\n            if (isPrime(i)) {\n    \
    \            primes += i\n            }\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- primes)\
    \ {\n            for (j <- primes) {\n                for (k <- primes) {\n  \
    \                  if (i * j * k == a) return true\n                }\n      \
    \      }\n        }\n        return false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i +\
    \ 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i + 1 until primes.length) {\n                for (k <- j\
    \ + 1 until primes.length) {\n                    if (primes(i) * primes(j) *\
    \ primes(k) == a) return true\n                }\n            }\n        }\n \
    \       false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2\
    \ to 100) {\n            if (isPrime(i)) primes += i\n        }\n        for (i\
    \ <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        if (a < 6) return false\n        var primes = List[Long]()\n        for\
    \ (i <- 2L to a) {\n            if (isPrime(i)) primes = i :: primes\n       \
    \ }\n        for (i <- primes) {\n            for (j <- primes) {\n          \
    \      for (k <- primes) {\n                    if (i * j * k == a) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        for (i <- primes) {\n\
    \            for (j <- primes) {\n                for (k <- primes) {\n      \
    \              if (i * j * k == a) return true\n                }\n          \
    \  }\n        }\n        return false", "        val primes = Array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i <- 0\
    \ to primes.length - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n\
    \                for (k <- j + 1 to primes.length - 1) {\n                   \
    \ if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length -\
    \ 1) {\n                for (k <- j + 1 to primes.length - 1) {\n            \
    \        if (primes(i) * primes(j) * primes(k) == a) return true\n           \
    \     }\n            }\n        }\n        return false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n\
    \        for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      primes.foreach(p => if (a % p == 0) return true)\n        false", "   \
    \     val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        if (a == 1) return false\n        var b = a\n        var c = 2\n      \
    \  while (b > 1) {\n            if (b % c == 0) {\n                b /= c\n  \
    \              if (isPrime(c)) {\n                    if (isPrime(b)) return true\n\
    \                }\n                else return false\n            }\n       \
    \     else c += 1\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n    \
    \    primeFactors.length == 3", "        val primes = ArrayBuffer[Long]()\n  \
    \      for (i <- 2 to a) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        val primesSet = primes.toSet\n        for (i <- primes) {\n         \
    \   for (j <- primes) {\n                if (i * j == a) return true\n       \
    \         if (i * j > a) return false\n                if (primesSet.contains(a\
    \ / (i * j))) return true\n            }\n        }\n        false", "       \
    \ val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        def isMultiplyPrime(a : Long,\
    \ primes : List[Long]) : Boolean = {\n            if (primes.isEmpty) false\n\
    \            else if (a % primes.head == 0) {\n                if (a / primes.head\
    \ == 1) true\n                else isMultiplyPrime(a / primes.head, primes)\n\
    \            }\n            else isMultiplyPrime(a, primes.tail)\n        }\n\
    \        isMultiplyPrime(a, primes)", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to a) {\n            if (isPrime(i)) primes += i\n      \
    \  }\n        val primesSet = primes.toSet\n        for (i <- primes) {\n    \
    \        if (primesSet.contains(a / i)) {\n                for (j <- primes) {\n\
    \                    if (primesSet.contains(a / i / j)) return true\n        \
    \        }\n            }\n        }\n        false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val primesSet2\
    \ = primesSet.map(x => x * x)\n        val primesSet3 = primesSet.map(x => x *\
    \ x * x)\n        val primesSet4 = primesSet.map(x => x * x * x * x)\n       \
    \ val primesSet5 = primesSet.map(x => x * x * x * x * x)\n        val primesSet6\
    \ = primesSet.map(x => x * x * x * x * x * x)\n        val primesSet7 = primesSet.map(x\
    \ => x * x * x * x * x * x * x)\n        val primesSet8 = primesSet.map(x => x\
    \ * x * x * x * x * x * x * x)\n        val primesSet9 = primesSet.map(x => x\
    \ * x * x * x * x * x * x * x * x)\n        val primesSet10 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x)\n        val primesSet11 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x)\n        val primesSet12 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x)\n        val primesSet13 =\
    \ primesSet.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x)\n    \
    \    val primesSet14 = primesSet.map(x => x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x)\n        val primesSet15 = primesSet.map(x => x * x * x *\
    \ x * x *", "        var primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result\
    \ = false\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (primes.isEmpty)\
    \ return false\n            if (a % primes.head == 0) {\n                if (isMultiplyPrime(a\
    \ / primes.head, primes.tail)) return true\n                else return isMultiplyPrime(a,\
    \ primes.tail)\n            }\n            else return isMultiplyPrime(a, primes.tail)\n\
    \        }\n        return isMultiplyPrime(a, primes.toList)", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <- i +\
    \ 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i =\
    \ 0\n        while (i < primes.length) {\n            if (a % primes(i) == 0)\
    \ {\n                var b = a / primes(i)\n                var j = 0\n      \
    \          while (j < primes.length) {\n                    if (b % primes(j)\
    \ == 0) {\n                        var c = b / primes(j)\n                   \
    \     var k = 0\n                        while (k < primes.length) {\n       \
    \                     if (c % primes(k) == 0) {\n                            \
    \    if (c / primes(k) == 1) return true\n                            }\n    \
    \                        k += 1\n                        }\n                 \
    \   }\n                    j += 1\n                }\n            }\n        \
    \    i += 1\n        }\n        return false", "        if (a == 1) return false\n\
    \        var primes = List[Long]()\n        for (i <- 2 to a.toInt) {\n      \
    \      if (isPrime(i)) primes = i :: primes\n        }\n        primes.foreach(prime\
    \ => {\n            if (a % prime == 0) {\n                if (isMultiplyPrime(a\
    \ / prime)) return true\n            }\n        })\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a\
    \ % _ == 0)\n        factors.length == 3", "        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes_set = primes.toSet\n        val primes_map = primes.zipWithIndex.toMap\n\
    \        val primes_map_rev = primes.zipWithIndex.map(_.swap).toMap\n        val\
    \ primes_map_rev_set = primes_map_rev.keySet\n        val primes_map_rev_set_list\
    \ = primes_map_rev_set.toList\n        val primes_map_rev_set_list_sorted = primes_map_rev_set_list.sorted\n\
    \        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ def isMultiplyPrime(a : Long, primes : List[Int]) : Boolean = {\n          \
    \  if (primes.isEmpty) return false\n            val p = primes.head\n       \
    \     if (a % p == 0) {\n                val b = a / p\n                if (isPrime(b))\
    \ return true\n                else return isMultiplyPrime(b, primes)\n      \
    \      }\n            else return isMultiplyPrime(a, primes.tail)\n        }\n\
    \        return isMultiplyPrime(a, primes_map_rev_set_list_sorted)", "       \
    \ val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ArrayBuffer[Long]\n\
    \        var i = 0\n        while (i < primes.length && a > 1) {\n           \
    \ if (a % primes(i) == 0) {\n                factors += primes(i)\n          \
    \      a /= primes(i)\n            }\n            else i += 1\n        }\n   \
    \     if (factors.length == 3) true else false", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i) && isPrime(a\
    \ / i)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        def isPrime(n : Long) : Boolean =\
    \ {\n            if (n == 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i))\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n        return false", "        val primes = ArrayBuffer[Long]()\n    \
    \    for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        primes.exists(x => primes.exists(y => primes.exists(z => x * y * z ==\
    \ a)))", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        val primesSet\
    \ = primes.toSet\n        val primesSetSize = primesSet.size\n        for (i <-\
    \ 0 until primesSetSize) {\n            for (j <- i until primesSetSize) {\n \
    \               for (k <- j until primesSetSize) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        def isPrime(n : Long) : Boolean = {\n   \
    \         if (n < 2) return false\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        if (a < 6) return false\n        for (i\
    \ <- 2 to sqrt(a).toInt) {\n            if (isPrime(i) && a % i == 0) {\n    \
    \            val b = a / i\n                if (isPrime(b)) {\n              \
    \      for (j <- 2 to sqrt(b).toInt) {\n                        if (isPrime(j)\
    \ && b % j == 0) {\n                            val c = b / j\n              \
    \              if (isPrime(c)) return true\n                        }\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var i = 0\n        while (i < primes.length) {\n            if (a % primes(i)\
    \ == 0) {\n                val b = a / primes(i)\n                var j = 0\n\
    \                while (j < primes.length) {\n                    if (b % primes(j)\
    \ == 0) {\n                        val c = b / primes(j)\n                   \
    \     var k = 0\n                        while (k < primes.length) {\n       \
    \                     if (c % primes(k) == 0) {\n                            \
    \    if (c / primes(k) == 1) return true\n                            }\n    \
    \                        k += 1\n                        }\n                 \
    \   }\n                    j += 1\n                }\n            }\n        \
    \    i += 1\n        }\n        false", "        val primes = Array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new ArrayBuffer[Long]\n        var i = 0\n  \
    \      while (i < primes.length && a > 1) {\n            if (a % primes(i) ==\
    \ 0) {\n                factors += primes(i)\n                a /= primes(i)\n\
    \            }\n            else i += 1\n        }\n        if (factors.length\
    \ == 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i to primes.length\
    \ - 1) {\n                for (k <- j to primes.length - 1) {\n              \
    \      if (primes(i) * primes(j) * primes(k) == a) return true\n             \
    \   }\n            }\n        }\n        false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        def isPrime(a\
    \ : Long) : Boolean = {\n            if (a < 2) return false\n            if (a\
    \ == 2) return true\n            if (a % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) return false\n\
    \            }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (primes.isEmpty)\
    \ return false\n            val p = primes.head\n            if (a % p == 0) {\n\
    \                if (a / p == 1) return true\n                else return isMultiplyPrime(a\
    \ / p, primes)\n            }\n            else return isMultiplyPrime(a, primes.tail)\n\
    \        }\n        return isMultiplyPrime(a, primes.toList)", "        var primes\
    \ = List[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i)) primes\
    \ = i :: primes\n        }\n        for (i <- primes) {\n            for (j <-\
    \ primes) {\n                for (k <- primes) {\n                    if (i *\
    \ j * k == a) return true\n                }\n            }\n        }\n     \
    \   return false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for\
    \ (i <- 0 to primes.length - 1) {\n            for (j <- i to primes.length -\
    \ 1) {\n                for (k <- j to primes.length - 1) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 to primes.length - 1) {\n            for\
    \ (j <- i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        if (a == 1) return false\n        for\
    \ (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n               \
    \ if (isPrime(i) && isPrime(a / i)) return true\n            }\n        }\n  \
    \      return false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n    \
    \            if (isPrime(i) && isPrime(a / i)) {\n                    for (j <-\
    \ 2 to sqrt(a / i).toInt) {\n                        if ((a / i) % j == 0) {\n\
    \                            if (isPrime(j)) return true\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        return false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n        }\n     \
    \   for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        primes.foreach(p => {\n            if (a % p == 0) {\n\
    \                val b = a / p\n                primes.foreach(p2 => {\n     \
    \               if (b % p2 == 0) {\n                        val c = b / p2\n \
    \                       primes.foreach(p3 => {\n                            if\
    \ (c % p3 == 0) {\n                                val d = c / p3\n          \
    \                      if (d == 1) return true\n                            }\n\
    \                        })\n                    }\n                })\n     \
    \       }\n        })\n        false", "        def isPrime(a : Long) : Boolean\
    \ = {\n            if (a == 2) return true\n            if (a % 2 == 0) return\
    \ false\n            for (i <- 3 to sqrt(a).toInt by 2) {\n                if\
    \ (a % i == 0) return false\n            }\n            return true\n        }\n\
    \        if (a == 1) return false\n        if (a == 2) return true\n        if\
    \ (a % 2 == 0) {\n            if (isPrime(a / 2)) return true\n            for\
    \ (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) {\n      \
    \              if (isPrime(a / i)) return true\n                }\n          \
    \  }\n        }\n        else {\n            for (i <- 3 to sqrt(a).toInt by 2)\
    \ {\n                if (a % i == 0) {\n                    if (isPrime(a / i))\
    \ return true\n                }\n            }\n        }\n        return false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a <= 1) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            val limit\
    \ = sqrt(a).toLong\n            for (i <- 3 to limit by 2) {\n               \
    \ if (a % i == 0) return false\n            }\n            return true\n     \
    \   }\n        if (a <= 1) return false\n        if (a == 2) return true\n   \
    \     if (a % 2 == 0) return false\n        val limit = sqrt(a).toLong\n     \
    \   for (i <- 3 to limit by 2) {\n            if (a % i == 0) {\n            \
    \    if (isPrime(i) && isPrime(a / i)) return true\n            }\n        }\n\
    \        return false"]
stop_tokens:
- "\n    }\n"
