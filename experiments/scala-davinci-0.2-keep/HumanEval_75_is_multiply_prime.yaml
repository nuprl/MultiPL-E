name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 =\
  \ 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.exists(p\
    \ => a % p == 0 && isMultiplyPrime(a / p))", "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j\
    \ <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = new ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 until primes.length) {\n            for (j <- i until primes.length) {\n\
    \                for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        val primeSet = primes.toSet\n        for (i <- primes) {\n          \
    \  for (j <- primes) {\n                for (k <- primes) {\n                \
    \    if (i * j * k == a) return true\n                }\n            }\n     \
    \   }\n        false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2 to a) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        for (i <- 0 to primes.length - 1) {\n      \
    \      for (j <- i + 1 to primes.length - 1) {\n                for (k <- j +\
    \ 1 to primes.length - 1) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(x\
    \ => a % x == 0)\n        primeFactors.length == 3", "        // Write your code\
    \ here\n        return false", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) return true\n         \
    \       }\n            }\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) true\n   \
    \         else if (n < 2 || n % 2 == 0) false\n            else !(3 to (sqrt(n).toInt\
    \ + 1) by 2).exists(n % _ == 0)\n        }\n        def helper(n : Long, primes\
    \ : List[Long]) : Boolean = {\n            if (primes.length == 3) true\n    \
    \        else if (n == 1) false\n            else if (n % primes.head == 0) helper(n\
    \ / primes.head, primes)\n            else helper(n, primes.tail)\n        }\n\
    \        helper(a, (2 to sqrt(a).toInt).filter(isPrime(_)).toList)", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.map(x => a % x == 0).reduceLeft(_\
    \ || _)", "        val primes = ArrayBuffer[Long]()\n        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            true\n        }\n        for (i <- 2 to a / 2) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var result = false\n        for (i <- 0 to primes.length - 1) {\n     \
    \       for (j <- i to primes.length - 1) {\n                for (k <- j to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) false\n            else if (n < 4) true\n\
    \            else if (n % 2 == 0) false\n            else if (n < 9) true\n  \
    \          else if (n % 3 == 0) false\n            else {\n                val\
    \ r = floor(sqrt(n)).toLong\n                var f = 5\n                while\
    \ (f <= r) {\n                    if (n % f == 0) return false\n             \
    \       if (n % (f + 2) == 0) return false\n                    f += 6\n     \
    \           }\n                true\n            }\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (primes.isEmpty)\
    \ false\n            else if (a % primes.head == 0) {\n                if (a /\
    \ primes.head == 1) true\n                else isMultiplyPrime(a / primes.head,\
    \ primes)\n            }\n            else isMultiplyPrime(a, primes.tail)\n \
    \       }\n        isMultiplyPrime(a, (2L to a).filter(isPrime(_)).toList)", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        val primeMap = primes.zipWithIndex.toMap\n        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a <= 1) false\n            else if (a == 2) true\n\
    \            else !(2 to (sqrt(a).toInt)).exists(x => a % x == 0)\n        }\n\
    \        def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean = {\n  \
    \          if (primes.isEmpty) false\n            else if (a % primes.head ==\
    \ 0) isMultiplyPrime(a / primes.head, primes)\n            else isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        isMultiplyPrime(a, primes)", "        // Write\
    \ your code here\n        return false", "        if (a == 1) return false\n \
    \       var b = a\n        var c = 2\n        while (b > 1) {\n            if\
    \ (b % c == 0) {\n                b /= c\n                if (isPrime(c)) {\n\
    \                    if (b == 1) return true\n                    else if (isPrime(b))\
    \ return true\n                    else return false\n                }\n    \
    \        }\n            else c += 1\n        }\n        return false", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val sqrt = sqrt(a).toLong\n        for (i <-\
    \ 2L to sqrt) {\n            if (isPrime(i) && a % i == 0) {\n               \
    \ val b = a / i\n                if (isPrime(b)) {\n                    val c\
    \ = b / i\n                    if (isPrime(c)) return true\n                }\n\
    \            }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
