name: HumanEval_39_prime_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
  \    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n    // 3\n    // >>>\
  \ prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n    // >>> prime_fib(5)\n\
  \    // 89\n    def primeFib(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) ==\
  \ (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n\
  \    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n  \
  \  assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n \
  \   assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n\
  \    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"
completions: ["        var i = 1; var j = 1; var k = 1; var count = 0\n        while\
    \ (count < n) {\n            k = i + j; i = j; j = k\n            if (isPrime(k))\
    \ count += 1\n        }\n        k", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3;\n        var i = 2;\n        while (fib.length <\
    \ n) {\n            fib += fib(i - 1) + fib(i - 2);\n            i += 1;\n   \
    \     }\n        return fib(n.toInt - 1);", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3;\n        var i = 2;\n        while (fibs.length\
    \ < n) {\n            val next = fibs(i - 1) + fibs(i - 2);\n            if (isPrime(next))\
    \ fibs += next;\n            i += 1;\n        }\n        fibs(n.toInt - 1);",
  "        def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i\
    \ == 0) return false\n            }\n            return true\n        }\n    \
    \    def fib(n : Long) : Long = {\n            if (n == 1) return 1\n        \
    \    if (n == 2) return 2\n            return fib(n - 1) + fib(n - 2)\n      \
    \  }\n        var i = 1L\n        var count = 0L\n        while (count < n) {\n\
    \            i += 1\n            if (isPrime(fib(i))) count += 1\n        }\n\
    \        return fib(i)", "        var fib = new Fibonacci\n        var count =\
    \ 0L\n        var result = 0L\n        while (count < n) {\n            result\
    \ = fib.next\n            if (isPrime(result)) count += 1\n        }\n       \
    \ return result", "        var fibs = new ArrayBuffer[Long]()\n        fibs +=\
    \ 2\n        fibs += 3\n        var i = 2\n        while (fibs.length < n) {\n\
    \            val fib = fibs(i - 1) + fibs(i - 2)\n            if (isPrime(fib))\
    \ fibs += fib\n            i += 1\n        }\n        fibs(n - 1)", "        val\
    \ primes = new PrimeSet(1000000)\n        var i = 1\n        var count = 0\n \
    \       while (count < n) {\n            i += 1\n            if (primes.isPrime(i)\
    \ && primes.isPrime(fib(i))) {\n                count += 1\n            }\n  \
    \      }\n        fib(i)", "        var fib = new ArrayBuffer[Long]();\n     \
    \   fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n\
    \        while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n     \
    \       if (isPrime(f)) {\n                fib += f;\n                i += 1;\n\
    \            }\n        }\n        return fib(n.toInt - 1);", "        var fib\
    \ = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i\
    \ = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            if (fib(i) % 2 == 0) {\n                fib(i) = fib(i) + 1\n   \
    \         }\n            while (!isPrime(fib(i))) {\n                fib(i) =\
    \ fib(i) + 2\n            }\n            i += 1\n        }\n        return fib(n\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n    \
    \    fibs += 3\n        var i = 2\n        while (i <= n) {\n            fibs\
    \ += fibs(i - 1) + fibs(i - 2)\n            if (fibs(i) % 2 == 0) {\n        \
    \        fibs(i) += 1\n            }\n            while (!isPrime(fibs(i))) {\n\
    \                fibs(i) += 2\n            }\n            i += 1\n        }\n\
    \        fibs(n.toInt - 1)", "        var fibs = new ArrayBuffer[Long]();\n  \
    \      fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs\
    \ += 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs +=\
    \ 610; fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs\
    \ += 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs +=\
    \ 121393; fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs\
    \ += 1346269; fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465;\
    \ fibs += 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs\
    \ += 102334155; fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs\
    \ += 701408733; fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs\
    \ += 4807526976L; fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L;\
    \ fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L;\
    \ fibs += 225851433717L; fibs += 365435296162L; fibs += 591286729879L; fibs +=\
    \ 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L;\
    \ fibs += 6557470319842L; fibs += 10610209857723L; fibs += 17167680177565L; fibs\
    \ += 27777890035288L; fibs += 44945570212853L;", "        var count = 0\n    \
    \    var fib = 2L\n        var fib1 = 1L\n        var fib2 = 2L\n        while\
    \ (count < n) {\n            fib = fib1 + fib2\n            fib1 = fib2\n    \
    \        fib2 = fib\n            if (isPrime(fib)) {\n                count +=\
    \ 1\n            }\n        }\n        return fib", "        var i = 1; var j\
    \ = 2; var k = 3; var count = 2\n        while (count < n) {\n            i =\
    \ j; j = k; k = i + j\n            if (isPrime(k)) count += 1\n        }\n   \
    \     k", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fibs = new ArrayBuffer[Long]();\n       \
    \ fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs +=\
    \ 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610;\
    \ fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs +=\
    \ 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393;\
    \ fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        def isPrime(n : Long) : Boolean = {\n       \
    \     if (n < 2) return false\n            if (n == 2) return true\n         \
    \   if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var i = 1\n        var j = 1\n        var\
    \ k = 0\n        var count = 0\n        while (count < n) {\n            k = i\
    \ + j\n            if (isPrime(k)) count += 1\n            i = j\n           \
    \ j = k\n        }\n        return k", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8;\n        var i = 4;\n   \
    \     while (i < n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n      \
    \      i += 1;\n        }\n        return fibs(n.toInt - 1);", "        var fibs\
    \ = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs += 5; fibs +=\
    \ 8;\n        var i = 4;\n        while (i < n) {\n            fibs += fibs(i\
    \ - 1) + fibs(i - 2);\n            i += 1;\n        }\n        return fibs(n.toInt\
    \ - 1);", "        var fib = new Fibonacci()\n        var count = 0L\n       \
    \ var num = 0L\n        while (count < n) {\n            num = fib.next\n    \
    \        if (isPrime(num)) count += 1\n        }\n        return num", "     \
    \   var i = 1L\n        var j = 1L\n        var k = 1L\n        var count = 0L\n\
    \        while (count < n) {\n            k = i + j\n            if (isPrime(k))\
    \ count += 1\n            i = j\n            j = k\n        }\n        k", " \
    \       var i = 0\n        var f = 0L\n        var p = 0L\n        while (i <\
    \ n) {\n            f = fib(f, p)\n            if (isPrime(f)) i += 1\n      \
    \      p = f\n        }\n        f", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var i = 1\n        var count = 0\n   \
    \     var fib = 2L\n        while (count < n) {\n            if (isPrime(fib))\
    \ count += 1\n            i += 1\n            fib = fibonacci(i)\n        }\n\
    \        return fib", "        var fib = new Fibonacci()\n        var i = 0\n\
    \        var result = 0L\n        while (i < n) {\n            result = fib.next\n\
    \            if (isPrime(result)) i += 1\n        }\n        return result", " \
    \       var i = 1L\n        var j = 1L\n        var k = 2L\n        var count\
    \ = 0L\n        while (count < n) {\n            if (isPrime(k)) {\n         \
    \       count += 1\n            }\n            val t = i + j\n            i =\
    \ j\n            j = k\n            k = t\n        }\n        k", "        var\
    \ fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var\
    \ i = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            if (fib(i) % 2 == 0) {\n                fib.remove(i)\n         \
    \   } else {\n                i += 1\n            }\n        }\n        fib(n\
    \ - 1)", "        var fib = new ArrayBuffer[Long]();\n        fib += 2; fib +=\
    \ 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n        while (i < n)\
    \ {\n            var j = fib(i - 1) + fib(i - 2);\n            while (!isPrime(j))\
    \ {\n                j += 1;\n            }\n            fib += j;\n         \
    \   i += 1;\n        }\n        return fib(n.toInt - 1);", "        var fib =\
    \ new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i =\
    \ 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n  \
    \          if (fib(i).isPrime) i += 1\n        }\n        fib(n - 1)", "     \
    \   var fibs = new ArrayBuffer[Long]()\n        fibs += 1\n        fibs += 2\n\
    \        var i = 2\n        while (i <= n) {\n            fibs += fibs(i - 1)\
    \ + fibs(i - 2)\n            i += 1\n        }\n        return fibs(n - 1)", " \
    \       var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n\
    \        var i = 2\n        while (fib.length < n) {\n            fib += fib(i\
    \ - 1) + fib(i - 2)\n            i += 1\n        }\n        fib(n.toInt - 1)",
  "        val primes = new PrimeSet(1000000)\n        var fib = new Fibonacci(1000000)\n\
    \        var count = 0\n        var result = 0L\n        while (count < n) {\n\
    \            val f = fib.next\n            if (primes.contains(f)) {\n       \
    \         count += 1\n                result = f\n            }\n        }\n \
    \       result", "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n\
    \        fib += 3\n        var i = 2\n        while (fib.size < n) {\n       \
    \     fib += fib(i - 1) + fib(i - 2)\n            i += 1\n        }\n        fib(n.toInt\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fib = new ArrayBuffer[Long]();\n        fib\
    \ += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n      \
    \  while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n           \
    \ if (isPrime(f)) {\n                fib += f;\n                i += 1;\n    \
    \        }\n        }\n        return fib(n.toInt - 1);", "        var i = 1;\
    \ var j = 1; var k = 1; var count = 0\n        while (count < n) {\n         \
    \   val t = i + j\n            i = j; j = t\n            if (isPrime(t)) {\n \
    \               count += 1\n                k = t\n            }\n        }\n\
    \        k", "        var i = 1L\n        var j = 1L\n        var k = 2L\n   \
    \     var count = 1L\n        while (count < n) {\n            i = j\n       \
    \     j = k\n            k = i + j\n            if (isPrime(k)) count += 1\n \
    \       }\n        k", "        var count = 0L\n        var i = 0L\n        while\
    \ (count < n) {\n            i += 1\n            if (isPrime(i) && isFib(i)) count\
    \ += 1\n        }\n        return i", "        var fib = new Fibonacci\n     \
    \   var count = 0\n        var result = 0L\n        while (count < n) {\n    \
    \        result = fib.next\n            if (isPrime(result)) count += 1\n    \
    \    }\n        return result", "        var count = 0L\n        var i = 1L\n\
    \        while (count < n) {\n            if (isPrime(fib(i))) count += 1\n  \
    \          i += 1\n        }\n        fib(i - 1)", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs\
    \ += 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs +=\
    \ 610; fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs\
    \ += 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs +=\
    \ 121393; fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs\
    \ += 1346269; fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465;\
    \ fibs += 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs\
    \ += 102334155; fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs\
    \ += 701408733; fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs\
    \ += 4807526976L; fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L;\
    \ fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L;\
    \ fibs += 225851433717L; fibs += 365435296162L; fibs += 591286729879L; fibs +=\
    \ 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L;\
    \ fibs += 6557470319842L; fibs += 10610209857723L; fibs += 17167680177565L; fibs\
    \ += 27777890035288L; fibs += 44945570212853L;", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fibs = new ArrayBuffer[Long]()\n\
    \        fibs += 2\n        fibs += 3\n        var i = 2\n        while (i <=\
    \ n) {\n            val fib = fibs(i - 1) + fibs(i - 2)\n            if (isPrime(fib))\
    \ {\n                fibs += fib\n                i += 1\n            }\n    \
    \    }\n        fibs(n - 1)", "        val primes = new PrimeSet(1000000)\n  \
    \      var i = 1\n        var count = 0\n        while (count < n) {\n       \
    \     i += 1\n            if (primes.isPrime(i) && primes.isPrime(i + 2)) count\
    \ += 1\n        }\n        i", "        var fib = new ArrayBuffer[Long]();\n \
    \       fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n\
    \        while (fib.length < n) {\n            var f = fib(i - 1) + fib(i - 2);\n\
    \            if (f.isProbablePrime(10)) {\n                fib += f;\n       \
    \         i += 1;\n            }\n        }\n        return fib(n - 1);", "  \
    \      var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs +=\
    \ 3\n        var i = 2\n        while (i <= n) {\n            val next = fibs(i\
    \ - 1) + fibs(i - 2)\n            if (isPrime(next)) {\n                fibs +=\
    \ next\n                i += 1\n            }\n        }\n        fibs(n - 1)",
  "        var fib = new ArrayBuffer[Long]();\n        fib += 2; fib += 3; fib +=\
    \ 5; fib += 13; fib += 89;\n        var i = 5;\n        while (i < n) {\n    \
    \        var j = fib(i - 1) + fib(i - 2);\n            while (!isPrime(j)) {\n\
    \                j += fib(i - 1);\n            }\n            fib += j;\n    \
    \        i += 1;\n        }\n        return fib(n.toInt - 1);", "        var count\
    \ = 0L\n        var i = 1L\n        var fib = fibonacci(i)\n        while (count\
    \ < n) {\n            if (isPrime(fib)) count += 1\n            i += 1\n     \
    \       fib = fibonacci(i)\n        }\n        fib", "        var count = 0L\n\
    \        var i = 1L\n        while (count < n) {\n            if (isPrime(i) &&\
    \ isFib(i)) {\n                count += 1\n                if (count == n) return\
    \ i\n            }\n            i += 1\n        }\n        return -1", "     \
    \   var i = 0\n        var j = 1\n        var k = 0\n        var count = 0\n \
    \       while (count < n) {\n            k = i + j\n            if (isPrime(k))\
    \ count += 1\n            i = j\n            j = k\n        }\n        return\
    \ k", "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib\
    \ += 3\n        var i = 2\n        while (i <= n) {\n            fib += fib(i\
    \ - 1) + fib(i - 2)\n            if (isPrime(fib(i))) i += 1\n        }\n    \
    \    fib(n - 1)", "        var count = 0L\n        var i = 1L\n        var fib\
    \ = 1L\n        while (count < n) {\n            fib = fibonacci(i)\n        \
    \    if (isPrime(fib)) count += 1\n            i += 1\n        }\n        fib",
  "        var fib = new Fibonacci()\n        var count = 0\n        var result =\
    \ 0\n        while (count < n) {\n            result = fib.next\n            if\
    \ (isPrime(result)) count += 1\n        }\n        return result", "        var\
    \ count = 0L\n        var i = 1L\n        while (count < n) {\n            if\
    \ (isPrime(fib(i))) count += 1\n            i += 1\n        }\n        fib(i -\
    \ 1)", "        var count = 0L\n        var i = 1L\n        var fib = 1L\n   \
    \     while (count < n) {\n            if (isPrime(fib)) count += 1\n        \
    \    i += 1\n            fib = fibonacci(i)\n        }\n        fib", "      \
    \  var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs +=\
    \ 5; fibs += 8;\n        var i = 4;\n        var p = 13L;\n        while (i <\
    \ n) {\n            p += fibs(i - 2);\n            if (p.isPrime) {\n        \
    \        fibs += p;\n                i += 1;\n            }\n        }\n     \
    \   return fibs(n - 1);", "        var fib = new ArrayBuffer[Long]();\n      \
    \  fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n \
    \       while (fib.length < n) {\n            var x = fib(i - 1) + fib(i - 2);\n\
    \            if (isPrime(x)) {\n                fib += x;\n                i +=\
    \ 1;\n            }\n        }\n        return fib(n - 1);", "        var fibs\
    \ = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs += 3\n        var\
    \ i = 2\n        while (i <= n) {\n            val next = fibs(i - 1) + fibs(i\
    \ - 2)\n            if (isPrime(next)) {\n                fibs += next\n     \
    \           i += 1\n            }\n        }\n        fibs(n - 1)", "        var\
    \ fibs = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs += 3\n     \
    \   var i = 2\n        while (fibs.length < n) {\n            fibs += fibs(i -\
    \ 1) + fibs(i - 2)\n            i += 1\n        }\n        fibs(n.toInt - 1)",
  "        var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs +=\
    \ 3\n        var i = 2\n        while (i <= n) {\n            val next = fibs(i\
    \ - 1) + fibs(i - 2)\n            if (isPrime(next)) {\n                fibs +=\
    \ next\n                i += 1\n            }\n        }\n        fibs(n - 1)",
  "        var a = 2L; var b = 3L; var c = 5L; var i = 3L\n        while (i < n) {\n\
    \            a = b; b = c; c = a + b\n            if (isPrime(c)) i += 1\n   \
    \     }\n        c", "        var fibs = new ArrayBuffer[Long]()\n        fibs\
    \ += 2\n        fibs += 3\n        var i = 2\n        while (fibs.size < n) {\n\
    \            fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n        }\n\
    \        return fibs(n - 1)", "        var fib = new Fibonacci()\n        var\
    \ i = 0\n        var result = 0L\n        while (i < n) {\n            result\
    \ = fib.next()\n            if (isPrime(result)) i += 1\n        }\n        return\
    \ result", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fib = new ArrayBuffer[Long]()\n        fib\
    \ += 2\n        fib += 3\n        var i = 2\n        while (i <= n) {\n      \
    \      fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 == 0) {\n  \
    \              fib.remove(i)\n            } else {\n                var j = 0\n\
    \                while (j < i && fib(i) % fib(j) != 0) {\n                   \
    \ j += 1\n                }\n                if (j == i) {\n                 \
    \   i += 1\n                } else {\n                    fib.remove(i)\n    \
    \            }\n            }\n        }\n        fib(n - 1)", "        val primes\
    \ = new PrimeSet(1000000)\n        var fib = new Fibonacci(1000000)\n        var\
    \ count = 0\n        var result = 0\n        while (count < n) {\n           \
    \ result = fib.next\n            if (primes.contains(result)) count += 1\n   \
    \     }\n        result", "        var fibs = new ArrayBuffer[Long]();\n     \
    \   fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs +=\
    \ 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610;\
    \ fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs +=\
    \ 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393;\
    \ fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var count = 0L\n        var i = 1L\n        var\
    \ j = 1L\n        while (count < n) {\n            val k = i + j\n           \
    \ if (isPrime(k)) count += 1\n            i = j\n            j = k\n        }\n\
    \        i", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 1) return false\n            if (n == 2) return true\n            if (n % 2\
    \ == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i\
    \ <- 3 to sqrt by 2) {\n                if (n % i == 0) return false\n       \
    \     }\n            return true\n        }\n        var i = 1\n        var fib\
    \ = 1\n        var count = 0\n        while (count < n) {\n            fib +=\
    \ i\n            i = fib - i\n            if (isPrime(fib)) count += 1\n     \
    \   }\n        return fib", "        var fib = new ArrayBuffer[Long]()\n     \
    \   fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n) {\n\
    \            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 == 0)\
    \ {\n                fib(i) = fib(i) / 2\n                fib(i - 1) = fib(i -\
    \ 1) * 2\n            }\n            if (fib(i) % 3 == 0) {\n                fib(i)\
    \ = fib(i) / 3\n                fib(i - 1) = fib(i - 1) * 3\n            }\n \
    \           if (fib(i) % 5 == 0) {\n                fib(i) = fib(i) / 5\n    \
    \            fib(i - 1) = fib(i - 1) * 5\n            }\n            if (fib(i)\
    \ % 7 == 0) {\n                fib(i) = fib(i) / 7\n                fib(i - 1)\
    \ = fib(i - 1) * 7\n            }\n            if (fib(i) % 11 == 0) {\n     \
    \           fib(i) = fib(i) / 11\n                fib(i - 1) = fib(i - 1) * 11\n\
    \            }\n            if (fib(i) % 13 == 0) {\n                fib(i) =\
    \ fib(i) / 13\n                fib(i - 1) = fib(i - 1) * 13\n            }\n \
    \           if (fib(i) % 17 == 0) {\n                fib(i) = fib(i) / 17\n  \
    \              fib(i - 1) = fib(i - 1) * 17\n            }\n            if (fib(i)\
    \ % 19 == 0) {\n                fib(i) = fib(i) / 19\n                fib(i -\
    \ 1) = fib(i - 1) * 19\n            }\n            if (fib(i) % 23 == 0) {\n \
    \               fib(i) = fib(i) / 23\n                fib(i - 1) = fib(i - 1)\
    \ * 23\n            }\n            if (fib(i) % 29 == 0) {\n                fib(i)\
    \ = fib(i)", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2;\
    \ fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs +=\
    \ 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs +=\
    \ 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946;\
    \ fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393;\
    \ fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fib = new ArrayBuffer[Long]();\n        fib\
    \ += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n      \
    \  while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n           \
    \ if (isPrime(f)) {\n                fib += f;\n                i += 1;\n    \
    \        }\n        }\n        return fib(n.toInt - 1);", "        var count =\
    \ 0\n        var i = 2\n        while (count < n) {\n            if (isPrime(i)\
    \ && isFib(i)) {\n                count += 1\n            }\n            i +=\
    \ 1\n        }\n        return i - 1", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8;\n        var i = 4;\n   \
    \     while (i < n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n      \
    \      i += 1;\n        }\n        return fibs(n.toInt - 1);", "        var fib\
    \ = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i\
    \ = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            if (fib(i) % 2 == 0) {\n                fib(i) = fib(i) + 1\n   \
    \         }\n            while (!isPrime(fib(i))) {\n                fib(i) =\
    \ fib(i) + 2\n            }\n            i += 1\n        }\n        return fib(n\
    \ - 1)", "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n      \
    \  fib += 3\n        var i = 2\n        while (i <= n) {\n            fib += fib(i\
    \ - 1) + fib(i - 2)\n            if (fib(i) % 2 == 0) {\n                fib.remove(i)\n\
    \            } else {\n                var j = 0\n                while (j < i)\
    \ {\n                    if (fib(i) % fib(j) == 0) {\n                       \
    \ fib.remove(i)\n                        j = i\n                    }\n      \
    \              j += 1\n                }\n            }\n            i += 1\n\
    \        }\n        fib(n - 1)", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n < 2) return false\n            if (n == 2) return true\n  \
    \          if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var a = 1L\n        var b = 1L\n     \
    \   var c = 2L\n        var count = 2\n        while (count < n) {\n         \
    \   a = b\n            b = c\n            c = a + b\n            if (isPrime(c))\
    \ count += 1\n        }\n        return c", "        var count = 0L\n        var\
    \ i = 1L\n        while (count < n) {\n            if (isPrime(fib(i))) count\
    \ += 1\n            i += 1\n        }\n        fib(i - 1)", "        var count\
    \ = 0\n        var i = 1\n        while (count < n) {\n            val fib = fibonacci(i)\n\
    \            if (isPrime(fib)) count += 1\n            i += 1\n        }\n   \
    \     fibonacci(i - 1)", "        var a = 2L; var b = 3L; var c = 5L; var i =\
    \ 3L\n        while (i < n) {\n            a = b; b = c; c = a + b\n         \
    \   if (isPrime(c)) i += 1\n        }\n        c", "        var i = 1\n      \
    \  var fib = 1\n        var fib_1 = 1\n        var fib_2 = 1\n        while (i\
    \ < n) {\n            fib = fib_1 + fib_2\n            fib_2 = fib_1\n       \
    \     fib_1 = fib\n            if (isPrime(fib)) i += 1\n        }\n        fib",
  "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3;\n  \
    \      var i = 2;\n        while (i <= n) {\n            val next = fibs(i - 1)\
    \ + fibs(i - 2);\n            if (isPrime(next)) {\n                fibs += next;\n\
    \                i += 1;\n            }\n        }\n        fibs(n - 1);", " \
    \       var count = 0L\n        var fib = 1L\n        var fib1 = 1L\n        var\
    \ fib2 = 1L\n        while (count < n) {\n            fib = fib1 + fib2\n    \
    \        fib2 = fib1\n            fib1 = fib\n            if (fib.isPrime) count\
    \ += 1\n        }\n        fib", "        var count = 0L\n        var fib = 1L\n\
    \        var prev = 0L\n        while (count < n) {\n            val temp = fib\n\
    \            fib += prev\n            prev = temp\n            if (isPrime(fib))\
    \ count += 1\n        }\n        fib", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i).isPrime)\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i =\
    \ 5;\n        while (i < n) {\n            var fib_i = fib(i - 1) + fib(i - 2);\n\
    \            while (!isPrime(fib_i)) {\n                fib_i += fib(i - 1);\n\
    \            }\n            fib += fib_i;\n            i += 1;\n        }\n  \
    \      return fib(n.toInt - 1);", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i =\
    \ 5;\n        while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n\
    \            if (f.isPrime) {\n                fib += f;\n                i +=\
    \ 1;\n            }\n        }\n        return fib(n.toInt - 1);", "        var\
    \ fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3;\n        var\
    \ i = 2;\n        while (fibs.length < n) {\n            fibs += fibs(i - 1) +\
    \ fibs(i - 2);\n            i += 1;\n        }\n        return fibs(n.toInt -\
    \ 1);", "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n       \
    \ fib += 3\n        var i = 2\n        while (fib.size < n) {\n            fib\
    \ += fib(i - 1) + fib(i - 2)\n            i += 1\n        }\n        return fib(n\
    \ - 1)", "        var fib = new ArrayBuffer[Long]();\n        fib += 2; fib +=\
    \ 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n        while (i < n)\
    \ {\n            var j = fib(i - 1) + fib(i - 2);\n            while (!isPrime(j))\
    \ {\n                j += fib(i - 1);\n            }\n            fib += j;\n\
    \            i += 1;\n        }\n        return fib(n.toInt - 1);", "        var\
    \ fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var\
    \ i = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            while (!isPrime(fib(i))) fib(i) += fib(i - 1)\n            i += 1\n\
    \        }\n        fib(n.toInt - 1)", "        var i = 1L\n        var j = 1L\n\
    \        var k = 1L\n        var count = 0L\n        while (count < n) {\n   \
    \         k = i + j\n            if (isPrime(k)) count += 1\n            i = j\n\
    \            j = k\n        }\n        return k", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs\
    \ += 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs +=\
    \ 610; fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs\
    \ += 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs +=\
    \ 121393; fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs\
    \ += 1346269; fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465;\
    \ fibs += 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs\
    \ += 102334155; fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs\
    \ += 701408733; fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs\
    \ += 4807526976L; fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L;\
    \ fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L;\
    \ fibs += 225851433717L; fibs += 365435296162L; fibs += 591286729879L; fibs +=\
    \ 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L;\
    \ fibs += 6557470319842L; fibs += 10610209857723L; fibs += 17167680177565L; fibs\
    \ += 27777890035288L; fibs += 44945570212853L;", "        var f1 = 2L; var f2\
    \ = 3L; var f3 = 5L; var i = 3L\n        while (i < n) {\n            f1 = f2;\
    \ f2 = f3; f3 = f1 + f2\n            if (f3.isPrime) i += 1\n        }\n     \
    \   f3", "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            val sqrtN = sqrt(n).toLong\n            for (i\
    \ <- 3L to sqrtN by 2) {\n                if (n % i == 0) return false\n     \
    \       }\n            return true\n        }\n        var i = 1L\n        var\
    \ fib = 1L\n        var fibPrev = 1L\n        var count = 0L\n        while (count\
    \ < n) {\n            val temp = fib\n            fib += fibPrev\n           \
    \ fibPrev = temp\n            if (isPrime(fib)) count += 1\n        }\n      \
    \  return fib", "        var fibs = new ArrayBuffer[Long]();\n        fibs +=\
    \ 2; fibs += 3; fibs += 5; fibs += 8;\n        var i = 4;\n        while (i <\
    \ n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n            i += 1;\n\
    \        }\n        return fibs(n.toInt - 1);", "        var fib : Long = 1\n\
    \        var prev : Long = 1\n        var count : Long = 0\n        var result\
    \ : Long = 0\n        while (count < n) {\n            val temp = fib\n      \
    \      fib += prev\n            prev = temp\n            if (fib.isPrime) {\n\
    \                count += 1\n                result = fib\n            }\n   \
    \     }\n        result", "        var count = 0L\n        var i = 1L\n      \
    \  while (count < n) {\n            i += 1\n            if (isPrime(i) && isFib(i))\
    \ count += 1\n        }\n        return i", "        var fib = new Fibonacci()\n\
    \        var i = 0\n        var x = 0L\n        while (i < n) {\n            x\
    \ = fib.next\n            if (isPrime(x)) i += 1\n        }\n        return x",
  "        var count = 0\n        var i = 0\n        var fib = 0\n        while (count\
    \ < n) {\n            fib = fibonacci(i)\n            if (isPrime(fib)) count\
    \ += 1\n            i += 1\n        }\n        fib", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i =\
    \ 5;\n        while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n\
    \            if (isPrime(f)) {\n                fib += f;\n                i +=\
    \ 1;\n            }\n        }\n        return fib(n.toInt - 1);", "        var\
    \ fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var\
    \ i = 2\n        while (fib.length < n) {\n            fib += fib(i - 1) + fib(i\
    \ - 2)\n            i += 1\n        }\n        return fib(n - 1)", "        var\
    \ i = 1; var j = 1; var k = 2; var count = 0;\n        while (count < n) {\n \
    \           if (isPrime(k)) {\n                count += 1\n                if\
    \ (count == n) return k\n            }\n            i = j; j = k; k = i + j\n\
    \        }\n        return -1", "        var fib = new ArrayBuffer[Long]()\n \
    \       fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i).isPrime)\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs\
    \ += 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs +=\
    \ 610; fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs\
    \ += 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs +=\
    \ 121393; fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs\
    \ += 1346269; fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465;\
    \ fibs += 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs\
    \ += 102334155; fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs\
    \ += 701408733; fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs\
    \ += 4807526976L; fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L;\
    \ fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L;\
    \ fibs += 225851433717L; fibs += 365435296162L; fibs += 591286729879L; fibs +=\
    \ 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L;\
    \ fibs += 6557470319842L; fibs += 10610209857723L; fibs += 17167680177565L; fibs\
    \ += 27777890035288L; fibs += 44945570212853L;", "        var count = 0\n    \
    \    var i = 2\n        while (count < n) {\n            if (isPrime(i) && isFib(i))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        return i - 1", "        var fibs = new ArrayBuffer[Long]()\n        fibs\
    \ += 2\n        fibs += 3\n        var i = 2\n        while (i <= n) {\n     \
    \       fibs += fibs(i - 1) + fibs(i - 2)\n            if (fibs(i) % 2 == 0) {\n\
    \                fibs.remove(i)\n            } else {\n                i += 1\n\
    \            }\n        }\n        fibs(n - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        var j = 0\n  \
    \      while (i <= n) {\n            var next = fib(j) + fib(j + 1)\n        \
    \    if (isPrime(next)) {\n                fib += next\n                i += 1\n\
    \            }\n            j += 1\n        }\n        fib(n.toInt - 1)", "  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ var count = 0\n        var i = 1\n        while (count < n) {\n            i\
    \ += 1\n            if (isPrime(i) && isPrime(Fibonacci.fib(i))) count += 1\n\
    \        }\n        return Fibonacci.fib(i)", "        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n < 2) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            for (i <- 3L to\
    \ sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n     \
    \       }\n            return true\n        }\n        var count = 0L\n      \
    \  var i = 1L\n        while (count < n) {\n            if (isPrime(i) && isPrime(i\
    \ + 2)) count += 1\n            i += 1\n        }\n        return i - 1", "  \
    \      var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3;\n  \
    \      var i = 2;\n        while (fibs.length < n) {\n            var fib = fibs(i\
    \ - 1) + fibs(i - 2);\n            if (isPrime(fib)) fibs += fib;\n          \
    \  i += 1;\n        }\n        return fibs(n - 1);", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i =\
    \ 5;\n        while (i < n) {\n            var j = fib(i - 1) + fib(i - 2);\n\
    \            while (!isPrime(j)) {\n                j += fib(i - 1);\n       \
    \     }\n            fib += j;\n            i += 1;\n        }\n        return\
    \ fib(n.toInt - 1);", "        var count = 0L\n        var i = 0L\n        var\
    \ fib = 0L\n        while (count < n) {\n            fib = fibonacci(i)\n    \
    \        if (isPrime(fib)) count += 1\n            i += 1\n        }\n       \
    \ fib", "        var count = 0L\n        var i = 1L\n        var fib = 0L\n  \
    \      while (count < n) {\n            fib = fibonacci(i)\n            if (isPrime(fib))\
    \ count += 1\n            i += 1\n        }\n        fib", "        var i = 1;\
    \ var j = 1; var k = 1; var count = 0;\n        while (count < n) {\n        \
    \    k = i + j;\n            if (isPrime(k)) {\n                count += 1;\n\
    \            }\n            i = j;\n            j = k;\n        }\n        return\
    \ k;", "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib\
    \ += 3\n        var i = 2\n        while (i <= n) {\n            fib += fib(i\
    \ - 1) + fib(i - 2)\n            if (isPrime(fib(i))) i += 1\n        }\n    \
    \    fib(n - 1)", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n < 2) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \                if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var i = 0L\n        var fib = 0L\n        var fib1\
    \ = 1L\n        var fib2 = 1L\n        while (i < n) {\n            fib = fib1\
    \ + fib2\n            fib1 = fib2\n            fib2 = fib\n            if (isPrime(fib))\
    \ i += 1\n        }\n        return fib", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var count = 0\n        var i = 0\n   \
    \     while (count < n) {\n            i += 1\n            if (isPrime(i) && isPrime(Fibonacci.fib(i)))\
    \ count += 1\n        }\n        return Fibonacci.fib(i)", "        var fib =\
    \ new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i =\
    \ 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n  \
    \          if (isPrime(fib(i))) i += 1\n        }\n        fib(n - 1)", "    \
    \    var fibs = new Queue[Long]()\n        fibs += 2\n        fibs += 3\n    \
    \    var i = 2\n        while (i <= n) {\n            val fib = fibs(0) + fibs(1)\n\
    \            if (isPrime(fib)) {\n                i += 1\n                fibs\
    \ += fib\n            }\n            fibs.dequeue\n        }\n        fibs(0)",
  "        var f1 = 2L; var f2 = 3L; var f3 = 5L; var i = 3L\n        while (i < n)\
    \ {\n            f1 = f2; f2 = f3; f3 = f1 + f2\n            if (isPrime(f3))\
    \ i += 1\n        }\n        f3", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3;\n        var i = 2;\n        while (fibs.length\
    \ < n) {\n            val next = fibs(i - 1) + fibs(i - 2);\n            if (isPrime(next))\
    \ {\n                fibs += next;\n            }\n            i += 1;\n     \
    \   }\n        fibs(n.toInt - 1);", "        var i = 1; var j = 1; var k = 2;\
    \ var count = 0\n        while (count < n) {\n            if (isPrime(k)) {\n\
    \                count += 1\n            }\n            val t = i + j\n      \
    \      i = j; j = k; k = t\n        }\n        return k", "        var f1 = 2L;\
    \ var f2 = 3L; var f3 = 5L; var count = 3L\n        while (count < n) {\n    \
    \        f1 = f2; f2 = f3; f3 = f1 + f2\n            if (isPrime(f3)) count +=\
    \ 1\n        }\n        f3", "        var fib = new ArrayBuffer[Long]()\n    \
    \    fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n) {\n\
    \            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3;\n        var i = 2;\n        while (i <= n) {\n \
    \           fib += fib(i - 1) + fib(i - 2);\n            if (fib(i) % 2 == 0)\
    \ {\n                fib.remove(i);\n            } else if (isPrime(fib(i))) {\n\
    \                i += 1;\n            } else {\n                fib.remove(i);\n\
    \            }\n        }\n        return fib(n - 1);", "        var f = 2L\n\
    \        var s = 3L\n        var i = 1L\n        var c = 0L\n        while (c\
    \ < n) {\n            val t = f\n            f = s\n            s = t + s\n  \
    \          if (isPrime(s)) c += 1\n            i += 1\n        }\n        return\
    \ s", "        var i = 1; var j = 1; var k = 2; var count = 0\n        while (count\
    \ < n) {\n            if (isPrime(k)) {\n                count += 1\n        \
    \    }\n            val temp = j\n            j = k\n            k = i + j\n \
    \           i = temp\n        }\n        k", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 ==\
    \ 0) {\n                fib(i) += 1\n            }\n            while (!isPrime(fib(i)))\
    \ {\n                fib(i) += 2\n            }\n            i += 1\n        }\n\
    \        fib(n.toInt - 1)", "        def isPrime(n : Long) : Boolean = {\n   \
    \         if (n < 2) return false\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var a = 1L\n        var b = 1L\n     \
    \   var count = 0L\n        while (count < n) {\n            val c = a + b\n \
    \           if (isPrime(c)) count += 1\n            a = b\n            b = c\n\
    \        }\n        return b", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8;\n        var i = 4;\n   \
    \     while (i < n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n      \
    \      i += 1;\n        }\n        return fibs(n.toInt - 1);", "        var fib\
    \ = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i\
    \ = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            if (fib(i) % 2 == 0) {\n                fib(i) += 1\n           \
    \ }\n            while (!isPrime(fib(i))) {\n                fib(i) += 2\n   \
    \         }\n            i += 1\n        }\n        fib(n.toInt - 1)", "     \
    \   var i = 1L\n        var j = 1L\n        var k = 2L\n        var count = 0L\n\
    \        while (count < n) {\n            if (isPrime(k)) {\n                count\
    \ += 1\n            }\n            val t = k\n            k = i + j\n        \
    \    i = j\n            j = t\n        }\n        k", "        var f1 = 2L; var\
    \ f2 = 3L; var f3 = 5L; var i = 3L\n        while (i < n) {\n            f1 =\
    \ f2; f2 = f3; f3 = f1 + f2\n            if (f3.isPrime) i += 1\n        }\n \
    \       f3", "        var f = new ArrayBuffer[Long]()\n        f += 2\n      \
    \  f += 3\n        var i = 2\n        while (i <= n) {\n            var j = f(f.length\
    \ - 1) + f(f.length - 2)\n            while (!isPrime(j)) {\n                j\
    \ += f(f.length - 1)\n            }\n            f += j\n            i += 1\n\
    \        }\n        return f(n - 1)", "        var fibs = new ArrayBuffer[Long]()\n\
    \        fibs += 2\n        fibs += 3\n        var i = 2\n        while (i <=\
    \ n) {\n            fibs += fibs(i - 1) + fibs(i - 2)\n            if (fibs(i).isPrime)\
    \ i += 1\n        }\n        fibs(n - 1)", "        var i = 1L\n        var j\
    \ = 1L\n        var k = 2L\n        var count = 0L\n        while (count < n)\
    \ {\n            if (isPrime(k)) {\n                count += 1\n            }\n\
    \            val t = i + j\n            i = j\n            j = k\n           \
    \ k = t\n        }\n        k", "        var count = 0\n        var i = 1\n  \
    \      var fib = 0\n        while (count < n) {\n            fib = fibonacci(i)\n\
    \            if (isPrime(fib)) count += 1\n            i += 1\n        }\n   \
    \     fib", "        var i = 0\n        var fib = 0\n        var fib1 = 1\n  \
    \      var fib2 = 1\n        while (i < n) {\n            fib = fib1 + fib2\n\
    \            fib1 = fib2\n            fib2 = fib\n            if (isPrime(fib))\
    \ i += 1\n        }\n        return fib", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 ==\
    \ 0) {\n                fib(i) += 1\n            }\n            while (!isPrime(fib(i)))\
    \ {\n                fib(i) += 2\n            }\n            i += 1\n        }\n\
    \        fib(n.toInt - 1)", "        var f = new ArrayBuffer[Long]()\n       \
    \ f += 2\n        f += 3\n        var i = 2\n        while (i <= n) {\n      \
    \      var j = f(f.length - 1) + f(f.length - 2)\n            while (!isPrime(j))\
    \ {\n                j += f(f.length - 1)\n            }\n            f += j\n\
    \            i += 1\n        }\n        return f(n - 1)", "        var fibs =\
    \ new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs += 5; fibs += 8;\
    \ fibs += 13; fibs += 21; fibs += 34; fibs += 55; fibs += 89; fibs += 144; fibs\
    \ += 233; fibs += 377; fibs += 610; fibs += 987; fibs += 1597; fibs += 2584; fibs\
    \ += 4181; fibs += 6765; fibs += 10946; fibs += 17711; fibs += 28657; fibs +=\
    \ 46368; fibs += 75025; fibs += 121393; fibs += 196418; fibs += 317811; fibs +=\
    \ 514229; fibs += 832040; fibs += 1346269; fibs += 2178309; fibs += 3524578; fibs\
    \ += 5702887; fibs += 9227465; fibs += 14930352; fibs += 24157817; fibs += 39088169;\
    \ fibs += 63245986; fibs += 102334155; fibs += 165580141; fibs += 267914296; fibs\
    \ += 433494437; fibs += 701408733; fibs += 1134903170; fibs += 1836311903; fibs\
    \ += 2971215073L; fibs += 4807526976L; fibs += 7778742049L; fibs += 12586269025L;\
    \ fibs += 20365011074L; fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L;\
    \ fibs += 139583862445L; fibs += 225851433717L; fibs += 365435296162L; fibs +=\
    \ 591286729879L; fibs += 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L;\
    \ fibs += 4052739537881L; fibs += 6557470319842L; fibs += 10610209857723L; fibs\
    \ += 17167680177565L; fibs += 27777890035288L; fibs += 44945570212853L;", "  \
    \      var fib = new Fibonacci\n        var count = 0L\n        var result = 0L\n\
    \        while (count < n) {\n            result = fib.next\n            if (isPrime(result))\
    \ count += 1\n        }\n        return result", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3;\n        var i = 2;\n        while (fibs.length\
    \ < n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n            i += 1;\n\
    \        }\n        return fibs(n.toInt - 1);", "        var count = 0\n     \
    \   var i = 0\n        while (count < n) {\n            i += 1\n            if\
    \ (isPrime(fib(i))) count += 1\n        }\n        fib(i)", "        var fib =\
    \ new ArrayBuffer[Long]();\n        fib += 2; fib += 3;\n        var i = 2;\n\
    \        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2);\n     \
    \       if (isPrime(fib(i))) i += 1;\n        }\n        fib(n.toInt - 1)", " \
    \       var primeFibs = ListBuffer[Long]()\n        primeFibs += 2\n        primeFibs\
    \ += 3\n        var i = 2\n        var j = 3\n        var k = 5\n        while\
    \ (primeFibs.length < n) {\n            if (isPrime(k)) primeFibs += k\n     \
    \       i = j\n            j = k\n            k = i + j\n        }\n        primeFibs(n.toInt\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n    \
    \    fibs += 3\n        var i = 2\n        while (fibs.length < n) {\n       \
    \     fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n        }\n     \
    \   fibs(n.toInt - 1)", "        var f1 = 2L; var f2 = 3L; var f3 = 5L; var i\
    \ = 3L\n        while (i < n) {\n            f1 = f2; f2 = f3; f3 = f1 + f2\n\
    \            if (f3.isPrime) i += 1\n        }\n        f3", "        var i =\
    \ 1; var j = 1; var k = 1; var c = 0\n        while (c < n) {\n            val\
    \ t = i + j\n            i = j; j = t\n            if (isPrime(t)) {\n       \
    \         c += 1\n                k = t\n            }\n        }\n        k",
  "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n\
    \        var i = 2\n        while (i <= n) {\n            fib += fib(i - 1) +\
    \ fib(i - 2)\n            if (fib(i) % 2 == 0) {\n                fib.remove(i)\n\
    \            } else {\n                var j = 0\n                while (j < i)\
    \ {\n                    if (fib(i) % fib(j) == 0) {\n                       \
    \ fib.remove(i)\n                        i -= 1\n                        j = i\n\
    \                    }\n                    j += 1\n                }\n      \
    \      }\n            i += 1\n        }\n        fib(n - 1)", "        var fibs\
    \ = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs += 3\n        var\
    \ i = 2\n        while (fibs.length < n) {\n            fibs += fibs(i - 1) +\
    \ fibs(i - 2)\n            i += 1\n        }\n        fibs(n.toInt - 1)", "  \
    \      var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n\
    \        var i = 2\n        while (i <= n) {\n            fib += fib(i - 1) +\
    \ fib(i - 2)\n            if (fib(i) % 2 == 0) {\n                fib(i) += 1\n\
    \            }\n            while (!isPrime(fib(i))) {\n                fib(i)\
    \ += 2\n            }\n            i += 1\n        }\n        fib(n.toInt - 1)",
  "        var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n\
    \        var i = 2\n        while (i <= n) {\n            fib += fib(i - 1) +\
    \ fib(i - 2)\n            if (fib(i) % 2 == 0) {\n                fib(i) += 1\n\
    \            }\n            while (!isPrime(fib(i))) {\n                fib(i)\
    \ += 2\n            }\n            i += 1\n        }\n        fib(n.toInt - 1)",
  "        var fib = new ArrayBuffer[Long]();\n        fib += 2; fib += 3; fib +=\
    \ 5; fib += 13; fib += 89;\n        var i = 5;\n        while (i < n) {\n    \
    \        var f = fib(i - 1) + fib(i - 2);\n            if (isPrime(f)) {\n   \
    \             fib += f;\n                i += 1;\n            }\n        }\n \
    \       return fib(n.toInt - 1);", "        var count = 0L\n        var fib =\
    \ 1L\n        var prev = 0L\n        while (count < n) {\n            val temp\
    \ = fib\n            fib += prev\n            prev = temp\n            if (fib.isPrime)\
    \ count += 1\n        }\n        fib", "        var count = 0L\n        var i\
    \ = 1L\n        while (count < n) {\n            if (isPrime(fib(i))) count +=\
    \ 1\n            i += 1\n        }\n        return fib(i - 1)", "        var f\
    \ = new ArrayBuffer[Long]()\n        f += 2\n        f += 3\n        var i = 2\n\
    \        var j = 3\n        while (i < n) {\n            j += 2\n            if\
    \ (isPrime(j)) {\n                f += j\n                i += 1\n           \
    \ }\n        }\n        return f(n.toInt - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 ==\
    \ 0) {\n                fib(i) += 1\n            }\n            while (!isPrime(fib(i)))\
    \ {\n                fib(i) += 2\n            }\n            i += 1\n        }\n\
    \        fib(n.toInt - 1)", "        var fibs = new ArrayBuffer[Long]()\n    \
    \    fibs += 2\n        fibs += 3\n        var i = 2\n        while (fibs.length\
    \ < n) {\n            fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n\
    \        }\n        return fibs(i - 2)", "        var a = 2L; var b = 3L; var\
    \ c = 5L; var i = 3L\n        while (i < n) {\n            a = b; b = c; c = a\
    \ + b\n            if (c.isPrime) i += 1\n        }\n        c", "        var\
    \ i = 1; var j = 1; var k = 2; var count = 0\n        while (count < n) {\n  \
    \          if (isPrime(k)) {\n                count += 1\n            }\n    \
    \        val t = i + j\n            i = j; j = k; k = t\n        }\n        k",
  "        var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n        fibs +=\
    \ 3\n        var i = 2\n        while (fibs.length < n) {\n            fibs +=\
    \ fibs(i - 1) + fibs(i - 2)\n            i += 1\n        }\n        return fibs(n\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fibs = new ArrayBuffer[Long]();\n       \
    \ fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs +=\
    \ 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610;\
    \ fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs +=\
    \ 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393;\
    \ fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fib = new Fibonacci()\n        var i = 1\n\
    \        var count = 0\n        while (count < n) {\n            i = fib.next\n\
    \            if (isPrime(i)) count += 1\n        }\n        return i", "     \
    \   var fib = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n  \
    \      fib += 5\n        fib += 13\n        fib += 89\n        var i = 5\n   \
    \     while (i < n) {\n            var f = fib(i - 1) + fib(i - 2)\n         \
    \   while (!isPrime(f)) {\n                f += fib(i - 1)\n            }\n  \
    \          fib += f\n            i += 1\n        }\n        return fib(n.toInt\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fib = new ArrayBuffer[Long]()\n        fib\
    \ += 2\n        fib += 3\n        var i = 2\n        while (fib.length < n) {\n\
    \            fib += fib(i - 1) + fib(i - 2)\n            i += 1\n        }\n \
    \       fib(n.toInt - 1)", "        var fib = new ArrayBuffer[Long]();\n     \
    \   fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n\
    \        while (fib.length < n) {\n            val a = fib(i - 1);\n         \
    \   val b = fib(i - 2);\n            val c = a + b;\n            if (isPrime(c))\
    \ {\n                fib += c;\n                i += 1;\n            }\n     \
    \   }\n        fib(n.toInt - 1)", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n < 2) return false\n            if (n == 2) return true\n  \
    \          if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var fib = new ArrayBuffer[Long]()\n  \
    \      fib += 1\n        fib += 2\n        var i = 2\n        while (i <= n) {\n\
    \            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        return fib(n - 1)", "        var count = 0\n    \
    \    var i = 1\n        var fib = 0\n        while (count < n) {\n           \
    \ fib = fibonacci(i)\n            if (isPrime(fib)) count += 1\n            i\
    \ += 1\n        }\n        fib", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 ==\
    \ 0) {\n                fib.remove(i)\n            } else {\n                var\
    \ j = 0\n                while (j < i) {\n                    if (fib(i) % fib(j)\
    \ == 0) {\n                        fib.remove(i)\n                        i -=\
    \ 1\n                        j = i\n                    }\n                  \
    \  j += 1\n                }\n            }\n            i += 1\n        }\n \
    \       fib(n - 1)", "        var fibs = new ArrayBuffer[Long]()\n        fibs\
    \ += 2\n        fibs += 3\n        var i = 2\n        while (i <= n) {\n     \
    \       val next = fibs(i - 1) + fibs(i - 2)\n            if (isPrime(next)) {\n\
    \                fibs += next\n                i += 1\n            }\n       \
    \ }\n        fibs(n - 1)", "        val fib = new ArrayBuffer[Long]()\n      \
    \  fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n) {\n \
    \           fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i))) i\
    \ += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 ==\
    \ 0) {\n                fib.remove(i)\n            } else {\n                var\
    \ j = 0\n                while (j < i) {\n                    if (fib(i) % fib(j)\
    \ == 0) {\n                        fib.remove(i)\n                        i -=\
    \ 1\n                        j = i\n                    }\n                  \
    \  j += 1\n                }\n            }\n            i += 1\n        }\n \
    \       fib(n - 1)", "        def isPrime(n : Long) : Boolean = {\n          \
    \  if (n < 2) return false\n            if (n == 2) return true\n            if\
    \ (n % 2 == 0) return false\n            for (i <- 3L to sqrt(n).toLong by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var i = 1L\n        var f = 1L\n        var\
    \ s = 1L\n        var count = 0L\n        while (count < n) {\n            val\
    \ t = f + s\n            f = s\n            s = t\n            if (isPrime(t))\
    \ count += 1\n        }\n        return s", "        var i = 1\n        var j\
    \ = 1\n        var k = 0\n        var count = 0\n        while (count < n) {\n\
    \            k = i + j\n            if (isPrime(k)) count += 1\n            i\
    \ = j\n            j = k\n        }\n        return k", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var a = 1L\n     \
    \   var b = 1L\n        var c = 0L\n        var i = 0L\n        while (i < n)\
    \ {\n            c = a + b\n            a = b\n            b = c\n           \
    \ if (isPrime(c)) i += 1\n        }\n        return c", "        var fib = new\
    \ ArrayBuffer[Long]();\n        fib += 2; fib += 3;\n        var i = 2;\n    \
    \    while (fib.length < n) {\n            fib += fib(i - 1) + fib(i - 2);\n \
    \           i += 1;\n        }\n        return fib(n.toInt - 1);", "        var\
    \ fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs += 5; fibs\
    \ += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55; fibs += 89; fibs += 144;\
    \ fibs += 233; fibs += 377; fibs += 610; fibs += 987; fibs += 1597; fibs += 2584;\
    \ fibs += 4181; fibs += 6765; fibs += 10946; fibs += 17711; fibs += 28657; fibs\
    \ += 46368; fibs += 75025; fibs += 121393; fibs += 196418; fibs += 317811; fibs\
    \ += 514229; fibs += 832040; fibs += 1346269; fibs += 2178309; fibs += 3524578;\
    \ fibs += 5702887; fibs += 9227465; fibs += 14930352; fibs += 24157817; fibs +=\
    \ 39088169; fibs += 63245986; fibs += 102334155; fibs += 165580141; fibs += 267914296;\
    \ fibs += 433494437; fibs += 701408733; fibs += 1134903170; fibs += 1836311903;\
    \ fibs += 2971215073L; fibs += 4807526976L; fibs += 7778742049L; fibs += 12586269025L;\
    \ fibs += 20365011074L; fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L;\
    \ fibs += 139583862445L; fibs += 225851433717L; fibs += 365435296162L; fibs +=\
    \ 591286729879L; fibs += 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L;\
    \ fibs += 4052739537881L; fibs += 6557470319842L; fibs += 10610209857723L; fibs\
    \ += 17167680177565L; fibs += 27777890035288L; fibs += 44945570212853L;", "  \
    \      var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs\
    \ += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55; fibs += 89;\
    \ fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987; fibs += 1597;\
    \ fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs += 17711; fibs\
    \ += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs += 196418; fibs\
    \ += 317811; fibs += 514229; fibs += 832040; fibs += 1346269; fibs += 2178309;\
    \ fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs += 14930352; fibs +=\
    \ 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155; fibs += 165580141;\
    \ fibs += 267914296; fibs += 433494437; fibs += 701408733; fibs += 1134903170;\
    \ fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L; fibs += 7778742049L;\
    \ fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L; fibs += 53316291173L;\
    \ fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L; fibs +=\
    \ 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs += 1548008755920L;\
    \ fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L; fibs\
    \ += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs +=\
    \ 44945570212853L;", "        var f = 1L\n        var g = 0L\n        var i =\
    \ 0L\n        while (i < n) {\n            val h = f + g\n            f = g\n\
    \            g = h\n            if (isPrime(g)) i += 1\n        }\n        g",
  "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3;\n  \
    \      var i = 2;\n        while (i <= n) {\n            val fib = fibs(i - 1)\
    \ + fibs(i - 2);\n            if (isPrime(fib)) {\n                fibs += fib;\n\
    \                i += 1;\n            }\n        }\n        fibs(n - 1);", " \
    \       var fibs = new ArrayBuffer[Long]();\n        fibs += 1; fibs += 2;\n \
    \       var i = 2;\n        while (fibs.length < n) {\n            fibs += fibs(i\
    \ - 1) + fibs(i - 2);\n            i += 1;\n        }\n        return fibs(n -\
    \ 1);", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3;\n        var i = 2;\n        while (fibs.length < n) {\n            val\
    \ fib = fibs(i - 1) + fibs(i - 2);\n            if (isPrime(fib)) fibs += fib;\n\
    \            i += 1;\n        }\n        fibs(n.toInt - 1);", "        var f1\
    \ = 2L; var f2 = 3L; var f3 = 5L; var i = 3L\n        while (i < n) {\n      \
    \      f1 = f2; f2 = f3; f3 = f1 + f2\n            if (f3.isPrime) i += 1\n  \
    \      }\n        f3", "        var fibs = new ArrayBuffer[Long]()\n        fibs\
    \ += 2\n        fibs += 3\n        var i = 2\n        while (fibs.length < n)\
    \ {\n            fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n     \
    \   }\n        return fibs(n - 1)", "        var i = 1; var j = 1; var k = 2;\
    \ var count = 1\n        while (count < n) {\n            val temp = j; j = k;\
    \ k = i + j; i = temp\n            if (isPrime(k)) count += 1\n        }\n   \
    \     k", "        val primes = new PrimeSet(1000000)\n        var fib = new Fibonacci()\n\
    \        var count = 0\n        var result = 0L\n        while (count < n) {\n\
    \            result = fib.next\n            if (primes.contains(result)) count\
    \ += 1\n        }\n        result", "        var fibs = new ArrayBuffer[Long]()\n\
    \        fibs += 2\n        fibs += 3\n        var i = 2\n        while (i <=\
    \ n) {\n            fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n  \
    \      }\n        var j = fibs.length - 1\n        while (j >= 0) {\n        \
    \    if (isPrime(fibs(j))) return fibs(j)\n            j -= 1\n        }\n   \
    \     return 0", "        var fibs = new ArrayBuffer[Long]()\n        fibs +=\
    \ 2\n        fibs += 3\n        var i = 2\n        while (fibs.length < n) {\n\
    \            fibs += fibs(i - 1) + fibs(i - 2)\n            i += 1\n        }\n\
    \        fibs(i - 2)", "        var fib = new ArrayBuffer[Long]()\n        fib\
    \ += 2\n        fib += 3\n        var i = 2\n        while (i <= n) {\n      \
    \      fib += fib(i - 1) + fib(i - 2)\n            if (fib(i) % 2 == 0) {\n  \
    \              fib.remove(i)\n            } else {\n                var j = 0\n\
    \                while (j < i) {\n                    if (fib(i) % fib(j) == 0)\
    \ {\n                        fib.remove(i)\n                        j = i\n  \
    \                  }\n                    j += 1\n                }\n        \
    \    }\n            i += 1\n        }\n        fib(n - 1)", "        var count\
    \ = 0L\n        var i = 0L\n        while (count < n) {\n            i += 1\n\
    \            if (isPrime(i) && isFib(i)) count += 1\n        }\n        return\
    \ i", "        var i = 1; var j = 1; var k = 2; var count = 1; var result = 0L\n\
    \        while (count <= n) {\n            if (isPrime(k)) {\n               \
    \ result = k\n                count += 1\n            }\n            k = i + j;\
    \ i = j; j = k\n        }\n        result", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (fib.length\
    \ < n) {\n            fib += fib(i - 1) + fib(i - 2)\n            i += 1\n   \
    \     }\n        fib(n.toInt - 1)", "        val primes = new PrimeSet(100000000)\n\
    \        var fib = new Fibonacci(100000000)\n        var result = 0L\n       \
    \ var count = 0L\n        while (count < n) {\n            result = fib.next\n\
    \            if (primes.contains(result)) count += 1\n        }\n        result"]
stop_tokens:
- "\n    }\n"
