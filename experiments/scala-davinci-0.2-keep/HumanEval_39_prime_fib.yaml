name: HumanEval_39_prime_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
  \    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n    // 3\n    // >>>\
  \ prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n    // >>> prime_fib(5)\n\
  \    // 89\n    def primeFib(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeFib((1l)) ==\
  \ (2l));\n    assert(primeFib((2l)) == (3l));\n    assert(primeFib((3l)) == (5l));\n\
  \    assert(primeFib((4l)) == (13l));\n    assert(primeFib((5l)) == (89l));\n  \
  \  assert(primeFib((6l)) == (233l));\n    assert(primeFib((7l)) == (1597l));\n \
  \   assert(primeFib((8l)) == (28657l));\n    assert(primeFib((9l)) == (514229l));\n\
  \    assert(primeFib((10l)) == (433494437l));\n    }\n\n}\n"
completions: ["        var i = 1; var j = 1; var k = 1; var count = 0\n        while\
    \ (count < n) {\n            k = i + j; i = j; j = k\n            if (isPrime(k))\
    \ count += 1\n        }\n        k", "        var fib = new ArrayBuffer[Long]();\n\
    \        fib += 2; fib += 3;\n        var i = 2;\n        while (fib.length <\
    \ n) {\n            fib += fib(i - 1) + fib(i - 2);\n            i += 1;\n   \
    \     }\n        return fib(n.toInt - 1);", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3;\n        var i = 2;\n        while (fibs.length\
    \ < n) {\n            val next = fibs(i - 1) + fibs(i - 2);\n            if (isPrime(next))\
    \ fibs += next;\n            i += 1;\n        }\n        fibs(n.toInt - 1);",
  "        def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i\
    \ == 0) return false\n            }\n            return true\n        }\n    \
    \    def fib(n : Long) : Long = {\n            if (n == 1) return 1\n        \
    \    if (n == 2) return 2\n            return fib(n - 1) + fib(n - 2)\n      \
    \  }\n        var i = 1L\n        var count = 0L\n        while (count < n) {\n\
    \            i += 1\n            if (isPrime(fib(i))) count += 1\n        }\n\
    \        return fib(i)", "        var fib = new Fibonacci\n        var count =\
    \ 0L\n        var result = 0L\n        while (count < n) {\n            result\
    \ = fib.next\n            if (isPrime(result)) count += 1\n        }\n       \
    \ return result", "        var fibs = new ArrayBuffer[Long]()\n        fibs +=\
    \ 2\n        fibs += 3\n        var i = 2\n        while (fibs.length < n) {\n\
    \            val fib = fibs(i - 1) + fibs(i - 2)\n            if (isPrime(fib))\
    \ fibs += fib\n            i += 1\n        }\n        fibs(n - 1)", "        val\
    \ primes = new PrimeSet(1000000)\n        var i = 1\n        var count = 0\n \
    \       while (count < n) {\n            i += 1\n            if (primes.isPrime(i)\
    \ && primes.isPrime(fib(i))) {\n                count += 1\n            }\n  \
    \      }\n        fib(i)", "        var fib = new ArrayBuffer[Long]();\n     \
    \   fib += 2; fib += 3; fib += 5; fib += 13; fib += 89;\n        var i = 5;\n\
    \        while (i < n) {\n            var f = fib(i - 1) + fib(i - 2);\n     \
    \       if (isPrime(f)) {\n                fib += f;\n                i += 1;\n\
    \            }\n        }\n        return fib(n.toInt - 1);", "        var fib\
    \ = new ArrayBuffer[Long]()\n        fib += 2\n        fib += 3\n        var i\
    \ = 2\n        while (i <= n) {\n            fib += fib(i - 1) + fib(i - 2)\n\
    \            if (fib(i) % 2 == 0) {\n                fib(i) = fib(i) + 1\n   \
    \         }\n            while (!isPrime(fib(i))) {\n                fib(i) =\
    \ fib(i) + 2\n            }\n            i += 1\n        }\n        return fib(n\
    \ - 1)", "        var fibs = new ArrayBuffer[Long]()\n        fibs += 2\n    \
    \    fibs += 3\n        var i = 2\n        while (i <= n) {\n            fibs\
    \ += fibs(i - 1) + fibs(i - 2)\n            if (fibs(i) % 2 == 0) {\n        \
    \        fibs(i) += 1\n            }\n            while (!isPrime(fibs(i))) {\n\
    \                fibs(i) += 2\n            }\n            i += 1\n        }\n\
    \        fibs(n.toInt - 1)", "        var fibs = new ArrayBuffer[Long]();\n  \
    \      fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs\
    \ += 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs +=\
    \ 610; fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs\
    \ += 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs +=\
    \ 121393; fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs\
    \ += 1346269; fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465;\
    \ fibs += 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs\
    \ += 102334155; fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs\
    \ += 701408733; fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs\
    \ += 4807526976L; fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L;\
    \ fibs += 32951280099L; fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L;\
    \ fibs += 225851433717L; fibs += 365435296162L; fibs += 591286729879L; fibs +=\
    \ 956722026041L; fibs += 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L;\
    \ fibs += 6557470319842L; fibs += 10610209857723L; fibs += 17167680177565L; fibs\
    \ += 27777890035288L; fibs += 44945570212853L;", "        var count = 0\n    \
    \    var fib = 2L\n        var fib1 = 1L\n        var fib2 = 2L\n        while\
    \ (count < n) {\n            fib = fib1 + fib2\n            fib1 = fib2\n    \
    \        fib2 = fib\n            if (isPrime(fib)) {\n                count +=\
    \ 1\n            }\n        }\n        return fib", "        var i = 1; var j\
    \ = 2; var k = 3; var count = 2\n        while (count < n) {\n            i =\
    \ j; j = k; k = i + j\n            if (isPrime(k)) count += 1\n        }\n   \
    \     k", "        var fibs = new ArrayBuffer[Long]();\n        fibs += 2; fibs\
    \ += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs += 34; fibs += 55;\
    \ fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610; fibs += 987;\
    \ fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs += 10946; fibs\
    \ += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393; fibs\
    \ += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        var fibs = new ArrayBuffer[Long]();\n       \
    \ fibs += 2; fibs += 3; fibs += 5; fibs += 8; fibs += 13; fibs += 21; fibs +=\
    \ 34; fibs += 55; fibs += 89; fibs += 144; fibs += 233; fibs += 377; fibs += 610;\
    \ fibs += 987; fibs += 1597; fibs += 2584; fibs += 4181; fibs += 6765; fibs +=\
    \ 10946; fibs += 17711; fibs += 28657; fibs += 46368; fibs += 75025; fibs += 121393;\
    \ fibs += 196418; fibs += 317811; fibs += 514229; fibs += 832040; fibs += 1346269;\
    \ fibs += 2178309; fibs += 3524578; fibs += 5702887; fibs += 9227465; fibs +=\
    \ 14930352; fibs += 24157817; fibs += 39088169; fibs += 63245986; fibs += 102334155;\
    \ fibs += 165580141; fibs += 267914296; fibs += 433494437; fibs += 701408733;\
    \ fibs += 1134903170; fibs += 1836311903; fibs += 2971215073L; fibs += 4807526976L;\
    \ fibs += 7778742049L; fibs += 12586269025L; fibs += 20365011074L; fibs += 32951280099L;\
    \ fibs += 53316291173L; fibs += 86267571272L; fibs += 139583862445L; fibs += 225851433717L;\
    \ fibs += 365435296162L; fibs += 591286729879L; fibs += 956722026041L; fibs +=\
    \ 1548008755920L; fibs += 2504730781961L; fibs += 4052739537881L; fibs += 6557470319842L;\
    \ fibs += 10610209857723L; fibs += 17167680177565L; fibs += 27777890035288L; fibs\
    \ += 44945570212853L;", "        def isPrime(n : Long) : Boolean = {\n       \
    \     if (n < 2) return false\n            if (n == 2) return true\n         \
    \   if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var i = 1\n        var j = 1\n        var\
    \ k = 0\n        var count = 0\n        while (count < n) {\n            k = i\
    \ + j\n            if (isPrime(k)) count += 1\n            i = j\n           \
    \ j = k\n        }\n        return k", "        var fib = new ArrayBuffer[Long]()\n\
    \        fib += 2\n        fib += 3\n        var i = 2\n        while (i <= n)\
    \ {\n            fib += fib(i - 1) + fib(i - 2)\n            if (isPrime(fib(i)))\
    \ i += 1\n        }\n        fib(n - 1)", "        var fibs = new ArrayBuffer[Long]();\n\
    \        fibs += 2; fibs += 3; fibs += 5; fibs += 8;\n        var i = 4;\n   \
    \     while (i < n) {\n            fibs += fibs(i - 1) + fibs(i - 2);\n      \
    \      i += 1;\n        }\n        return fibs(n.toInt - 1);", "        var fibs\
    \ = new ArrayBuffer[Long]();\n        fibs += 2; fibs += 3; fibs += 5; fibs +=\
    \ 8;\n        var i = 4;\n        while (i < n) {\n            fibs += fibs(i\
    \ - 1) + fibs(i - 2);\n            i += 1;\n        }\n        return fibs(n.toInt\
    \ - 1);", "        var fib = new Fibonacci()\n        var count = 0L\n       \
    \ var num = 0L\n        while (count < n) {\n            num = fib.next\n    \
    \        if (isPrime(num)) count += 1\n        }\n        return num"]
stop_tokens:
- "\n    }\n"
