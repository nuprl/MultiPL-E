name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"\
  abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    def vowelsCount(s\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `s` is a string representing\
    \ a word\n        // `return` the number of vowels in the string\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val\
    \ sLower = s.toLowerCase()\n        val sLowerLast = sLower.last\n        val\
    \ sLowerLastSet = Set(sLowerLast)\n        val sLowerLastSetIntersect = sLowerLastSet.intersect(y)\n\
    \        val sLowerLastSetIntersectSize = sLowerLastSetIntersect.size\n      \
    \  val sLowerLastSetIntersectSizeLong = sLowerLastSetIntersectSize.toLong\n  \
    \      val sLowerLastSetIntersectSizeLongZero = sLowerLastSetIntersectSizeLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLong = sLowerLastSetIntersectSizeLongZero\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLong = sLowerLastSetIntersectSizeLongZeroLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLong\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLongLong\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLong - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLong + 1\n        val\
    \ sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLong + 1\n \
    \       val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersect", "        // Fill Up this function body\n        //\
    \ `s` contains only lower case letters\n        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length\
    \ - 1) == 'y') count += 1\n        count", "        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length", "        val vowels\
    \ = \"aeiouy\"\n        s.toLowerCase.filter(vowels.contains(_)).length", "  \
    \      var cnt = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') cnt += 1\n\
    \        }\n        if (s(s.length - 1) == 'y') cnt += 1\n        return cnt",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        val vowels = \"aeiouy\"\n        s.toLowerCase.filter(vowels.contains(_)).length",
  '        s.filter(c => "aeiouyAEIOUY".contains(c)).length', "        s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n\
    \        val sLowerList = sLower.toList\n        val sLowerListLength = sLowerList.length\n\
    \        val sLowerListLast = sLowerList(sLowerListLength - 1)\n        val sLowerListLastIsVowel\
    \ = vowels.contains(sLowerListLast)\n        val sLowerListLastIsY = sLowerListLast\
    \ == 'y'\n        val sLowerListLastIsVowelOrY = sLowerListLastIsVowel || sLowerListLastIsY\n\
    \        val sLowerListLastIsVowelOrYCount = if (sLowerListLastIsVowelOrY) 1 else\
    \ 0\n        val sLowerListWithoutLast = sLowerList.take(sLowerListLength - 1)\n\
    \        val sLowerListWithoutLastVowelsCount = sLowerListWithoutLast.count(vowels.contains(_))\n\
    \        sLowerListWithoutLastVowelsCount + sLowerListLastIsVowelOrYCount", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Fill up this function body\n        // 'return\
    \ 0' is just a placeholder for compilation\n        return 0", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.count(vowels.contains(_))\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length", "        // Fill\
    \ Up this function body\n        // `s` contains only lower case letters\n   \
    \     val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n \
    \       val isLastVowel = vowels.contains(last)\n        val count = s.count(vowels.contains(_))\n\
    \        if (isLastVowel) count + 1 else count", "        // Fill Up this function\
    \ body\n        // `s` is a string representing a word\n        // You need to\
    \ return the number of vowels in the string\n        // Vowels in this case are\
    \ 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        // vowel, but only when\
    \ it is at the end of the given word.\n        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count += 1\n\
    \            }\n            if (c == 'y' && i == s.length - 1) {\n           \
    \     count += 1\n            }\n        }\n        count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.indexOf(c) == s.length\
    \ - 1)) {\n                count += 1\n            }\n        }\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsSet = vowels.toSet\n        val sLower = s.toLowerCase\n  \
    \      val sList = sLower.toList\n        val sListReverse = sList.reverse\n \
    \       val sListReverseSet = sListReverse.toSet\n        val sListReverseSetIntersect\
    \ = sListReverseSet.intersect(vowelsSet)\n        val sListReverseSetIntersectSize\
    \ = sListReverseSetIntersect.size\n        val sListReverseSetIntersectSizeLong\
    \ = sListReverseSetIntersectSize.toLong\n        val sListSet = sList.toSet\n\
    \        val sListSetIntersect = sListSet.intersect(vowelsSet)\n        val sListSetIntersectSize\
    \ = sListSetIntersect.size\n        val sListSetIntersectSizeLong = sListSetIntersectSize.toLong\n\
    \        val result = sListSetIntersectSizeLong + sListReverseSetIntersectSizeLong\n\
    \        result"]
stop_tokens:
- "\n    }\n"
