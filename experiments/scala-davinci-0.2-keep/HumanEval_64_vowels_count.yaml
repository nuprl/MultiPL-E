name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"\
  abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    def vowelsCount(s\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `s` is a string representing\
    \ a word\n        // `return` the number of vowels in the string\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val\
    \ sLower = s.toLowerCase()\n        val sLowerLast = sLower.last\n        val\
    \ sLowerLastSet = Set(sLowerLast)\n        val sLowerLastSetIntersect = sLowerLastSet.intersect(y)\n\
    \        val sLowerLastSetIntersectSize = sLowerLastSetIntersect.size\n      \
    \  val sLowerLastSetIntersectSizeLong = sLowerLastSetIntersectSize.toLong\n  \
    \      val sLowerLastSetIntersectSizeLongZero = sLowerLastSetIntersectSizeLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLong = sLowerLastSetIntersectSizeLongZero\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLong = sLowerLastSetIntersectSizeLongZeroLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLong\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLongLong\
    \ + 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLong - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLong + 1\n        val\
    \ sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLong = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLong\
    \ - 1\n        val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLong + 1\n \
    \       val sLowerLastSetIntersectSizeLongZeroLongLongLongLongLongLongLongLongLongLong\
    \ = sLowerLastSetIntersect", "        // Fill Up this function body\n        //\
    \ `s` contains only lower case letters\n        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length\
    \ - 1) == 'y') count += 1\n        count", "        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length", "        val vowels\
    \ = \"aeiouy\"\n        s.toLowerCase.filter(vowels.contains(_)).length", "  \
    \      var cnt = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') cnt += 1\n\
    \        }\n        if (s(s.length - 1) == 'y') cnt += 1\n        return cnt",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        val vowels = \"aeiouy\"\n        s.toLowerCase.filter(vowels.contains(_)).length",
  '        s.filter(c => "aeiouyAEIOUY".contains(c)).length', "        s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n\
    \        val sLowerList = sLower.toList\n        val sLowerListLength = sLowerList.length\n\
    \        val sLowerListLast = sLowerList(sLowerListLength - 1)\n        val sLowerListLastIsVowel\
    \ = vowels.contains(sLowerListLast)\n        val sLowerListLastIsY = sLowerListLast\
    \ == 'y'\n        val sLowerListLastIsVowelOrY = sLowerListLastIsVowel || sLowerListLastIsY\n\
    \        val sLowerListLastIsVowelOrYCount = if (sLowerListLastIsVowelOrY) 1 else\
    \ 0\n        val sLowerListWithoutLast = sLowerList.take(sLowerListLength - 1)\n\
    \        val sLowerListWithoutLastVowelsCount = sLowerListWithoutLast.count(vowels.contains(_))\n\
    \        sLowerListWithoutLastVowelsCount + sLowerListLastIsVowelOrYCount", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Fill up this function body\n        // 'return\
    \ 0' is just a placeholder for compilation\n        return 0", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.count(vowels.contains(_))\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length", "        // Fill\
    \ Up this function body\n        // `s` contains only lower case letters\n   \
    \     val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n \
    \       val isLastVowel = vowels.contains(last)\n        val count = s.count(vowels.contains(_))\n\
    \        if (isLastVowel) count + 1 else count", "        // Fill Up this function\
    \ body\n        // `s` is a string representing a word\n        // You need to\
    \ return the number of vowels in the string\n        // Vowels in this case are\
    \ 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        // vowel, but only when\
    \ it is at the end of the given word.\n        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count += 1\n\
    \            }\n            if (c == 'y' && i == s.length - 1) {\n           \
    \     count += 1\n            }\n        }\n        count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.indexOf(c) == s.length\
    \ - 1)) {\n                count += 1\n            }\n        }\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsSet = vowels.toSet\n        val sLower = s.toLowerCase\n  \
    \      val sList = sLower.toList\n        val sListReverse = sList.reverse\n \
    \       val sListReverseSet = sListReverse.toSet\n        val sListReverseSetIntersect\
    \ = sListReverseSet.intersect(vowelsSet)\n        val sListReverseSetIntersectSize\
    \ = sListReverseSetIntersect.size\n        val sListReverseSetIntersectSizeLong\
    \ = sListReverseSetIntersectSize.toLong\n        val sListSet = sList.toSet\n\
    \        val sListSetIntersect = sListSet.intersect(vowelsSet)\n        val sListSetIntersectSize\
    \ = sListSetIntersect.size\n        val sListSetIntersectSizeLong = sListSetIntersectSize.toLong\n\
    \        val result = sListSetIntersectSizeLong + sListReverseSetIntersectSizeLong\n\
    \        result", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n       \
    \ val y = Set('y')\n        s.count(vowels.contains(_)) + (if (s.last == 'y')\
    \ 1 else 0)", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        val count = s.filter(vowels.contains(_)).length\n   \
    \     if (vowels.contains(last)) count + 1 else count", '        s.toLowerCase.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val vowels_y = Set('a',\
    \ 'e', 'i', 'o', 'u', 'y')\n        val last = s.last\n        val last_is_y =\
    \ last == 'y'\n        val count = s.filter(last_is_y match {\n            case\
    \ true => vowels_y.contains(_)\n            case false => vowels.contains(_)\n\
    \        }).length\n        count", "        // Fill Up this function body\n \
    \       // `s` is a string representing a word\n        // `return` the number\
    \ of vowels in the string\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val sLower = s.toLowerCase\n        var count = 0\n        for (i <-\
    \ 0 until sLower.length) {\n            if (vowels.contains(sLower(i))) {\n  \
    \              count += 1\n            }\n        }\n        if (sLower.length\
    \ > 1 && sLower(sLower.length - 1) == 'y') {\n            count += 1\n       \
    \ }\n        count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n    \
    \    val y = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        // Fill Up this\
    \ function body\n        // `s` is a string\n        // `return` the number of\
    \ vowels in `s`\n        val vowels = \"aeiou\"\n        val last = s.last\n \
    \       val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (vowels.contains(s(i))) count += 1\n        }\n\
    \        if (s.length > 1 && s(s.length - 1) == 'y') count += 1\n        return\
    \ count", '        s.count(c => "aeiouy".contains(c.toLower))', "        s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' &&\
    \ s.indexOf(c) == s.length - 1)).length", "        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i)\
    \ == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n      \
    \      }\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'y').length", "        if (s.length == 0) return 0\n   \
    \     val vowels = \"aeiouy\"\n        if (vowels.contains(s.head.toLower)) 1\
    \ + vowelsCount(s.tail)\n        else vowelsCount(s.tail)", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.count(vowels.contains(_))\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count\
    \ += 1\n            }\n        }\n        if (s(s.length - 1) == 'y') {\n    \
    \        count += 1\n        }\n        return count", "        // Fill Up this\
    \ function body\n        // `s` contains only lower case letters\n        // 'y'\
    \ is a vowel only when it is at the end of the word\n        // For Example:\n\
    \        // >>> vowels_count(\"abcde\")\n        // 2\n        // >>> vowels_count(\"\
    ACEDY\")\n        // 3\n        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o'\
    \ || s(i) == 'u') {\n                count += 1\n            }\n        }\n  \
    \      if (s(s.length - 1) == 'y') {\n            count += 1\n        }\n    \
    \    count", "        // Fill Up this function body\n        // `s` contains only\
    \ lowercase letters\n        // 'y' is a vowel only when it is at the end of the\
    \ word\n        // 'y' is not a vowel when it is at the beginning or in the middle\
    \ of the word\n        var count = 0\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n            if (s(i) ==\
    \ 'y' && i == s.length - 1) {\n                count += 1\n            }\n   \
    \     }\n        count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        var count = 0\n        for (c <- s) {\n            if (vowels.contains(c.toLower))\
    \ count += 1\n        }\n        if (s.last.toLower == 'y') count += 1\n     \
    \   count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n    \
    \    for (c <- s) {\n            if (vowels.contains(c)) count += 1\n        }\n\
    \        if (s.length > 1 && s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val lastChar\
    \ = s.last\n        val isLastCharVowel = vowels.contains(lastChar)\n        val\
    \ isLastCharY = lastChar == 'y'\n        val isLastCharVowelOrY = isLastCharVowel\
    \ || isLastCharY\n        val isLastCharConsonant = !isLastCharVowelOrY\n    \
    \    val lastCharVowelCount = if (isLastCharVowelOrY) 1 else 0\n        val sWithoutLastChar\
    \ = s.dropRight(1)\n        val sWithoutLastCharVowelCount = sWithoutLastChar.count(vowels.contains(_))\n\
    \        sWithoutLastCharVowelCount + lastCharVowelCount", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        s.filter(vowels.contains(_)).length + (if (vowels.contains(last))\
    \ 1 else 0)", "        // Fill Up this function body\n        // `s` contains\
    \ only lower case letters\n        // 'y' is a vowel only when it is at the end\
    \ of the word\n        // 'a', 'e', 'i', 'o', 'u' are vowels\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count\
    \ += 1\n            }\n        }\n        if (s(s.length - 1) == 'y') {\n    \
    \        count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `s` contains only lower case letters\n        // 'y' is a vowel\
    \ only when it is at the end of the word\n        // 'y' is not a vowel when it\
    \ is at the end of the word\n        // 'y' is not a vowel when it is not at the\
    \ end of the word\n        // 'y' is a vowel when it is not at the end of the\
    \ word\n        // 'y' is not a vowel when it is at the end of the word\n    \
    \    // 'y' is a vowel when it is at the end of the word\n        // 'y' is not\
    \ a vowel when it is not at the end of the word\n        // 'y' is a vowel when\
    \ it is not at the end of the word\n        // 'y' is not a vowel when it is at\
    \ the end of the word\n        // 'y' is a vowel when it is at the end of the\
    \ word\n        // 'y' is not a vowel when it is not at the end of the word\n\
    \        // 'y' is a vowel when it is not at the end of the word\n        // 'y'\
    \ is not a vowel when it is at the end of the word\n        // 'y' is a vowel\
    \ when it is at the end of the word\n        // 'y' is not a vowel when it is\
    \ not at the end of the word\n        // 'y' is a vowel when it is not at the\
    \ end of the word\n        // 'y' is not a vowel when it is at the end of the\
    \ word\n        // 'y' is a vowel when it is at the end of the word\n        //\
    \ 'y' is not a vowel when it is not at the end of the word\n        // 'y' is\
    \ a vowel when it is not at the end of the word\n        // 'y' is not a vowel\
    \ when it is at the end of the word\n        // 'y' is a vowel when it is at the\
    \ end of the word\n        // 'y' is not a vowel when it is not at the end of\
    \ the word\n        // 'y' is a vowel when it is not at the end of the word\n\
    \        // 'y' is not a vowel when it is at the end of the word\n        // 'y'\
    \ is a vowel when it is at the end of the", "        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i)\
    \ == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length\
    \ - 1) == 'y') count += 1\n        return count", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.toLowerCase.filter(c
    => "aeiouy".contains(c)).size', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val vowelsInS = s.filter(vowels.contains(_))\n\
    \        if (vowels.contains(last)) vowelsInS.length + 1 else vowelsInS.length",
  "        val vowels = \"aeiouy\"\n        s.filter(vowels.contains(_)).length",
  "        val vowels = \"aeiouy\"\n        s.filter(vowels.contains(_)).length",
  "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y').length", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val lastChar = s.last\n        val isLastCharVowel = vowels.contains(lastChar)\n\
    \        val isLastCharY = lastChar == 'y'\n        val isLastCharVowelOrY = isLastCharVowel\
    \ || isLastCharY\n        val vowelsInS = s.filter(vowels.contains(_))\n     \
    \   val vowelsInSWithoutLastChar = if (isLastCharVowelOrY) vowelsInS.dropRight(1)\
    \ else vowelsInS\n        val numVowelsInS = vowelsInSWithoutLastChar.length\n\
    \        val numVowelsInSWithLastChar = if (isLastCharVowelOrY) numVowelsInS +\
    \ 1 else numVowelsInS\n        numVowelsInSWithLastChar", "        var count =\
    \ 0\n        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y') count += 1\n        }\n        if (s.last\
    \ == 'y') count += 1\n        return count", "        s.filter(c => c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "       \
    \ val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n     \
    \   val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        s.filter(x => x == 'a' || x == 'e' || x == 'i'\
    \ || x == 'o' || x == 'u' || x == 'y').length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val lastIsVowel = vowels.contains(last)\n\
    \        val vowelsInS = s.filter(vowels.contains(_))\n        if (lastIsVowel)\
    \ vowelsInS.length + 1 else vowelsInS.length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n        val sLowerLength\
    \ = sLower.length\n        if (sLowerLength == 0) 0\n        else if (sLowerLength\
    \ == 1) if (vowels.contains(sLower(0))) 1 else 0\n        else if (vowels.contains(sLower(sLowerLength\
    \ - 1))) vowelsCount(sLower.substring(0, sLowerLength - 1)) + 1\n        else\
    \ vowelsCount(sLower.substring(0, sLowerLength - 1))", "        var count = 0\n\
    \        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y') count += 1\n        }\n        if (s.length\
    \ > 1 && s(s.length - 1) == 'y') count += 1\n        return count", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for (c\
    \ <- s) {\n            if (vowels.contains(c)) count += 1\n        }\n       \
    \ if (s.last == 'y') count += 1\n        count", '        s.filter(c => "aeiouyAEIOUY".contains(c)).length',
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n        }\n        if (s(s.length - 1)\
    \ == 'y') count += 1\n        return count", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = \"aeiouy\"\n        s.filter(vowels.contains(_)).length", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val result\
    \ = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last)) result\
    \ + 1 else result", "        s.filter(c => c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || (c == 'y' && s.last == c)).length", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.toLowerCase.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (vowels.contains(s(i))) {\n\
    \                count += 1\n            }\n        }\n        if (s.length >\
    \ 1 && s(s.length - 1) == 'y') {\n            count += 1\n        }\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        s.toLowerCase.filter(c => c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last)) count\
    \ + 1 else count", "        // Fill Up this function body\n        // `s` contains\
    \ only lower case letters\n        // 'y' is a vowel only when it is at the end\
    \ of the word\n        var count = 0\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n        }\n        if\
    \ (s(s.length - 1) == 'y') {\n            count += 1\n        }\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.toLowerCase.filter(vowels.contains(_)).length",
  "        s.toLowerCase.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'y').length", "        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i'\
    \ || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n            }\n\
    \        }\n        if (s(s.length - 1) == 'y') {\n            count += 1\n  \
    \      }\n        return count", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.filter(vowels.contains(_)).length\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = \"aeiouy\"\n\
    \        val count = s.filter(c => vowels.contains(c.toLower)).length\n      \
    \  if (s.length > 1 && s.last.toLower == 'y') count + 1 else count", "       \
    \ val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n     \
    \   val lastIsVowel = vowels.contains(last)\n        val sWithoutLast = s.substring(0,\
    \ s.length - 1)\n        val sWithoutLastVowels = sWithoutLast.filter(vowels.contains(_))\n\
    \        val lastIsVowelLong = if (lastIsVowel) 1 else 0\n        sWithoutLastVowels.length\
    \ + lastIsVowelLong", "        var count = 0\n        for (c <- s) {\n       \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n                count += 1\n            }\n        }\n        return count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).size\n        if (vowels.contains(last))\
    \ count + 1 else count", '        s.filter(x => "aeiouyAEIOUY".contains(x)).length',
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        val vowels = \"aeiouy\"\n        s.filter(c => vowels.contains(c.toLower)).length",
  '        s.filter(c => "aeiouyAEIOUY".contains(c)).length', "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.toLowerCase.filter(vowels.contains(_)).length",
  "        // Fill Up this function body\n        // `s` contains only lower case\
    \ letters\n        // 'y' is a vowel only when it is at the end of the word\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n\
    \                count += 1\n            }\n        }\n        if (s(s.length\
    \ - 1) == 'y') {\n            count += 1\n        }\n        count", "       \
    \ s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'y').length", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n      \
    \  val last = s.last\n        val count = s.count(vowels.contains(_))\n      \
    \  if (vowels.contains(last)) count + 1 else count", "        // Fill Up this\
    \ function body\n        // `s` is the input string\n        // You have to return\
    \ the number of vowels in the string\n        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i'\
    \ || s(i) == 'o' || s(i) == 'u') count += 1\n            if (s(i) == 'y' && i\
    \ == s.length - 1) count += 1\n        }\n        count", "        // Fill Up\
    \ this function body\n        // `s` is the input string\n        // You have\
    \ to return the number of vowels in the string\n        var count = 0\n      \
    \  for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' ||\
    \ s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n \
    \           }\n        }\n        if (s(s.length - 1) == 'y') {\n            count\
    \ += 1\n        }\n        count", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n\
    \        if (s(s.length - 1) == 'y') count += 1\n        return count", "    \
    \    s.toLowerCase.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y').length", "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i)\
    \ == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length - 1) ==\
    \ 'y') count += 1\n        return count", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val isLastVowel = vowels.contains(last)\n\
    \        val count = s.count(vowels.contains(_))\n        if (isLastVowel) count\
    \ + 1 else count", "        // Fill Up this function body\n        // `s` is a\
    \ string representing a word\n        // `return` the number of vowels in the\
    \ string\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val count\
    \ = s.toLowerCase.filter(vowels.contains(_)).length\n        if (s.toLowerCase.endsWith(\"\
    y\")) count + 1 else count", "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i)\
    \ == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length - 1) ==\
    \ 'y') count += 1\n        return count", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val isLastVowel\
    \ = vowels.contains(last)\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (isLastVowel) count + 1 else count", "        var count = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e'\
    \ || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n\
    \            }\n        }\n        if (s(s.length - 1) == 'y') count += 1\n  \
    \      return count", "        // Fill Up this function body\n        // `s` contains\
    \ only lower case letters\n        // 'y' is a vowel only when it is at the end\
    \ of the word\n        // 'y' is not a vowel when it is at the beginning or middle\
    \ of the word\n        var count = 0\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n            if (s(i) ==\
    \ 'y' && i == s.length - 1) {\n                count += 1\n            }\n   \
    \     }\n        count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.toLowerCase.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        s.filter(vowels.contains(_)).length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = \"aeiouy\"\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val lastChar = s.last\n        val isLastCharVowel\
    \ = vowels.contains(lastChar)\n        val count = s.count(vowels.contains(_))\n\
    \        if (isLastCharVowel) count + 1 else count", "        val vowels = \"\
    aeiouy\"\n        s.filter(c => vowels.contains(c.toLower)).length", "       \
    \ val vowels = List('a', 'e', 'i', 'o', 'u')\n        val vowelsSet = vowels.toSet\n\
    \        val lastChar = s.last\n        val isLastCharVowel = vowelsSet.contains(lastChar)\n\
    \        val isLastCharY = lastChar == 'y'\n        val isLastCharVowelOrY = isLastCharVowel\
    \ || isLastCharY\n        val lastCharIsVowel = if (isLastCharVowelOrY) 1 else\
    \ 0\n        val vowelsInWord = s.filter(vowelsSet.contains(_)).length\n     \
    \   val result = vowelsInWord + lastCharIsVowel\n        result", "        var\
    \ count = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a'\
    \ || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n  \
    \      }\n        if (s(s.length - 1) == 'y') count += 1\n        return count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n\
    \        val sLowerLength = sLower.length\n        var count = 0\n        for\
    \ (i <- 0 until sLowerLength) {\n            if (vowels.contains(sLower(i))) count\
    \ += 1\n        }\n        if (sLowerLength > 1 && sLower(sLowerLength - 1) ==\
    \ 'y') count += 1\n        count", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        var count = 0\n        for (c <- s) {\n            if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.indexOf(c)\
    \ == s.length - 1)) {\n                count += 1\n            }\n        }\n\
    \        count", "        var count = 0\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n        }\n        if\
    \ (s(s.length - 1) == 'y') {\n            count += 1\n        }\n        return\
    \ count", "        s.toLowerCase.filter(c => c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y').length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.filter(vowels.contains(_)).length\
    \ + (if (vowels.contains(last)) 1 else 0)", "        var count = 0\n        for\
    \ (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || (c == 'y' && s.indexOf(c) == s.length - 1)) count += 1\n       \
    \ }\n        count", "        // Fill Up this function body\n        // `s` contains\
    \ only lower case letters\n        // 'y' is a vowel only when it is at the end\
    \ of the word\n        // 'a', 'e', 'i', 'o', 'u' are vowels\n        // 'y' is\
    \ not a vowel when it is not at the end of the word\n        var count = 0\n \
    \       for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) ==\
    \ 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count +=\
    \ 1\n            }\n            if (s(i) == 'y' && i != s.length - 1) {\n    \
    \            count += 1\n            }\n        }\n        count", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.indexOf(c) == s.length\
    \ - 1)) {\n                count += 1\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        var count = 0L\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n            if (s(i) ==\
    \ 'y' && i == s.length - 1) {\n                count += 1\n            }\n   \
    \     }\n        count", "        val vowels = \"aeiou\"\n        s.filter(vowels.contains(_)).length",
  "        // Fill Up this function body\n        // `s` contains only lower case\
    \ letters\n        // 'y' is a vowel only when it is at the end of the word\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ s.count(vowels.contains(_))\n        if (s.last == 'y') vowelsCount + 1 else\
    \ vowelsCount", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        s.count(vowels.contains(_)) + (if (vowels.contains(last))\
    \ 1 else 0)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.toLowerCase.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (vowels.contains(sLower(i))) count += 1\n        }\n        if (sLower.endsWith(\"\
    y\")) count += 1\n        count", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        s.filter(vowels.contains(_)).length", "        // Fill Up this\
    \ function body\n        // `s` contains only lower case letters\n        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val\
    \ lastIsVowel = vowels.contains(last)\n        val count = s.count(vowels.contains(_))\n\
    \        if (lastIsVowel) count + 1 else count", "        var count = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e'\
    \ || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n      \
    \  if (s(s.length - 1) == 'y') count += 1\n        return count", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.filter(vowels.contains(_)).length\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        val count = s.filter(vowels.contains(_)).length\n  \
    \      if (s.last == 'y') count + 1 else count", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        s.toLowerCase.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels).length\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.count(vowels.contains(_))\
    \ + (if (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        var count\
    \ = 0\n        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y') {\n                count += 1\n       \
    \     }\n        }\n        return count", "        s.filter(c => c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "       \
    \ val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y').length", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n \
    \       s.filter(vowels.contains(_)).length", "        // Fill Up this function\
    \ body\n        // `s` contains only lowercase letters\n        // 'y' is a vowel\
    \ only when it is at the end of the word\n        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n         \
    \   }\n        }\n        if (s(s.length - 1) == 'y') {\n            count +=\
    \ 1\n        }\n        count", "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i)\
    \ == 'o' || s(i) == 'u') count += 1\n        }\n        if (s(s.length - 1) ==\
    \ 'y') count += 1\n        return count", "        // Fill Up this function body\n\
    \        // `s` contains only lower case letters\n        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val lastChar = s.last\n        val vowelsInS =\
    \ s.filter(vowels.contains(_))\n        if (vowels.contains(lastChar)) vowelsInS.length\
    \ + 1 else vowelsInS.length", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        s.toLowerCase.foldLeft(0)((a, b) => if (vowels.contains(b)) a + 1 else\
    \ a)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last =\
    \ s.last\n        s.filter(vowels.contains(_)).length + (if (vowels.contains(last))\
    \ 1 else 0)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ s2 = s.toLowerCase\n        var count = 0\n        for (i <- 0 until s2.length)\
    \ {\n            if (vowels.contains(s2(i))) count += 1\n        }\n        if\
    \ (count > 0 && s2(s2.length - 1) == 'y') count += 1\n        count", "      \
    \  var count = 0\n        for (c <- s) {\n            if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || c == 'y') count += 1\n        }\n   \
    \     return count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n    \
    \    val sLower = s.toLowerCase\n        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (vowels.contains(sLower(i))) {\n               \
    \ count += 1\n            }\n        }\n        if (sLower.last == 'y') {\n  \
    \          count += 1\n        }\n        count", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val isLastVowel = vowels.contains(last)\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (isLastVowel)\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val sLower = s.toLowerCase\n        val sLast = sLower.last\n       \
    \ val sLastIsVowel = vowels.contains(sLast)\n        val sWithoutLast = sLower.dropRight(1)\n\
    \        val sWithoutLastVowels = sWithoutLast.filter(vowels.contains(_))\n  \
    \      val sWithoutLastVowelsCount = sWithoutLastVowels.length\n        val sLastIsVowelCount\
    \ = if (sLastIsVowel) 1 else 0\n        sWithoutLastVowelsCount + sLastIsVowelCount",
  "        // Fill Up this function body\n        // `s` contains only lowercase letters\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        }\n        if (s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        // Fill Up this function body\n        // `s` is a string representing\
    \ a word\n        // You need to return the number of vowels in the string\n \
    \       // Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n        // Here,\
    \ 'y' is also a vowel, but only when it is at the end of the given word.\n   \
    \     val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val sLower = s.toLowerCase\n\
    \        val sLast = sLower.last\n        val sLastIsVowel = vowels.contains(sLast)\n\
    \        val sVowels = sLower.filter(vowels.contains(_))\n        if (sLastIsVowel)\
    \ sVowels.length + 1 else sVowels.length", "        s.toLowerCase.filter(x =>\
    \ x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y').length",
  "        // Fill Up this function body\n        // `s` contains only lower case\
    \ letters\n        // 'y' is a vowel only when it is at the end of the word\n\
    \        // 'a', 'e', 'i', 'o', 'u' are vowels\n        var count = 0\n      \
    \  for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' ||\
    \ s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n        }\n        if\
    \ (s(s.length - 1) == 'y') count += 1\n        count", "        val vowels = \"\
    aeiouy\"\n        val vowelsSet = vowels.toSet\n        val lastChar = s.last\n\
    \        val isLastCharVowel = vowelsSet.contains(lastChar)\n        val vowelsCount\
    \ = s.filter(vowelsSet.contains(_)).length\n        if (isLastCharVowel) vowelsCount\
    \ + 1 else vowelsCount", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsCount = s.filter(vowels.contains(_)).length\n        if (s.last\
    \ == 'y') vowelsCount + 1 else vowelsCount", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        // Fill Up this function body\n        // `s` contains only lowercase letters\n\
    \        // 'y' is a vowel only when it is at the end of the word\n        //\
    \ 'a', 'e', 'i', 'o', 'u' are vowels\n        // 'y' is a vowel only when it is\
    \ at the end of the word\n        // 'a', 'e', 'i', 'o', 'u' are vowels\n    \
    \    var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n            if (s(i) == 'y' && i == s.length\
    \ - 1) {\n                count += 1\n            }\n        }\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Fill Up this function body\n        // `s`\
    \ is a string representing a word\n        // `return` the number of vowels in\
    \ the string\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y\
    \ = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).size\n\
    \        if (y.contains(last)) count + 1 else count", "        var count = 0\n\
    \        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y') {\n                count += 1\n            }\n\
    \        }\n        return count", "        // Fill Up this function body\n  \
    \      // `s` contains only lowercase letters\n        // 'y' is a vowel only\
    \ when it is at the end of the word\n        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i'\
    \ || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n            }\n\
    \        }\n        if (s(s.length - 1) == 'y') {\n            count += 1\n  \
    \      }\n        count", "        // Fill Up this function body\n        // `s`\
    \ contains only lower case letters\n        // 'y' is a vowel only when it is\
    \ at the end of the word\n        // 'a', 'e', 'i', 'o', 'u' are vowels\n    \
    \    var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n        }\n        if (s(s.length - 1)\
    \ == 'y') {\n            count += 1\n        }\n        count", "        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        s.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u'\
    \ || x == 'y').length", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n \
    \       val last = s.last\n        val isLastVowel = vowels.contains(last)\n \
    \       val vowelsInWord = s.filter(vowels.contains(_)).length\n        if (isLastVowel)\
    \ vowelsInWord + 1 else vowelsInWord", "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n         \
    \   }\n        }\n        if (s(s.length - 1) == 'y') {\n            count +=\
    \ 1\n        }\n        return count", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n        val\
    \ yLast = y.contains(last)\n        val s1 = s.toLowerCase\n        val s2 = s1.filter(vowels.contains(_))\n\
    \        if (yLast) s2.length + 1 else s2.length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n \
    \       val count = s.filter(vowels.contains(_)).length\n        if (y.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        s.filter(vowels.contains(_)).length + (if\
    \ (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last =\
    \ s.last\n        val lastIsY = y.contains(last)\n        val vowelsInString =\
    \ s.filter(vowels.contains(_)).length\n        if (lastIsY) vowelsInString + 1\
    \ else vowelsInString", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n \
    \       val last = s.last\n        val count = s.count(vowels.contains(_))\n \
    \       if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        // Fill Up this function body\n        // `s` contains only lower case\
    \ letters\n        // 'y' is a vowel only when it is at the end of the word\n\
    \        // For Example:\n        // >>> vowelsCount(\"abcde\")\n        // 2\n\
    \        // >>> vowelsCount(\"ACEDY\")\n        // 3\n        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        val isLastVowel = vowels.contains(last)\n        val\
    \ count = s.count(vowels.contains(_))\n        if (isLastVowel) count + 1 else\
    \ count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last\
    \ = s.last\n        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = \"aeiouy\"\n        val vowelsSet\
    \ = vowels.toSet\n        val last = s.last\n        val lastIsVowel = vowelsSet.contains(last)\n\
    \        val count = s.count(vowelsSet.contains(_))\n        if (lastIsVowel)\
    \ count else count - 1", "        var count = 0\n        for (c <- s) {\n    \
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c ==\
    \ 'y') {\n                count += 1\n            }\n        }\n        return\
    \ count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') count += 1\n        }\n\
    \        if (s.length > 1 && s(s.length - 1) == 'y') count += 1\n        return\
    \ count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last\
    \ = s.last\n        s.filter(vowels).length + (if (vowels.contains(last)) 1 else\
    \ 0)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last =\
    \ s.last\n        val count = s.filter(vowels.contains(_)).length\n        if\
    \ (vowels.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).size\n\
    \        if (vowels.contains(last)) count + 1 else count"]
stop_tokens:
- "\n    }\n"
