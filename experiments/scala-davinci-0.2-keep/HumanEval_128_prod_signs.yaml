name: HumanEval_128_prod_signs
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given an array arr of integers and you need to return\n    // sum\
  \ of magnitudes of integers multiplied by product of all signs\n    // of each number\
  \ in the array, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n\
  \    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n    // >>> prod_signs([0,\
  \ 1]) == 0\n    // >>> prod_signs([]) == None\n    def prodSigns(arr : List[Long])\
  \ : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong,\
  \ 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong,\
  \ 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n   \
  \ assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong,\
  \ 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n\
  \    }\n\n}\n"
completions: ["        if (arr.isEmpty) None\n        else {\n            val signs\
    \ = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            Some(magnitudes.sum * signs.product)\n \
    \       }", "        if (arr.isEmpty) return None\n        var prod = 1\n    \
    \    var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod *= 1\n\
    \            else if (i < 0) prod *= -1\n            else prod *= 0\n        \
    \    sum += abs(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var prod = 1\n        var sum = 0\n        for (i <- arr)\
    \ {\n            if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n\
    \            else prod *= 0\n            sum += abs(i)\n        }\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n        val magnitudes = arr.map(x\
    \ => abs(x))\n        Some(signs.product * magnitudes.sum)", "        if (arr.length\
    \ == 0) {\n            None\n        } else {\n            var sum = 0L\n    \
    \        var prod = 1L\n            for (i <- arr) {\n                if (i >\
    \ 0) {\n                    sum += i\n                    prod *= 1\n        \
    \        } else if (i < 0) {\n                    sum += -i\n                \
    \    prod *= -1\n                } else {\n                    prod *= 0\n   \
    \             }\n            }\n            Some(sum * prod)\n        }", "  \
    \      if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod *=\
    \ i.signum\n        }\n        Some(sum * prod)", "        if (arr.length == 0)\
    \ return None\n        var prod = 1\n        var sum = 0\n        for (x <- arr)\
    \ {\n            if (x > 0) prod *= 1\n            else if (x < 0) prod *= -1\n\
    \            else prod *= 0\n            sum += abs(x)\n        }\n        Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var prod = 1\n\
    \        var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod *=\
    \ 1\n            else if (i < 0) prod *= -1\n            else prod *= 0\n    \
    \        sum += abs(i)\n        }\n        Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0L\n        var prod = 1L\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        return Some(sum * prod)", "        if (arr.isEmpty) return None\n\
    \        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ += -i\n                prod *= -1\n            }\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n        \
    \    val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n      \
    \      val magnitudes = arr.map(x => abs(x))\n            val prod = signs.product\n\
    \            val sum = magnitudes.sum\n            Some(prod * sum)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.sum * signs.product)\n        }", " \
    \       if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod *=\
    \ signum(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1\
    \ else 0)\n        val magnitudes = arr.map(x => abs(x))\n        Some(signs.product\
    \ * magnitudes.sum)", "        if (arr.isEmpty) None\n        else {\n       \
    \     var sum = 0L\n            var prod = 1L\n            for (i <- arr) {\n\
    \                sum += abs(i)\n                if (i != 0) prod *= signum(i)\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (i <-\
    \ arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n   \
    \             sum += -i\n                prod *= -1\n            }\n        }\n\
    \        return Some(sum * prod)", "        if (arr.isEmpty) return None\n   \
    \     var sum = 0L\n        var prod = 1L\n        for (x <- arr) {\n        \
    \    sum += abs(x)\n            prod *= signum(x)\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) None\n        else {\n            val signs\
    \ = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            Some(magnitudes.sum * signs.product)\n \
    \       }", "        if (arr.isEmpty) return None\n        var prod = 1\n    \
    \    var sum = 0\n        for (x <- arr) {\n            prod *= signum(x).toInt\n\
    \            sum += abs(x)\n        }\n        return Some(sum * prod)", "   \
    \     if (arr.isEmpty) return None\n        var prod = 1L\n        var sum = 0L\n\
    \        for (i <- arr) {\n            prod *= i.signum\n            sum += i.abs\n\
    \        }\n        Some(sum * prod)", "        if (arr.isEmpty) return None\n\
    \        val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n \
    \       val magnitudes = arr.map(x => abs(x))\n        Some(signs.product * magnitudes.sum)",
  "        if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val mags = arr.map(x => abs(x))\n       \
    \     Some(mags.sum * signs.product)\n        }", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0L\n        var prod = 1L\n        for (x <- arr) {\n\
    \            sum += abs(x)\n            prod *= signum(x)\n        }\n       \
    \ return Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(signs.product\
    \ * magnitudes.sum)\n        }", "        if (arr.length == 0) return None\n \
    \       var sum = 0L\n        var prod = 1L\n        for (x <- arr) {\n      \
    \      if (x > 0) prod *= 1\n            else if (x < 0) prod *= -1\n        \
    \    else prod *= 0\n            sum += abs(x)\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) None\n        else {\n            var prod\
    \ = 1\n            var sum = 0\n            for (i <- arr) {\n               \
    \ if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n         \
    \       else prod *= 0\n                sum += abs(i)\n            }\n       \
    \     Some(sum * prod)\n        }", "        if (arr.length == 0) return None\n\
    \        var sign = 1\n        var sum = 0\n        for (i <- arr) {\n       \
    \     if (i > 0) sign *= 1\n            else if (i < 0) sign *= -1\n         \
    \   else sign *= 0\n            sum += abs(i)\n        }\n        Some(sum * sign)",
  "        if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.sum * signs.product)\n        }", " \
    \       if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.sum * signs.product)\n        }", " \
    \       if (arr.isEmpty) return None\n        var prod = 1L\n        var sum =\
    \ 0L\n        for (x <- arr) {\n            if (x > 0) prod *= 1\n           \
    \ else if (x < 0) prod *= -1\n            else prod *= 0\n            sum += abs(x)\n\
    \        }\n        return Some(sum * prod)", "        if (arr.isEmpty) return\
    \ None\n        var prod = 1L\n        var sum = 0L\n        for (x <- arr) {\n\
    \            prod *= signum(x)\n            sum += abs(x)\n        }\n       \
    \ Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n        \
    \    val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n      \
    \      val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(signs.product\
    \ * magnitudes.sum)\n        }", "        if (arr.isEmpty) return None\n     \
    \   var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n          \
    \  sum += abs(i)\n            if (i != 0) prod *= i / abs(i)\n        }\n    \
    \    Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum\
    \ = 0L\n        var prod = 1L\n        for (x <- arr) {\n            if (x > 0)\
    \ prod *= 1\n            else if (x < 0) prod *= -1\n            else prod *=\
    \ 0\n            sum += abs(x)\n        }\n        return Some(sum * prod)", " \
    \       if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.product * signs.product)\n        }",
  "        if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum += -i\n                prod *= -1\n      \
    \      }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        val signs = arr.map(x => if (x == 0) 0 else if (x > 0)\
    \ 1 else -1)\n        val magnitudes = arr.map(x => if (x == 0) 0 else abs(x))\n\
    \        Some(magnitudes.sum * signs.product)", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n\
    \            sum += abs(i)\n            if (i > 0) prod *= 1\n            else\
    \ if (i < 0) prod *= -1\n            else prod *= 0\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.length == 0) return None\n        var sum\
    \ = 0L\n        var prod = 1L\n        for (i <- arr) {\n            if (i > 0)\
    \ sum += i\n            else if (i < 0) {\n                sum += -i\n       \
    \         prod *= -1\n            }\n        }\n        return Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (x <- arr) {\n            sum += abs(x)\n            prod *=\
    \ signum(x)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n\
    \            sum += abs(i)\n            prod *= signum(i)\n        }\n       \
    \ return Some(sum * prod)", "        if (arr.isEmpty) return None\n        var\
    \ sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n            sum +=\
    \ abs(i)\n            prod *= signum(i)\n        }\n        return Some(sum *\
    \ prod)", "        if (arr.isEmpty) None\n        else {\n            val prod\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1).reduce(_ * _)\n    \
    \        val sum = arr.map(x => if (x == 0) 0 else abs(x)).sum\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) return None\n        var prod\
    \ = 1\n        var sum = 0\n        for (x <- arr) {\n            if (x > 0) prod\
    \ *= 1\n            else if (x < 0) prod *= -1\n            else prod *= 0\n \
    \           sum += abs(x)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val prod = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1).product\n            Some(arr.map(abs(_)).sum * prod)\n\
    \        }", "        if (arr.length == 0) return None\n        var prod = 1\n\
    \        var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod *=\
    \ 1\n            else if (i < 0) prod *= -1\n            else prod *= 0\n    \
    \        sum += abs(i)\n        }\n        return Some(sum * prod)", "       \
    \ if (arr.isEmpty) None\n        else {\n            var sum = 0L\n          \
    \  var prod = 1L\n            for (i <- arr) {\n                sum += abs(i)\n\
    \                prod *= signum(i)\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) return None\n        var sum = 0L\n   \
    \     var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n   \
    \         prod *= signum(i)\n        }\n        Some(sum * prod)", "        if\
    \ (arr.length == 0) return None\n        var sum = 0L\n        var prod = 1L\n\
    \        for (i <- arr) {\n            sum += abs(i)\n            if (i > 0) prod\
    \ *= 1\n            else if (i < 0) prod *= -1\n            else prod *= 0\n \
    \       }\n        return Some(sum * prod)", "        if (arr.isEmpty) return\
    \ None\n        var sign = 1\n        var sum = 0\n        for (i <- arr) {\n\
    \            if (i < 0) sign *= -1\n            sum += abs(i)\n        }\n   \
    \     return Some(sum * sign)", "        if (arr.isEmpty) return None\n      \
    \  var prod = 1L\n        var sum = 0L\n        for (i <- arr) {\n           \
    \ if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n            else\
    \ prod *= 0\n            sum += abs(i)\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            if (i == 0) {\n                sum\
    \ = 0\n                prod = 1\n            } else if (i > 0) {\n           \
    \     sum += i\n                prod *= 1\n            } else {\n            \
    \    sum += -i\n                prod *= -1\n            }\n        }\n       \
    \ Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum =\
    \ 0L\n        var prod = 1L\n        for (x <- arr) {\n            sum += abs(x)\n\
    \            prod *= signum(x)\n        }\n        return Some(sum * prod)", " \
    \       if (arr.isEmpty) None\n        else {\n            var sum = 0L\n    \
    \        var prod = 1L\n            for (i <- arr) {\n                sum += abs(i)\n\
    \                prod *= i.signum\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            val signs\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            Some(signs.product * magnitudes.sum)\n \
    \       }", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n    \
    \        if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n      \
    \      else prod *= 0\n        }\n        Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var prod = 1\n        var sum = 0\n        for (i\
    \ <- arr) {\n            prod *= signum(i).toInt\n            sum += abs(i)\n\
    \        }\n        return Some(sum * prod)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x\
    \ > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (i <-\
    \ arr) {\n            sum += abs(i)\n            prod *= if (i == 0) 1 else i\
    \ / abs(i)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x\
    \ > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var product = 1\n        var sum = 0\n        for (i <-\
    \ arr) {\n            if (i > 0) product *= 1\n            else if (i < 0) product\
    \ *= -1\n            else product *= 0\n            sum += abs(i)\n        }\n\
    \        Some(sum * product)", "        if (arr.length == 0) return None\n   \
    \     var prod = 1\n        var sum = 0\n        for (i <- arr) {\n          \
    \  if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n            else\
    \ prod *= 0\n            sum += abs(i)\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        var product = 1\n        var sum\
    \ = 0\n        for (i <- arr) {\n            if (i > 0) product *= 1\n       \
    \     else if (i < 0) product *= -1\n            else product *= 0\n         \
    \   sum += abs(i)\n        }\n        Some(sum * product)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0L\n        var prod = 1L\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        return Some(sum * prod)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val sum = arr.map(abs(_)).sum\n            val prod = arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1).product\n            Some(sum *\
    \ prod)\n        }", "        if (arr.isEmpty) return None\n        var prod =\
    \ 1\n        var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod\
    \ *= 1\n            else if (i < 0) prod *= -1\n            else prod *= 0\n \
    \           sum += abs(i)\n        }\n        return Some(sum * prod)", "    \
    \    if (arr.isEmpty) return None\n        var sum = 0L\n        var prod = 1L\n\
    \        for (i <- arr) {\n            if (i > 0) sum += i\n            else if\
    \ (i < 0) {\n                sum += -i\n                prod *= -1\n         \
    \   }\n        }\n        return Some(sum * prod)", "        if (arr.length ==\
    \ 0) return None\n        var prod = 1\n        var sum = 0\n        for (i <-\
    \ arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0) prod *=\
    \ -1\n            else prod *= 0\n            sum += abs(i)\n        }\n     \
    \   return Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) return None\n      \
    \  var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n           \
    \ if (i > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n\
    \                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var prod = 1L\n   \
    \     var sum = 0L\n        for (x <- arr) {\n            if (x > 0) prod *= 1\n\
    \            else if (x < 0) prod *= -1\n            else prod *= 0\n        \
    \    sum += abs(x)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           val prod = signs.foldLeft(1L)(_ * _)\n            val sum = magnitudes.foldLeft(0L)(_\
    \ + _)\n            Some(prod * sum)\n        }", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x\
    \ > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     val prod = signs.product\n            val sum = magnitudes.sum\n       \
    \     Some(prod * sum)\n        }", "        if (arr.isEmpty) return None\n  \
    \      var prod = 1\n        var sum = 0\n        for (i <- arr) {\n         \
    \   if (i == 0) prod = 0\n            else if (i < 0) prod *= -1\n           \
    \ sum += abs(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (x <-\
    \ arr) {\n            sum += abs(x)\n            prod *= signum(x)\n        }\n\
    \        return Some(sum * prod)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else\
    \ -1)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(abs(_))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else Some(arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1).product * arr.map(abs(_)).sum)",
  "        if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.sum * signs.product)\n        }", " \
    \       if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod *=\
    \ signum(i)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x\
    \ > 0) 1 else -1)\n            val mags = arr.map(x => abs(x))\n            Some(mags.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) return None\n      \
    \  var prod = 1\n        var sum = 0\n        for (i <- arr) {\n            if\
    \ (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n            else\
    \ prod *= 0\n            sum += abs(i)\n        }\n        return Some(sum * prod)",
  "        if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod\
    \ *= signum(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.product * signs.product)\n        }", "        if\
    \ (arr.isEmpty) return None\n        var sum = 0L\n        var prod = 1L\n   \
    \     for (i <- arr) {\n            if (i > 0) sum += i\n            else if (i\
    \ < 0) {\n                sum += -i\n                prod *= -1\n            }\n\
    \        }\n        Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var product = 1\n        var sum = 0\n        for (i <- arr) {\n    \
    \        product *= signum(i).toInt\n            sum += abs(i)\n        }\n  \
    \      return Some(sum * product)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signProd = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else\
    \ -1).product\n            val magSum = arr.map(x => abs(x)).sum\n           \
    \ Some(signProd * magSum)\n        }", "        if (arr.isEmpty) return None\n\
    \        var prod = 1\n        var sum = 0\n        for (x <- arr) {\n       \
    \     if (x < 0) prod *= -1\n            else if (x > 0) sum += x\n        }\n\
    \        return Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var prod = 1\n        var sum = 0\n        for (x <- arr) {\n       \
    \     if (x > 0) prod *= 1\n            else if (x < 0) prod *= -1\n         \
    \   else prod *= 0\n            sum += abs(x)\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) {\n            None\n        } else {\n            var\
    \ prod = 1\n            var sum = 0\n            for (i <- arr) {\n          \
    \      if (i > 0) {\n                    prod *= 1\n                    sum +=\
    \ i\n                } else if (i < 0) {\n                    prod *= -1\n   \
    \                 sum += -i\n                } else {\n                    prod\
    \ *= 0\n                }\n            }\n            Some(sum * prod)\n     \
    \   }", "        if (arr.isEmpty) None\n        else {\n            val signs\
    \ = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            val signProduct = signs.foldLeft(1L)(_ *\
    \ _)\n            val magnitudeSum = magnitudes.foldLeft(0L)(_ + _)\n        \
    \    Some(signProduct * magnitudeSum)\n        }", "        if (arr.isEmpty) None\n\
    \        else Some(arr.map(x => if (x == 0) 0 else abs(x) * signum(x)).sum)",
  "        if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod *=\
    \ signum(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val p = arr.map(abs(_)).product\n        \
    \    val s = arr.map(signum(_)).product\n            Some(p * s)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.sum * signs.product)\n        }", " \
    \       if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           val prod = signs.product\n            val sum = magnitudes.sum\n \
    \           Some(prod * sum)\n        }", "        if (arr.isEmpty) return None\n\
    \        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n     \
    \       if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n       \
    \     else prod *= 0\n            sum += abs(i)\n        }\n        Some(sum *\
    \ prod)", "        if (arr.length == 0) return None\n        var prod = 1\n  \
    \      var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod *= 1\n\
    \            else if (i < 0) prod *= -1\n            else prod *= 0\n        \
    \    sum += abs(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           val prod = signs.product\n            Some(magnitudes.sum * prod)\n\
    \        }", "        if (arr.isEmpty) return None\n        var sum = 0L\n   \
    \     var prod = 1L\n        for (x <- arr) {\n            sum += abs(x)\n   \
    \         prod *= signum(x)\n        }\n        Some(sum * prod)", "        if\
    \ (arr.isEmpty) None\n        else {\n            val signs = arr.map(x => if\
    \ (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            val prod = signs.product\n            val sum = magnitudes.sum\n\
    \            Some(prod * sum)\n        }", "        if (arr.isEmpty) None\n  \
    \      else {\n            var sum = 0L\n            var prod = 1L\n         \
    \   for (i <- arr) {\n                sum += abs(i)\n                prod *= signum(i)\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val prod = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1).product\n            val sum = arr.map(x => abs(x)).sum\n\
    \            Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n  \
    \      else {\n            val signs = arr.map(x => if (x > 0) 1 else if (x <\
    \ 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n         \
    \   Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (x <-\
    \ arr) {\n            sum += abs(x)\n            if (x > 0) prod *= 1\n      \
    \      else if (x < 0) prod *= -1\n            else prod *= 0\n        }\n   \
    \     return Some(sum * prod)", "        if (arr.length == 0) return None\n  \
    \      var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n       \
    \     sum += abs(i)\n            prod *= signum(i)\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) return None\n        var prod =\
    \ 1\n        var sum = 0\n        for (i <- arr) {\n            if (i > 0) prod\
    \ *= 1\n            else if (i < 0) prod *= -1\n            else prod *= 0\n \
    \           sum += abs(i)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (i <-\
    \ arr) {\n            sum += abs(i)\n            prod *= signum(i)\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => if (x < 0) -x else x)\n           \
    \ val prodSigns = signs.product\n            val sumMagnitudes = magnitudes.sum\n\
    \            Some(prodSigns * sumMagnitudes)\n        }", "        if (arr.length\
    \ == 0) return None\n        var prod = 1\n        var sum = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0) prod\
    \ *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n  \
    \      return Some(sum * prod)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) return None\n      \
    \  val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n        val\
    \ magnitudes = arr.map(x => abs(x))\n        val signProduct = signs.product\n\
    \        val magnitudeSum = magnitudes.sum\n        Some(signProduct * magnitudeSum)",
  "        if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (x <- arr) {\n            sum += abs(x)\n            prod\
    \ *= if (x > 0) 1 else if (x < 0) -1 else 0\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n    \
    \        prod *= i.signum\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (x <-\
    \ arr) {\n            sum += abs(x)\n            prod *= signum(x)\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) return None\n        var\
    \ sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n  \
    \              prod *= -1\n            }\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        val (sum, prod) = arr.foldLeft((0L,\
    \ 1L))((acc, x) => {\n            val (s, p) = acc\n            val sign = if\
    \ (x == 0) 0 else if (x > 0) 1 else -1\n            (s + abs(x), p * sign)\n \
    \       })\n        Some(sum * prod)", "        if (arr.isEmpty) return None\n\
    \        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ += -i\n                prod *= -1\n            }\n        }\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (x <- arr) {\n            if (x > 0) prod *= 1\n\
    \            else if (x < 0) prod *= -1\n            else prod *= 0\n        \
    \    sum += abs(x)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (x <-\
    \ arr) {\n            if (x > 0) sum += x\n            else if (x < 0) {\n   \
    \             sum += -x\n                prod *= -1\n            }\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(signs.product\
    \ * magnitudes.sum)\n        }", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            var sum = 0L\n            var prod = 1L\n            for (i <- arr)\
    \ {\n                sum += abs(i)\n                prod *= signum(i)\n      \
    \      }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var prod = 1L\n        var sum = 0L\n        for (i <-\
    \ arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0) prod *=\
    \ -1\n            else prod *= 0\n            sum += abs(i)\n        }\n     \
    \   Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum\
    \ = 0L\n        var prod = 1L\n        for (x <- arr) {\n            if (x > 0)\
    \ prod *= 1\n            else if (x < 0) prod *= -1\n            else prod *=\
    \ 0\n            sum += abs(x)\n        }\n        Some(sum * prod)", "      \
    \  if (arr.length == 0) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum += -i\n                prod *= -1\n      \
    \      }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ {\n            None\n        } else {\n            var product = 1L\n      \
    \      var sum = 0L\n            for (i <- arr) {\n                if (i > 0)\
    \ {\n                    product *= 1\n                    sum += i\n        \
    \        } else if (i < 0) {\n                    product *= -1\n            \
    \        sum += -i\n                }\n            }\n            Some(sum * product)\n\
    \        }", "        if (arr.length == 0) return None\n        var sum = 0L\n\
    \        var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n\
    \            prod *= i.signum\n        }\n        Some(sum * prod)", "       \
    \ if (arr.isEmpty) return None\n        var prod = 1\n        var sum = 0\n  \
    \      for (x <- arr) {\n            if (x > 0) prod *= 1\n            else if\
    \ (x < 0) prod *= -1\n            else prod *= 0\n            sum += abs(x)\n\
    \        }\n        return Some(sum * prod)", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n\
    \            if (i > 0) sum += i\n            else if (i < 0) {\n            \
    \    sum += -i\n                prod *= -1\n            }\n        }\n       \
    \ Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum =\
    \ 0L\n        var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n\
    \            prod *= signum(i)\n        }\n        return Some(sum * prod)", " \
    \       if (arr.isEmpty) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            if (i >\
    \ 0) prod *= 1\n            else if (i < 0) prod *= -1\n            else prod\
    \ *= 0\n        }\n        Some(sum * prod)", "        if (arr.length == 0) None\n\
    \        else {\n            var sum = 0L\n            var prod = 1L\n       \
    \     for (x <- arr) {\n                sum += abs(x)\n                prod *=\
    \ signum(x)\n            }\n            Some(sum * prod)\n        }", "      \
    \  if (arr.isEmpty) return None\n        var sum = 0L\n        var prod = 1L\n\
    \        for (i <- arr) {\n            if (i > 0) sum += i\n            else if\
    \ (i < 0) {\n                sum += -i\n                prod *= -1\n         \
    \   }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0L\n        var prod = 1L\n        for (x <-\
    \ arr) {\n            if (x > 0) sum += x\n            else if (x < 0) {\n   \
    \             sum += -x\n                prod *= -1\n            }\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(abs(_))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signProd = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0).product\n            val magSum = arr.map(x => abs(x)).sum\n            Some(signProd\
    \ * magSum)\n        }", "        if (arr.isEmpty) None\n        else {\n    \
    \        val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n  \
    \          val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.length == 0) return None\n  \
    \      var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n       \
    \     sum += abs(i)\n            prod *= signum(i)\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) None\n        else Some(arr.map(abs(_)).sum\
    \ * arr.map(signum(_)).product)", "        if (arr.isEmpty) return None\n    \
    \    var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n         \
    \   sum += abs(i)\n            prod *= signum(i)\n        }\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (i <- arr) {\n            sum += abs(i)\n    \
    \        prod *= signum(i)\n        }\n        return Some(sum * prod)", "   \
    \     if (arr.isEmpty) return None\n        val signs = arr.map(x => if (x > 0)\
    \ 1 else if (x < 0) -1 else 0)\n        val magnitudes = arr.map(x => abs(x))\n\
    \        Some(signs.product * magnitudes.sum)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x > 0) 1 else if (x\
    \ < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     Some(magnitudes.sum * signs.product)\n        }", "        if (arr.length\
    \ == 0) return None\n        val signs = arr.map(x => if (x > 0) 1 else if (x\
    \ < 0) -1 else 0)\n        val magnitudes = arr.map(x => abs(x))\n        val\
    \ prod = signs.foldLeft(1L)(_ * _)\n        val sum = magnitudes.foldLeft(0L)(_\
    \ + _)\n        Some(prod * sum)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else\
    \ -1)\n            val magnitudes = arr.map(x => abs(x))\n            Some(signs.product\
    \ * magnitudes.sum)\n        }", "        if (arr.isEmpty) None\n        else\
    \ {\n            var sum = 0L\n            var prod = 1L\n            for (i <-\
    \ arr) {\n                sum += abs(i)\n                prod *= signum(i)\n \
    \           }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => if (x < 0)\
    \ -x else x)\n            val prod = signs.reduceLeft(_ * _)\n            val\
    \ sum = magnitudes.reduceLeft(_ + _)\n            Some(prod * sum)\n        }",
  "        if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod\
    \ *= signum(i)\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        val sign = arr.map(x => if (x == 0) 0 else if (x > 0) 1\
    \ else -1).product\n        val mag = arr.map(x => if (x < 0) -x else x).sum\n\
    \        Some(sign * mag)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => if (x < 0) -x else x)\n           \
    \ val prod = signs.product\n            val sum = magnitudes.sum\n           \
    \ Some(prod * sum)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => if (x == 0) 0 else abs(x))\n      \
    \      Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val prods = signs.product\n            val\
    \ mags = arr.map(x => abs(x))\n            Some(mags.sum * prods)\n        }",
  "        if (arr.isEmpty) return None\n        var prod = 1L\n        var sum =\
    \ 0L\n        for (i <- arr) {\n            if (i > 0) prod *= 1\n           \
    \ else if (i < 0) prod *= -1\n            else prod *= 0\n            sum += abs(i)\n\
    \        }\n        Some(sum * prod)", "        if (arr.isEmpty) return None\n\
    \        var prod = 1\n        var sum = 0\n        for (i <- arr) {\n       \
    \     if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n         \
    \   else prod *= 0\n            sum += abs(i)\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        val signs = arr.map(x => if (x ==\
    \ 0) 0 else if (x > 0) 1 else -1)\n        val magnitudes = arr.map(x => abs(x))\n\
    \        val prod = signs.foldLeft(1L)(_ * _)\n        val sum = magnitudes.foldLeft(0L)(_\
    \ + _)\n        Some(prod * sum)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.sum\
    \ * signs.product)\n        }", "        if (arr.isEmpty) return None\n      \
    \  var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n           \
    \ if (i > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n\
    \                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (x <- arr) {\n            sum += abs(x)\n    \
    \        prod *= signum(x)\n        }\n        return Some(sum * prod)", "   \
    \     if (arr.isEmpty) return None\n        var sum = 0L\n        var prod = 1L\n\
    \        for (i <- arr) {\n            if (i > 0) sum += i\n            else if\
    \ (i < 0) {\n                sum += -i\n                prod *= -1\n         \
    \   }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.sum * signs.product)\n        }", "        if (arr.length\
    \ == 0) return None\n        var sign = 1\n        var sum = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) sign *= 1\n            else if (i < 0) sign\
    \ *= -1\n            else sign *= 0\n            sum += abs(i)\n        }\n  \
    \      return Some(sum * sign)", "        if (arr.length == 0) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(signs.product\
    \ * magnitudes.sum)\n        }", "        if (arr.length == 0) return None\n \
    \       var prod = 1\n        var sum = 0\n        for (x <- arr) {\n        \
    \    if (x > 0) prod *= 1\n            else if (x < 0) prod *= -1\n          \
    \  else prod *= 0\n            sum += abs(x)\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.isEmpty) None\n        else Some(arr.map(x => if\
    \ (x > 0) 1 else if (x < 0) -1 else 0).product * arr.map(x => abs(x)).sum)", " \
    \       if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(signs.product * magnitudes.sum)\n        }", " \
    \       if (arr.length == 0) return None\n        var prod = 1\n        var sum\
    \ = 0\n        for (x <- arr) {\n            if (x > 0) prod *= 1\n          \
    \  else if (x < 0) prod *= -1\n            else prod *= 0\n            sum +=\
    \ abs(x)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signProd = arr.map(x => if (x == 0) 0\
    \ else if (x > 0) 1 else -1).product\n            val magSum = arr.map(x => if\
    \ (x < 0) -x else x).sum\n            Some(signProd * magSum)\n        }", " \
    \       if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(signs.product * magnitudes.sum)\n        }", " \
    \       if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        val prod = arr.map(x => if (x == 0) 0 else if (x > 0) 1\
    \ else -1).product\n        val sum = arr.map(x => abs(x)).sum\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) return None\n        var sum = 0L\n    \
    \    var prod = 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n\
    \            else if (i < 0) {\n                sum += -i\n                prod\
    \ *= -1\n            }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var prod = 1L\n            var sum = 0L\n\
    \            for (x <- arr) {\n                if (x > 0) prod *= 1\n        \
    \        else if (x < 0) prod *= -1\n                else prod *= 0\n        \
    \        sum += abs(x)\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.length == 0) return None\n        var sum = 0L\n        var prod\
    \ = 1L\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        val signs = arr.map(x => if (x == 0) 0 else if (x > 0)\
    \ 1 else -1)\n        val magnitudes = arr.map(x => if (x == 0) 0 else abs(x))\n\
    \        Some(magnitudes.sum * signs.product)", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0L\n        var prod = 1L\n        for (i <- arr) {\n\
    \            sum += abs(i)\n            prod *= i.signum\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n        \
    \    var prod = 1\n            var sum = 0\n            for (i <- arr) {\n   \
    \             if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n\
    \                else prod *= 0\n                sum += abs(i)\n            }\n\
    \            Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n  \
    \      else {\n            var prod = 1\n            var sum = 0\n           \
    \ for (i <- arr) {\n                prod *= signum(i).toInt\n                sum\
    \ += abs(i)\n            }\n            Some(sum * prod)\n        }", "      \
    \  if (arr.length == 0) return None\n        var sum = 0L\n        var prod =\
    \ 1L\n        for (i <- arr) {\n            sum += abs(i)\n            prod *=\
    \ signum(i)\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(signs.product * magnitudes.sum)\n        }", "        if (arr.length\
    \ == 0) return None\n        var prod = 1\n        var sum = 0\n        for (i\
    \ <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0) prod\
    \ *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n  \
    \      Some(sum * prod)"]
stop_tokens:
- "\n    }\n"
