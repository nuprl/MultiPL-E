name: HumanEval_62_derivative
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n\
  \    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    // >>> derivative([1,\
  \ 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
  \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong,\
  \ 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val n = xs.length\n        val ys = new Array[Long](n - 1)\n\
    \        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList",
  "        val n = xs.length\n        val dxs = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) dxs(i) = xs(i + 1) * (i + 1)\n        dxs.toList", "  \
    \      val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0\
    \ until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 until xs.length) {\n            result =\
    \ result :+ (xs(i) * i)\n        }\n        return result", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n    \
    \    val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n   \
    \         ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "      \
    \  def helper(xs : List[Long], acc : List[Long]) : List[Long] = {\n          \
    \  if (xs.length == 0) acc\n            else helper(xs.tail, acc :+ xs.head *\
    \ xs.length)\n        }\n        helper(xs.tail, List())", "        def loop(xs\
    \ : List[Long], i : Int, acc : List[Long]) : List[Long] = {\n            if (i\
    \ == xs.length) acc\n            else loop(xs, i + 1, acc :+ xs(i) * i)\n    \
    \    }\n        loop(xs, 1, List())", "        val n = xs.length\n        if (n\
    \ == 1) List(0)\n        else {\n            val res = new ListBuffer[Long]\n\
    \            for (i <- 1 until n) res += xs(i) * i\n            res.toList\n \
    \       }", "        val n = xs.length\n        for (i <- 0 until n - 1) yield\
    \ xs(i + 1) * (i + 1)", "        val ys = new ListBuffer[Long]\n        for (i\
    \ <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", "        val n =\
    \ xs.length\n        if (n == 1) List(0)\n        else {\n            val ys =\
    \ new ListBuffer[Long]\n            for (i <- 1 until n) ys += xs(i) * i\n   \
    \         ys.toList\n        }", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n     \
    \   }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ (xs(i) * i)\n   \
    \     }\n        return result", "        val n = xs.length\n        val ys =\
    \ new Array[Long](n - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n       \
    \ ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail']
stop_tokens:
- "\n    }\n"
