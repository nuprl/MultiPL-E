name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var i = 2L\n        var m = n\n        while (i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p", "        var x = n\n        var i = 2L\n    \
    \    while (i <= x) {\n            if (x % i == 0) {\n                x /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var max = 1L\n        var i = 2L\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                max = i\n                while\
    \ (n % i == 0) n /= i\n            }\n            i += 1\n        }\n        if\
    \ (n > 1) max = n\n        max", "        var x = n\n        var i = 2L\n    \
    \    while (i <= x) {\n            if (x % i == 0) {\n                x /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var p = 2L\n        var m = n\n        while (m != 1) {\n    \
    \        if (m % p == 0) {\n                m /= p\n            } else {\n   \
    \             p += 1\n            }\n        }\n        p", "        var x = n\n\
    \        var i = 2L\n        while (i * i <= x) {\n            while (x % i ==\
    \ 0) {\n                x /= i\n            }\n            i += 1\n        }\n\
    \        x", "        var m = n\n        var i = 2L\n        while (i <= m) {\n\
    \            if (m % i == 0) {\n                m /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max", "        var m = n\n        var i =\
    \ 2L\n        while (i <= sqrt(m)) {\n            if (m % i == 0) {\n        \
    \        m /= i\n                i -= 1\n            }\n            i += 1\n \
    \       }\n        m", "        var m = n\n        var p = 2L\n        while (m\
    \ > 1) {\n            if (m % p == 0) {\n                m /= p\n            }\
    \ else {\n                p += 1\n            }\n        }\n        p", "    \
    \    var m = n\n        var i = 2L\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                m /= i\n                i -= 1\n            }\n\
    \            i += 1\n        }\n        i", "        var m = n\n        var i\
    \ = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    m /= i\n                i -= 1\n            }\n            i += 1\n     \
    \   }\n        i", "        var largest = 0L\n        var i = 2L\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largest = i\n   \
    \             n /= i\n            }\n            else i += 1\n        }\n    \
    \    largest", "        var m = n\n        var p = 2L\n        while (m % p ==\
    \ 0) {\n            m /= p\n        }\n        p = 3L\n        while (m > 1) {\n\
    \            while (m % p == 0) {\n                m /= p\n            }\n   \
    \         p += 2\n        }\n        p -= 2\n        return p", "        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest", "        var i = 2L\n  \
    \      var nn = n\n        while (i * i <= nn) {\n            if (nn % i == 0)\
    \ {\n                nn /= i\n                while (nn % i == 0) nn /= i\n  \
    \          }\n            i += 1\n        }\n        if (nn == 1) i else nn",
  "        var i = 2L\n        var m = n\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      m /= i\n                i -= 1\n            }\n            i += 1\n   \
    \     }\n        return i", "        var i = 2L\n        var n2 = n\n        while\
    \ (i <= n2) {\n            if (n2 % i == 0) {\n                n2 /= i\n     \
    \           i -= 1\n            }\n            i += 1\n        }\n        i"]
stop_tokens:
- "\n    }\n"
