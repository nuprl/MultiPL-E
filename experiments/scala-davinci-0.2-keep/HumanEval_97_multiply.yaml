name: HumanEval_97_multiply
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Complete the function that takes two integers and returns \n    // the product\
  \ of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n\
  \    // multiply(148, 412) should return 16.\n    // multiply(19, 28) should return\
  \ 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15) should\
  \ return 20.\n    def multiply(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
  \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
  \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
  \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
  \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
completions: ["        val aUnit = a % 10\n        val bUnit = b % 10\n        aUnit\
    \ * bUnit", "        val aUnit = a % 10\n        val bUnit = b % 10\n        aUnit\
    \ * bUnit", '        return (a % 10) * (b % 10)', '        return (a % 10) * (b
    % 10)', '        (a % 10) * (b % 10)', "        val a1 = a % 10\n        val b1\
    \ = b % 10\n        a1 * b1", "        val a_unit = a % 10\n        val b_unit\
    \ = b % 10\n        a_unit * b_unit", '        (a % 10) * (b % 10)', "       \
    \ val aa = a.abs\n        val bb = b.abs\n        val aaUnit = aa % 10\n     \
    \   val bbUnit = bb % 10\n        aaUnit * bbUnit", "        val unitA = a % 10\n\
    \        val unitB = b % 10\n        unitA * unitB", '        (a % 10) * (b %
    10)', "        val aa = a.abs\n        val bb = b.abs\n        val aaa = aa %\
    \ 10\n        val bbb = bb % 10\n        aaa * bbb", "        val aUnit = a %\
    \ 10\n        val bUnit = b % 10\n        aUnit * bUnit", '        return (a %
    10) * (b % 10)', "        val aUnit = a % 10\n        val bUnit = b % 10\n   \
    \     aUnit * bUnit", '        return (a % 10) * (b % 10)', '        (a % 10)
    * (b % 10)', '        return (a % 10) * (b % 10)', '        return (a % 10) *
    (b % 10)', "        val a1 = a % 10\n        val b1 = b % 10\n        a1 * b1"]
stop_tokens:
- "\n    }\n"
