language: scala
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result = result :+ 0\n            else\
    \ result = result :+ abs(game(i) - guess(i))\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for(i <- 0 until game.length) {\n   \
    \         if(game(i) == guess(i)) {\n                result = result :+ 0\n  \
    \          } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val result = new ListBuffer[Long]\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result += 0\n            else result\
    \ += abs(game(i) - guess(i))\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result = result :+\
    \ 0\n            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = new ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result += 0\n   \
    \         } else {\n                result += abs(game(i) - guess(i))\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val result = new ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result += 0\n            else result\
    \ += abs(game(i) - guess(i))\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result = result :+\
    \ 0\n            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     // your code here\n        game.zip(guess).map(x => abs(x._1 - x._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result = result :+\
    \ 0\n            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result = result :+ 0\n            else\
    \ result = result :+ abs(game(i) - guess(i))\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val result = new ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = abs(game(i) - guess(i))\n            result += diff\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) {\n                result = result :+ 0\n\
    \            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val result = new ListBuffer[Long]\n        for (i <- 0 until game.length)\
    \ {\n            result += abs(game(i) - guess(i))\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val result = ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = abs(game(i) - guess(i))\n            result += diff\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result = result :+\
    \ 0\n            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     // game.zip(guess).map(x => abs(x._1 - x._2))\n        game.zip(guess).map(x\
    \ => abs(x._1 - x._2))\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) {\n                result = result :+\
    \ 0\n            } else {\n                result = result :+ abs(game(i) - guess(i))\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     val zipped = game.zip(guess)\n        zipped.map(x => abs(x._1 - x._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     // your code here\n        game.zip(guess).map(x => abs(x._1 - x._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     var result = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
    \ [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    \    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n   \
    \     game.zip(guess).map(x => abs(x._1 - x._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797476
