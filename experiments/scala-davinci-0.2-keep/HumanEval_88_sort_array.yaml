name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    // * sort_array([])\
  \ => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5])\
  \ => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4,\
  \ 3, 2, 1, 0]\n    def sortArray(array : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        if (array.length == 0) return array\n        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sortWith(_ > _)\n        else\
    \ array.sortWith(_ < _)", "        val sum = array.head + array.last\n       \
    \ if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "      \
    \  if (array.isEmpty) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        if (array.isEmpty) return array\n\
    \        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)", "        if (array.length == 0) return\
    \ List()\n        if (array.length == 1) return array\n        val sum = array(0)\
    \ + array(array.length - 1)\n        if (sum % 2 == 0) array.sortWith(_ > _)\n\
    \        else array.sortWith(_ < _)", "        if (array.length == 0) return array\n\
    \        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)", "        if (array.length == 0) return\
    \ array\n        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sorted.reverse\n        else array.sorted", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        if (array.size == 0) return array\n    \
    \    val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)", "        if (array.length == 0) return\
    \ array\n        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sorted.reverse\n        else array.sorted", "        if (array.size ==\
    \ 0) return array\n        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sorted.reverse\n        else array.sorted", "        if (array.length\
    \ == 0) return array\n        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_ < _)", "    \
    \    if (array.length == 0) return array\n        if (array.length == 1) return\
    \ array\n        val sum = array(0) + array(array.length - 1)\n        if (sum\
    \ % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_ < _)", "    \
    \    if (array.length == 0) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        if (array.isEmpty) return array\n      \
    \  val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)"]
stop_tokens:
- "\n    }\n"
