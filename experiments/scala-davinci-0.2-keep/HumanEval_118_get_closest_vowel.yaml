name: HumanEval_118_get_closest_vowel
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    // two consonants from the right side of the word (case sensitive).\n\
  \    // Vowels in the beginning and ending doesn't count. Return empty string if\
  \ you didn't\n    // find any vowel met the above condition. \n    // You may assume\
  \ that the given string contains English letter only.\n    // Example:\n    // get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\") ==> \"U\"\n    // get_closest_vowel(\"\
  quick\") ==> \"\"\n    // get_closest_vowel(\"ab\") ==> \"\"\n    def getClosestVowel(word\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val wordArray\
    \ = word.toCharArray\n        var vowel = \"\"\n        for (i <- wordArray.length\
    \ - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i))) {\n      \
    \          vowel = wordArray(i).toString\n                break\n            }\n\
    \        }\n        vowel", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val wordArray = word.toCharArray\n        var minDistance = word.length\n\
    \        var closestVowel = \"\"\n        for (i <- 0 until word.length) {\n \
    \           if (vowels.contains(wordArray(i))) {\n                var j = i -\
    \ 1\n                while (j >= 0 && !vowels.contains(wordArray(j))) j -= 1\n\
    \                if (j >= 0) {\n                    var k = i + 1\n          \
    \          while (k < word.length && !vowels.contains(wordArray(k))) k += 1\n\
    \                    if (k < word.length) {\n                        val distance\
    \ = k - j\n                        if (distance < minDistance) {\n           \
    \                 minDistance = distance\n                            closestVowel\
    \ = wordArray(i).toString\n                        }\n                    }\n\
    \                }\n            }\n        }\n        closestVowel", "       \
    \ val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants = Set('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z')\n        var closestVowel = \"\"\n        var closestDistance\
    \ = word.length\n        for (i <- word.length - 1 to 0 by -1) {\n           \
    \ if (vowels.contains(word(i))) {\n                var j = i - 1\n           \
    \     while (j >= 0 && !consonants.contains(word(j))) j -= 1\n               \
    \ if (j >= 0) {\n                    var k = i + 1\n                    while\
    \ (k < word.length && !consonants.contains(word(k))) k += 1\n                \
    \    if (k < word.length) {\n                        val distance = k - j\n  \
    \                      if (distance < closestDistance) {\n                   \
    \         closestDistance = distance\n                            closestVowel\
    \ = word(i).toString\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        closestVowel", "        var vowels\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var result = \"\"\n     \
    \   var min = Int.MaxValue\n        for (i <- 0 until word.length - 1) {\n   \
    \         if (vowels.contains(word(i).toString) && !vowels.contains(word(i + 1).toString))\
    \ {\n                var j = i + 1\n                while (j < word.length &&\
    \ !vowels.contains(word(j).toString)) j += 1\n                if (j < word.length\
    \ && vowels.contains(word(j).toString)) {\n                    if (j - i < min)\
    \ {\n                        min = j - i\n                        result = word(i).toString\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val wordArray = word.toCharArray\n        var result = \"\"\n      \
    \  for (i <- wordArray.length - 1 to 0 by -1) {\n            if (consonants.contains(wordArray(i)))\
    \ {\n                for (j <- i - 1 to 0 by -1) {\n                    if (vowels.contains(wordArray(j)))\
    \ {\n                        result = wordArray(j).toString\n                \
    \        return result\n                    }\n                }\n           \
    \ }\n        }\n        result", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val wordArray = word.toCharArray\n        var result = \"\"\n\
    \        for (i <- wordArray.length - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i)))\
    \ {\n                if (i == wordArray.length - 1) {\n                    if\
    \ (i - 1 >= 0 && !vowels.contains(wordArray(i - 1))) {\n                     \
    \   result = wordArray(i).toString\n                    }\n                } else\
    \ if (i == 0) {\n                    if (i + 1 < wordArray.length && !vowels.contains(wordArray(i\
    \ + 1))) {\n                        result = wordArray(i).toString\n         \
    \           }\n                } else {\n                    if (!vowels.contains(wordArray(i\
    \ - 1)) && !vowels.contains(wordArray(i + 1))) {\n                        result\
    \ = wordArray(i).toString\n                    }\n                }\n        \
    \    }\n        }\n        result", "        val vowels = \"aeiouAEIOU\"\n   \
    \     val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n      \
    \  val wordArray = word.toCharArray\n        val vowelIndices = wordArray.zipWithIndex.filter(x\
    \ => vowels.contains(x._1)).map(_._2)\n        val consonantIndices = wordArray.zipWithIndex.filter(x\
    \ => consonants.contains(x._1)).map(_._2)\n        val vowelConsonantPairs = vowelIndices.map(x\
    \ => (x, consonantIndices.filter(y => y > x).min)).filter(x => x._2 != None)\n\
    \        if (vowelConsonantPairs.isEmpty) \"\" else wordArray(vowelConsonantPairs.minBy(x\
    \ => x._2.get - x._1)._1).toString", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val wordReverse = word.reverse\n        var index = 0\n \
    \       var found = false\n        var result = \"\"\n        while (index < wordReverse.length\
    \ - 1 && !found) {\n            if (vowels.contains(wordReverse(index)) && !vowels.contains(wordReverse(index\
    \ + 1))) {\n                result = wordReverse(index).toString\n           \
    \     found = true\n            }\n            index += 1\n        }\n       \
    \ result", "        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val wordArray = word.toCharArray\n        var closestVowel = \"\"\n\
    \        for (i <- wordArray.length - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i)))\
    \ {\n                if (i == wordArray.length - 1) return \"\"\n            \
    \    if (consonants.contains(wordArray(i + 1))) {\n                    closestVowel\
    \ = wordArray(i).toString\n                    return closestVowel\n         \
    \       }\n            }\n        }\n        closestVowel", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val wordArray = word.toCharArray\n        var vowelIndex = -1\n    \
    \    for (i <- wordArray.length - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i)))\
    \ {\n                vowelIndex = i\n                break\n            }\n  \
    \      }\n        if (vowelIndex == -1) return \"\"\n        for (i <- vowelIndex\
    \ - 1 to 0 by -1) {\n            if (consonants.contains(wordArray(i))) {\n  \
    \              return wordArray(vowelIndex).toString\n            }\n        }\n\
    \        \"\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        var result = \"\"\n  \
    \      var lastConsonant = -1\n        for (i <- word.length - 1 to 0 by -1) {\n\
    \            if (consonants.contains(word(i))) {\n                if (lastConsonant\
    \ == -1) lastConsonant = i\n                else {\n                    for (j\
    \ <- i + 1 to lastConsonant) {\n                        if (vowels.contains(word(j)))\
    \ {\n                            result = word(j).toString\n                 \
    \           return result\n                        }\n                    }\n\
    \                    lastConsonant = i\n                }\n            }\n   \
    \     }\n        result", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val consonants = List('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        val wordList\
    \ = word.toList\n        val wordListReversed = wordList.reverse\n        val\
    \ wordListReversedWithIndex = wordListReversed.zipWithIndex\n        val wordListReversedWithIndexFiltered\
    \ = wordListReversedWithIndex.filter(x => consonants.contains(x._1))\n       \
    \ val wordListReversedWithIndexFilteredWithVowel = wordListReversedWithIndexFiltered.filter(x\
    \ => vowels.contains(wordListReversed(x._2 + 1)))\n        if (wordListReversedWithIndexFilteredWithVowel.isEmpty)\
    \ \"\" else wordListReversedWithIndexFilteredWithVowel.minBy(x => x._2)._1.toString",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val wordArray = word.toCharArray\n\
    \        var vowelIndex = -1\n        for (i <- wordArray.length - 1 to 0 by -1)\
    \ {\n            if (vowels.contains(wordArray(i))) {\n                vowelIndex\
    \ = i\n                break\n            }\n        }\n        if (vowelIndex\
    \ == -1) return \"\"\n        for (i <- vowelIndex - 1 to 0 by -1) {\n       \
    \     if (!vowels.contains(wordArray(i))) return wordArray(vowelIndex).toString\n\
    \        }\n        \"\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val wordArray = word.toCharArray\n        val wordArrayReversed = wordArray.reverse\n\
    \        var vowel = \"\"\n        for (i <- 0 until wordArrayReversed.length\
    \ - 1) {\n            if (vowels.contains(wordArrayReversed(i)) && !vowels.contains(wordArrayReversed(i\
    \ + 1))) {\n                vowel = wordArrayReversed(i).toString\n          \
    \      break\n            }\n        }\n        vowel", "        val vowels =\
    \ \"aeiou\"\n        var closest = \"\"\n        var min = Int.MaxValue\n    \
    \    for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                var j = i - 1\n                while (j >= 0 && !vowels.contains(word(j)))\
    \ j -= 1\n                if (j >= 0) {\n                    var k = i + 1\n \
    \                   while (k < word.length && !vowels.contains(word(k))) k +=\
    \ 1\n                    if (k < word.length) {\n                        val dist\
    \ = (i - j) + (k - i)\n                        if (dist < min) {\n           \
    \                 min = dist\n                            closest = word(i).toString\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        closest", "        val vowels = List(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        val consonants = List(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val wordList = word.toList\n\
    \        val wordListReversed = wordList.reverse\n        var result = \"\"\n\
    \        var vowelIndex = -1\n        var consonantIndex = -1\n        for (i\
    \ <- 0 until wordListReversed.length) {\n            if (vowels.contains(wordListReversed(i).toString))\
    \ {\n                vowelIndex = i\n                for (j <- i + 1 until wordListReversed.length)\
    \ {\n                    if (consonants.contains(wordListReversed(j).toString))\
    \ {\n                        consonantIndex = j\n                        result\
    \ = wordListReversed(i).toString\n                        break\n            \
    \        }\n                }\n            }\n            if (result != \"\")\
    \ break\n        }\n        result", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val wordArray = word.toCharArray\n        var closestVowel\
    \ = \"\"\n        var closestVowelDistance = Int.MaxValue\n        for (i <- 0\
    \ until wordArray.length - 1) {\n            if (vowels.contains(wordArray(i))\
    \ && !vowels.contains(wordArray(i + 1))) {\n                val distance = wordArray.length\
    \ - i - 1\n                if (distance < closestVowelDistance) {\n          \
    \          closestVowelDistance = distance\n                    closestVowel =\
    \ wordArray(i).toString\n                }\n            }\n        }\n       \
    \ closestVowel", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var\
    \ closestVowel = \"\"\n        var closestVowelDistance = word.length\n      \
    \  for (i <- 0 until word.length) {\n            if (vowels.contains(word(i)))\
    \ {\n                var j = i - 1\n                while (j >= 0 && !vowels.contains(word(j)))\
    \ j -= 1\n                if (j >= 0) {\n                    var k = i + 1\n \
    \                   while (k < word.length && !vowels.contains(word(k))) k +=\
    \ 1\n                    if (k < word.length) {\n                        val distance\
    \ = k - j\n                        if (distance < closestVowelDistance) {\n  \
    \                          closestVowelDistance = distance\n                 \
    \           closestVowel = word(i).toString\n                        }\n     \
    \               }\n                }\n            }\n        }\n        closestVowel",
  "        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val wordArray = word.toCharArray\n        for (i <- wordArray.length\
    \ - 1 to 0 by -1) {\n            if (consonants.contains(wordArray(i))) {\n  \
    \              for (j <- i - 1 to 0 by -1) {\n                    if (vowels.contains(wordArray(j)))\
    \ {\n                        return wordArray(j).toString\n                  \
    \  }\n                }\n            }\n        }\n        \"\"", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        var closestVowel = \"\"\n   \
    \     var closestDistance = Int.MaxValue\n        for (i <- word.length - 1 to\
    \ 0 by -1) {\n            if (vowels.contains(word(i))) {\n                var\
    \ j = i - 1\n                while (j >= 0 && !vowels.contains(word(j))) j -=\
    \ 1\n                if (j >= 0) {\n                    val distance = i - j\n\
    \                    if (distance < closestDistance) {\n                     \
    \   closestDistance = distance\n                        closestVowel = word(i).toString\n\
    \                    }\n                }\n            }\n        }\n        closestVowel"]
stop_tokens:
- "\n    }\n"
