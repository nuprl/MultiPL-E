name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n\
  \    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5,\
  \ 7]\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ val factors = new ListBuffer[Long]\n        var m = n\n        for (i <- 2 to\
    \ sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ += i\n                m /= i\n            }\n        }\n        if (m > 1) factors\
    \ += m\n        factors.toList", "        var result = List[Long]()\n        var\
    \ m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i ==\
    \ 0) {\n                result = i :: result\n                m /= i\n       \
    \     }\n        }\n        if (m > 1) result = m :: result\n        result",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var nn = n\n        var factors\
    \ = List[Long]()\n        var i = 2L\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        factors", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2L\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var x = n\n        while (x % 2 == 0) {\n            factors = 2 :: factors\n\
    \            x /= 2\n        }\n        var i = 3\n        while (i <= sqrt(x))\
    \ {\n            while (x % i == 0) {\n                factors = i :: factors\n\
    \                x /= i\n            }\n            i += 2\n        }\n      \
    \  if (x > 1) factors = x :: factors\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var result = List[Long]()\n        var m =\
    \ n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n\
    \                result = i :: result\n                m /= i\n            }\n\
    \        }\n        if (m > 1) result = m :: result\n        result", "      \
    \  var factors = List[Long]()\n        var m = n\n        var i = 2L\n       \
    \ while (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            }\n        }\n        if (m > 1) factors = factors :+ m\n   \
    \     factors", "        var factors = List[Long]()\n        var nn = n\n    \
    \    var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n \
    \               factors = factors :+ i\n                nn /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var x = n\n        var factors = List[Long]()\n        var p = 2L\n   \
    \     while (p <= x) {\n            if (x % p == 0) {\n                factors\
    \ = factors :+ p\n                x /= p\n            } else {\n             \
    \   p += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var x =\
    \ n\n        var i = 2L\n        while (i <= x) {\n            if (x % i == 0)\
    \ {\n                factors = factors :+ i\n                x /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n\
    \            while (m % i == 0) {\n                factors = factors :+ i\n  \
    \              m /= i\n            }\n        }\n        if (m > 1) factors =\
    \ factors :+ m\n        factors", "        var factors = List[Long]()\n      \
    \  var nn = n\n        var i = 2L\n        while (i * i <= nn) {\n           \
    \ while (nn % i == 0) {\n                factors = factors :+ i\n            \
    \    nn /= i\n            }\n            i += 1\n        }\n        if (nn > 1)\
    \ factors = factors :+ nn\n        factors"]
stop_tokens:
- "\n    }\n"
