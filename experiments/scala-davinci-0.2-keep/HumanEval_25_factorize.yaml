name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n\
  \    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5,\
  \ 7]\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ val factors = new ListBuffer[Long]\n        var m = n\n        for (i <- 2 to\
    \ sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ += i\n                m /= i\n            }\n        }\n        if (m > 1) factors\
    \ += m\n        factors.toList", "        var result = List[Long]()\n        var\
    \ m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i ==\
    \ 0) {\n                result = i :: result\n                m /= i\n       \
    \     }\n        }\n        if (m > 1) result = m :: result\n        result",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var nn = n\n        var factors\
    \ = List[Long]()\n        var i = 2L\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        factors", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2L\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var x = n\n        while (x % 2 == 0) {\n            factors = 2 :: factors\n\
    \            x /= 2\n        }\n        var i = 3\n        while (i <= sqrt(x))\
    \ {\n            while (x % i == 0) {\n                factors = i :: factors\n\
    \                x /= i\n            }\n            i += 2\n        }\n      \
    \  if (x > 1) factors = x :: factors\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var result = List[Long]()\n        var m =\
    \ n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n\
    \                result = i :: result\n                m /= i\n            }\n\
    \        }\n        if (m > 1) result = m :: result\n        result", "      \
    \  var factors = List[Long]()\n        var m = n\n        var i = 2L\n       \
    \ while (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            }\n        }\n        if (m > 1) factors = factors :+ m\n   \
    \     factors", "        var factors = List[Long]()\n        var nn = n\n    \
    \    var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n \
    \               factors = factors :+ i\n                nn /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var x = n\n        var factors = List[Long]()\n        var p = 2L\n   \
    \     while (p <= x) {\n            if (x % p == 0) {\n                factors\
    \ = factors :+ p\n                x /= p\n            } else {\n             \
    \   p += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var x =\
    \ n\n        var i = 2L\n        while (i <= x) {\n            if (x % i == 0)\
    \ {\n                factors = factors :+ i\n                x /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n\
    \            while (m % i == 0) {\n                factors = factors :+ i\n  \
    \              m /= i\n            }\n        }\n        if (m > 1) factors =\
    \ factors :+ m\n        factors", "        var factors = List[Long]()\n      \
    \  var nn = n\n        var i = 2L\n        while (i * i <= nn) {\n           \
    \ while (nn % i == 0) {\n                factors = factors :+ i\n            \
    \    nn /= i\n            }\n            i += 1\n        }\n        if (nn > 1)\
    \ factors = factors :+ nn\n        factors", "        var factors = List[Long]()\n\
    \        var x = n\n        while (x % 2 == 0) {\n            factors = 2 :: factors\n\
    \            x /= 2\n        }\n        var i = 3\n        while (i <= sqrt(x))\
    \ {\n            while (x % i == 0) {\n                factors = i :: factors\n\
    \                x /= i\n            }\n            i += 2\n        }\n      \
    \  if (x > 1) factors = x :: factors\n        factors", "        val factors =\
    \ new ListBuffer[Long]\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                factors += i\n        \
    \        m /= i\n            }\n        }\n        if (m > 1) factors += m\n \
    \       factors.toList", "        val factors = new ListBuffer[Long]\n       \
    \ var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i\
    \ == 0) {\n                factors += i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors += m\n        factors.toList", "      \
    \  var factors = List[Long]()\n        var m = n\n        var i = 2L\n       \
    \ while (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var cur = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (cur % i == 0) {\n                result = i :: result\n                cur\
    \ /= i\n            }\n        }\n        if (cur != 1) result = cur :: result\n\
    \        result", "        var nn = n\n        var factors = List[Long]()\n  \
    \      for (i <- 2 to sqrt(n).toInt) {\n            while (nn % i == 0) {\n  \
    \              factors = factors :+ i\n                nn /= i\n            }\n\
    \        }\n        if (nn != 1) factors = factors :+ nn\n        factors", " \
    \       var nn = n\n        var factors = List[Long]()\n        var i = 2L\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var x = n\n        var i = 2L\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors += i\n                x /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var m = n\n \
    \       var i = 2\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2L\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       for (i <- 2 to nn) {\n            while (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n   \
    \             factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var result = List[Long]()\n        var nn = n\n        for (i <- 2 to nn)\
    \ {\n            while (nn % i == 0) {\n                result = result :+ i\n\
    \                nn /= i\n            }\n        }\n        result", "       \
    \ var factors = List[Long]()\n        var p = 2\n        var nn = n\n        while\
    \ (nn > 1) {\n            if (nn % p == 0) {\n                factors = factors\
    \ :+ p\n                nn /= p\n            } else {\n                p += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2L\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var nn = n\n        for (i <- 2 to nn) {\n            while (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var nn = n\n        while (nn % 2 == 0) {\n            factors = 2 :: factors\n\
    \            nn /= 2\n        }\n        var i = 3\n        while (i <= sqrt(nn))\
    \ {\n            while (nn % i == 0) {\n                factors = i :: factors\n\
    \                nn /= i\n            }\n            i += 2\n        }\n     \
    \   if (nn > 1) factors = nn :: factors\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n\
    \            while (m % i == 0) {\n                factors = factors :+ i\n  \
    \              m /= i\n            }\n        }\n        if (m > 1) factors =\
    \ factors :+ m\n        factors", "        var factors = List[Long]()\n      \
    \  var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m %\
    \ i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            }\n        }\n        if (m > 1) factors = factors :+ m\n       \
    \ factors", "        var factors = List[Long]()\n        var nn = n\n        var\
    \ i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n        \
    \        factors = factors :+ i\n                nn /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ def factorize(n : Long, p : Long) : List[Long] = {\n            if (n == 1)\
    \ Nil\n            else if (n % p == 0) p :: factorize(n / p, p)\n           \
    \ else factorize(n, p + 1)\n        }\n        factorize(n, 2)", "        var\
    \ factors = List[Long]()\n        var m = n\n        var i = 2L\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2L\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        def factorizeHelper(n : Long, d : Long) : List[Long] = {\n            if\
    \ (n == 1) Nil\n            else if (n % d == 0) d :: factorizeHelper(n / d, d)\n\
    \            else factorizeHelper(n, d + 1)\n        }\n        factorizeHelper(n,\
    \ 2)", "        var factors = List[Long]()\n        var x = n\n        for (i\
    \ <- 2 to sqrt(n).toInt) {\n            while (x % i == 0) {\n               \
    \ factors = factors :+ i\n                x /= i\n            }\n        }\n \
    \       if (x > 1) factors = factors :+ x\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2L\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var x = n\n        var factors = List[Long]()\n  \
    \      var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n \
    \               factors = factors :+ i\n                x /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        def factorizeHelper(n : Long, d : Long) : List[Long] = {\n            if\
    \ (n == 1) Nil\n            else if (n % d == 0) d :: factorizeHelper(n / d, d)\n\
    \            else factorizeHelper(n, d + 1)\n        }\n        factorizeHelper(n,\
    \ 2)", "        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors", "        var\
    \ result = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                result = i :: result\n\
    \                m /= i\n            }\n        }\n        if (m > 1) result =\
    \ m :: result\n        result", "        var factors = List[Long]()\n        var\
    \ x = n\n        var i = 2L\n        while (i <= x) {\n            if (x % i ==\
    \ 0) {\n                factors = factors :+ i\n                x /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var m = n\n        var factors = List[Long]()\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var x = n\n        var i = 2L\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                factors = factors :+ i\n \
    \               x /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var nn = n\n        var factors\
    \ = List[Long]()\n        var i = 2L\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        factors", " \
    \       var nn = n\n        var factors = List[Long]()\n        var i = 2L\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var m = n\n        var i = 2\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n       \
    \         factors = factors :+ i\n                m /= i\n            }\n    \
    \    }\n        if (m > 1) factors = factors :+ m\n        factors", "       \
    \ var factors = List[Long]()\n        var m = n\n        var i = 2L\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        def factorize(n : Long,\
    \ primes : List[Long]) : List[Long] = {\n            if (n == 1) Nil\n       \
    \     else if (n % primes.head == 0) primes.head :: factorize(n / primes.head,\
    \ primes)\n            else factorize(n, primes.tail)\n        }\n        factorize(n,\
    \ primes(n))", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\n\
    \            i += 1\n        }\n        if (m > 1) factors = factors :+ m\n  \
    \      factors", "        var factors = List[Long]()\n        var m = n\n    \
    \    for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            }\n  \
    \      }\n        if (m > 1) factors = factors :+ m\n        factors", "     \
    \   var factors = List[Long]()\n        var nn = n\n        while (nn % 2 == 0)\
    \ {\n            factors = 2 :: factors\n            nn /= 2\n        }\n    \
    \    var i = 3\n        while (i <= sqrt(nn)) {\n            while (nn % i ==\
    \ 0) {\n                factors = i :: factors\n                nn /= i\n    \
    \        }\n            i += 2\n        }\n        if (nn > 1) factors = nn ::\
    \ factors\n        factors", "        var factors = List[Long]()\n        var\
    \ m = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        def factorize0(n : Long, d : Long) : List[Long] = {\n            if (n\
    \ == 1) Nil\n            else if (n % d == 0) d :: factorize0(n / d, d)\n    \
    \        else factorize0(n, d + 1)\n        }\n        factorize0(n, 2)", "  \
    \      var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var x = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (x % i == 0) {\n                factors += i\n                x /= i\n     \
    \       }\n        }\n        if (x > 1) factors += x\n        factors.toList",
  "        var factors = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                factors = factors :+ i\n\
    \                m /= i\n            }\n        }\n        if (m > 1) factors\
    \ = factors :+ m\n        factors", "        var factors = List[Long]()\n    \
    \    var i = 2L\n        var nn = n\n        while (i * i <= nn) {\n         \
    \   while (nn % i == 0) {\n                factors = factors :+ i\n          \
    \      nn /= i\n            }\n            i += 1\n        }\n        if (nn >\
    \ 1) factors = factors :+ nn\n        factors", "        var factors = List[Long]()\n\
    \        var x = n\n        var i = 2L\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors = factors :+ i\n                x\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        val factors = new ListBuffer[Long]\n        var m\
    \ = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        val factors = new ListBuffer[Long]\n\
    \        var nn = n\n        while (nn % 2 == 0) {\n            factors += 2\n\
    \            nn /= 2\n        }\n        var i = 3\n        while (i <= sqrt(nn))\
    \ {\n            while (nn % i == 0) {\n                factors += i\n       \
    \         nn /= i\n            }\n            i += 2\n        }\n        if (nn\
    \ > 1) factors += nn\n        factors.toList", "        var result = List[Long]()\n\
    \        var m = n\n        for (i <- 2L to m) {\n            if (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \      i -= 1\n            }\n        }\n        result", "        def factorizeR(n\
    \ : Long, primes : Stream[Long]) : List[Long] = {\n            if (n == 1) Nil\n\
    \            else if (n % primes.head == 0) primes.head :: factorizeR(n / primes.head,\
    \ primes)\n            else factorizeR(n, primes.tail)\n        }\n        factorizeR(n,\
    \ primes)", "        val factors = new ListBuffer[Long]\n        var m = n\n \
    \       var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors.toList", " \
    \       var nn = n\n        var factors = List[Long]()\n        var i = 2L\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var result = List[Long]()\n        var m = n\n  \
    \      for (i <- 2L to n) {\n            while (m % i == 0) {\n              \
    \  result = i :: result\n                m /= i\n            }\n        }\n  \
    \      result", "        var factors = List[Long]()\n        var m = n\n     \
    \   var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n    \
    \            factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2L\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2L\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = new ListBuffer[Long]\n        var m\
    \ = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var x = n\n        var i = 2L\n   \
    \     while (i <= x) {\n            if (x % i == 0) {\n                factors\
    \ = factors :+ i\n                x /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var nn = n\n        var i = 2L\n        while (i * i <=\
    \ nn) {\n            while (nn % i == 0) {\n                result = result :+\
    \ i\n                nn /= i\n            }\n            i += 1\n        }\n \
    \       if (nn > 1) result = result :+ nn\n        result", "        val factors\
    \ = new ListBuffer[Long]\n        var nn = n\n        while (nn % 2 == 0) {\n\
    \            factors += 2\n            nn /= 2\n        }\n        var i = 3\n\
    \        while (i <= sqrt(nn)) {\n            while (nn % i == 0) {\n        \
    \        factors += i\n                nn /= i\n            }\n            i +=\
    \ 2\n        }\n        if (nn > 1) factors += nn\n        factors.toList", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        val factors = new ListBuffer[Long]\n        var m\
    \ = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                factors = factors :+ i\n\
    \                m /= i\n            }\n        }\n        if (m > 1) factors\
    \ = factors :+ m\n        factors", "        var result = List[Long]()\n     \
    \   var m = n\n        while (m % 2 == 0) {\n            result = 2 :: result\n\
    \            m /= 2\n        }\n        var i = 3\n        while (i <= sqrt(m))\
    \ {\n            while (m % i == 0) {\n                result = i :: result\n\
    \                m /= i\n            }\n            i += 2\n        }\n      \
    \  if (m > 1) result = m :: result\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var d = 2\n        while (m > 1) {\n            while\
    \ (m % d == 0) {\n                factors = factors :+ d\n                m /=\
    \ d\n            }\n            d += 1\n        }\n        factors", "       \
    \ def factorize(n : Long, i : Long, acc : List[Long]) : List[Long] = {\n     \
    \       if (n == 1) acc\n            else if (n % i == 0) factorize(n / i, i,\
    \ i :: acc)\n            else factorize(n, i + 1, acc)\n        }\n        factorize(n,\
    \ 2, Nil)", "        var result = List[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            while (m % i == 0) {\n       \
    \         result = result :+ i\n                m /= i\n            }\n      \
    \      i += 1\n        }\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        for (i <- 2 to m) {\n            while (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  }\n        }\n        result", "        val factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var m = n\n        var factors = List[Long]()\n \
    \       var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        val factors =\
    \ new ListBuffer[Long]\n        var m = n\n        var i = 2L\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                factors += i\n     \
    \           m /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n   \
    \             factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        for (i <- 2L to m)\
    \ {\n            while (m % i == 0) {\n                factors = factors :+ i\n\
    \                m /= i\n            }\n        }\n        factors", "       \
    \ var nn = n\n        var factors = List[Long]()\n        var i = 2L\n       \
    \ while (i <= nn) {\n            if (nn % i == 0) {\n                factors =\
    \ factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var result = List[Long]()\n       \
    \ var m = n\n        for (i <- 2L to n) {\n            while (m % i == 0) {\n\
    \                result = result :+ i\n                m /= i\n            }\n\
    \        }\n        result", "        var factors = List[Long]()\n        var\
    \ nn = n\n        var p = 2L\n        while (nn > 1) {\n            while (nn\
    \ % p == 0) {\n                factors = factors :+ p\n                nn /= p\n\
    \            }\n            p += 1\n        }\n        factors", "        var\
    \ factors = List[Long]()\n        var m = n\n        var i = 2L\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n        }\n        if (nn != 1) factors = factors :+ nn\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      while (m % 2 == 0) {\n            factors ::= 2\n            m /= 2\n \
    \       }\n        var i = 3\n        while (i <= sqrt(m)) {\n            while\
    \ (m % i == 0) {\n                factors ::= i\n                m /= i\n    \
    \        }\n            i += 2\n        }\n        if (m > 1) factors ::= m\n\
    \        factors.reverse", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        def factorize(n\
    \ : Long, primes : List[Long]) : List[Long] = {\n            if (n == 1) Nil\n\
    \            else if (n % primes.head == 0) primes.head :: factorize(n / primes.head,\
    \ primes)\n            else factorize(n, primes.tail)\n        }\n        factorize(n,\
    \ primes)", "        val factors = ListBuffer[Long]()\n        var m = n\n   \
    \     var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              factors += i\n                m /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        factors.toList", "  \
    \      var result = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                result = i :: result\n\
    \                m /= i\n            }\n        }\n        if (m > 1) result =\
    \ m :: result\n        result", "        var factors = List[Long]()\n        var\
    \ m = n\n        var i = 2L\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var m = n\n        var i = 2L\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = new ListBuffer[Long]\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors.toList", " \
    \       var factors = List[Long]()\n        var nn = n\n        var i = 2\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var x = n\n        var i = 2L\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                factors = factors :+ i\n \
    \               x /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var result = List[Long]()\n   \
    \     var nn = n\n        for (i <- 2 to nn) {\n            while (nn % i == 0)\
    \ {\n                result = result :+ i\n                nn /= i\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m %\
    \ i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            }\n        }\n        if (m > 1) factors = factors :+ m\n       \
    \ factors", "        var factors = List[Long]()\n        var nn = n\n        for\
    \ (i <- 2L to sqrt(n).toLong) {\n            while (nn % i == 0) {\n         \
    \       factors = factors :+ i\n                nn /= i\n            }\n     \
    \   }\n        if (nn != 1) factors = factors :+ nn\n        factors", "     \
    \   var factors = List[Long]()\n        var nn = n\n        for (i <- 2 to nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n                i -= 1\n            }\n        }\n \
    \       factors", "        var factors = List[Long]()\n        var m = n\n   \
    \     for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n    \
    \            factors = factors :+ i\n                m /= i\n            }\n \
    \       }\n        if (m > 1) factors = factors :+ m\n        factors", "    \
    \    def factorizeHelper(n : Long, primes : List[Long]) : List[Long] = {\n   \
    \         if (n == 1) Nil\n            else if (n % primes.head == 0) primes.head\
    \ :: factorizeHelper(n / primes.head, primes)\n            else factorizeHelper(n,\
    \ primes.tail)\n        }\n        factorizeHelper(n, primes)", "        var result\
    \ = List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n\
    \            while (m % i == 0) {\n                result = i :: result\n    \
    \            m /= i\n            }\n        }\n        if (m > 1) result = m ::\
    \ result\n        result", "        var factors = List[Long]()\n        var nn\
    \ = n\n        var i = 2L\n        while (i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                factors = factors :+ i\n                nn /= i\n    \
    \        } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2L\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        for (i <- 2 to\
    \ sqrt(n).toInt) {\n            while (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n        }\n        if\
    \ (nn != 1) factors = factors :+ nn\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2L to m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n                i -= 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var i = 2L\n        var nn = n\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var x = n\n        var i = 2L\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors += i\n                x /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var m = n\n \
    \       for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n  \
    \              factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var factors = List[Long]()\n        var nn = n\n        var i = 2L\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                result = i :: result\n     \
    \           m /= i\n            }\n        }\n        if (m > 1) result = m ::\
    \ result\n        result", "        var factors = List[Long]()\n        var nn\
    \ = n\n        for (i <- 2 to nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \       }\n        factors", "        var result = List[Long]()\n        var m\
    \ = n\n        while (m % 2 == 0) {\n            result = 2 :: result\n      \
    \      m /= 2\n        }\n        var i = 3\n        while (i <= sqrt(m)) {\n\
    \            while (m % i == 0) {\n                result = i :: result\n    \
    \            m /= i\n            }\n            i += 2\n        }\n        if\
    \ (m > 1) result = m :: result\n        result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2L\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var x\
    \ = n\n        var i = 2L\n        while (i <= x) {\n            if (x % i ==\
    \ 0) {\n                factors = factors :+ i\n                x /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2L\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var result = List[Long]()\n       \
    \ var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i\
    \ == 0) {\n                result = i :: result\n                m /= i\n    \
    \        }\n        }\n        if (m > 1) result = m :: result\n        result",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2L\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var m = n\n        var i = 2L\n        while (i <= m) {\n            while\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            }\n            i += 1\n        }\n        factors", "       \
    \ var factors = List[Long]()\n        var x = n\n        var i = 2L\n        while\
    \ (i <= x) {\n            if (x % i == 0) {\n                factors = factors\
    \ :+ i\n                x /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2L\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        val factors = new ListBuffer[Long]\n        var m\
    \ = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0)\
    \ {\n                factors += i\n                m /= i\n            }\n   \
    \     }\n        if (m > 1) factors += m\n        factors.toList", "        var\
    \ factors = List[Long]()\n        var m = n\n        var i = 2L\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        def factorizeRec(n : Long,\
    \ primes : Stream[Long]) : List[Long] = {\n            if (n == 1) Nil\n     \
    \       else if (n % primes.head == 0) primes.head :: factorizeRec(n / primes.head,\
    \ primes)\n            else factorizeRec(n, primes.tail)\n        }\n        factorizeRec(n,\
    \ primes)", "        var result = List[Long]()\n        var x = n\n        var\
    \ i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n          \
    \      result = result :+ i\n                x /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        result", "        var\
    \ result = List[Long]()\n        var m = n\n        for (i <- 2L to m) {\n   \
    \         if (m % i == 0) {\n                result = result :+ i\n          \
    \      m /= i\n                i -= 1\n            }\n        }\n        result",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2L\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        val factors =\
    \ new ListBuffer[Long]\n        var m = n\n        var i = 2L\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                factors += i\n     \
    \           m /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        def factorize(n : Long, d :\
    \ Long) : List[Long] = {\n            if (n == 1) Nil\n            else if (n\
    \ % d == 0) d :: factorize(n / d, d)\n            else factorize(n, d + 1)\n \
    \       }\n        factorize(n, 2)", "        var result = List[Long]()\n    \
    \    var m = n\n        for (i <- 2 to m) {\n            while (m % i == 0) {\n\
    \                result = result :+ i\n                m /= i\n            }\n\
    \        }\n        result", "        var factors = List[Long]()\n        var\
    \ m = n\n        while (m % 2 == 0) {\n            factors = 2 :: factors\n  \
    \          m /= 2\n        }\n        var i = 3\n        while (i <= sqrt(m))\
    \ {\n            while (m % i == 0) {\n                factors = i :: factors\n\
    \                m /= i\n            }\n            i += 2\n        }\n      \
    \  if (m > 1) factors = m :: factors\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2L\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        val factors = new ListBuffer[Long]\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors += i\n                x /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2L\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            }\n        }\n        if (m > 1) factors = factors :+ m\n   \
    \     factors", "        var factors = List[Long]()\n        var m = n\n     \
    \   var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n    \
    \            factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2L\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        def factorizeRec(n\
    \ : Long, d : Long) : List[Long] = {\n            if (n == 1) Nil\n          \
    \  else if (n % d == 0) d :: factorizeRec(n / d, d)\n            else factorizeRec(n,\
    \ d + 1)\n        }\n        factorizeRec(n, 2)", "        var factors = List[Long]()\n\
    \        var num = n\n        var i = 2L\n        while (i <= num) {\n       \
    \     if (num % i == 0) {\n                factors = factors :+ i\n          \
    \      num /= i\n            }\n            else i += 1\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2L\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2L\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        def factorizeRec(n : Long, d : Long) : List[Long]\
    \ = {\n            if (n == 1) Nil\n            else if (n % d == 0) d :: factorizeRec(n\
    \ / d, d)\n            else factorizeRec(n, d + 1)\n        }\n        factorizeRec(n,\
    \ 2)", "        var factors = List[Long]()\n        var nn = n\n        var i\
    \ = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n          \
    \      factors = factors :+ i\n                nn /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ var factors = List[Long]()\n        var m = n\n        var i = 2L\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2L\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var nn = n\n        var factors = List[Long]()\n\
    \        var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n            else i += 1\n        }\n        factors", "        var result\
    \ = List[Long]()\n        var x = n\n        for (i <- 2 to sqrt(n).toInt) {\n\
    \            while (x % i == 0) {\n                result = i :: result\n    \
    \            x /= i\n            }\n        }\n        if (x > 1) result = x ::\
    \ result\n        result", "        if (n == 1) return List(1)\n        var m\
    \ = n\n        var factors = List[Long]()\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (m % i == 0) {\n                factors = factors :+ i\n\
    \                m /= i\n            }\n        }\n        if (m != 1) factors\
    \ = factors :+ m\n        factors", "        var factors = List[Long]()\n    \
    \    var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            }\n        }\n        if (m > 1) factors = factors :+ m\n       \
    \ factors", "        var factors = List[Long]()\n        var nn = n\n        for\
    \ (i <- 2L to nn) {\n            if (nn % i == 0) {\n                factors =\
    \ factors :+ i\n                nn /= i\n                i -= 1\n            }\n\
    \        }\n        factors", "        var factors = List[Long]()\n        var\
    \ nn = n\n        var i = 2\n        while (i <= nn) {\n            if (nn % i\
    \ == 0) {\n                factors = factors :+ i\n                nn /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   factors", "        var nn = n\n        var factors = List[Long]()\n      \
    \  var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n   \
    \             factors = factors :+ i\n                nn /= i\n            }\n\
    \            else i += 1\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var x = n\n        var i = 2L\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                factors = factors :+ i\n \
    \               x /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var nn = n\n        var p = 2L\n        while (nn > 1) {\n          \
    \  while (nn % p == 0) {\n                factors += p\n                nn /=\
    \ p\n            }\n            p += 1\n        }\n        factors.toList", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2L\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        val factors =\
    \ new ListBuffer[Long]\n        var m = n\n        var i = 2L\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                factors += i\n     \
    \           m /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        val factors = new ListBuffer[Long]\n\
    \        var x = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (x % i == 0) {\n                factors += i\n                x /= i\n     \
    \       }\n        }\n        if (x > 1) factors += x\n        factors.toList"]
stop_tokens:
- "\n    }\n"
