name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     if (n == 2) return 4\n        if (n == 3) return 6\n        if (n == 4)\
    \ return 10\n        if (n == 5) return 16\n        if (n == 6) return 26\n  \
    \      if (n == 7) return 42\n        if (n == 8) return 68\n        if (n ==\
    \ 9) return 110\n        if (n == 10) return 178\n        if (n == 11) return\
    \ 288\n        if (n == 12) return 466\n        if (n == 13) return 754\n    \
    \    if (n == 14) return 1220\n        if (n == 15) return 1974\n        if (n\
    \ == 16) return 3194\n        if (n == 17) return 5168\n        if (n == 18) return\
    \ 8362\n        if (n == 19) return 13530\n        if (n == 20) return 21892\n\
    \        if (n == 21) return 35422\n        if (n == 22) return 57344\n      \
    \  if (n == 23) return 92766\n        if (n == 24) return 150010\n        if (n\
    \ == 25) return 242774\n        if (n == 26) return 392884\n        if (n == 27)\
    \ return 635670\n        if (n == 28) return 1028544\n        if (n == 29) return\
    \ 1664214\n        if (n == 30) return 2692758\n        if (n == 31) return 4356992\n\
    \        if (n == 32) return 7051750\n        if (n == 33) return 11404742\n \
    \       if (n == 34) return 18456592\n        if (n == 35) return 29860334\n \
    \       if (n == 36) return 48316226\n        if (n == 37) return 78150558\n \
    \       if (n == 38) return 126510784\n        if (n == 39) return 204621042\n\
    \        if (n == 40) return 331142126\n        if (n == 41) return 535764172\n\
    \        if (n == 42) return 866906498\n        if (n == 43) return 1402602770\n\
    \        if (n == 44) return 2273509268\n        if (n ==", "        val dp =\
    \ Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 1\n        if (n == 2) return\
    \ 10\n        var result = 0L\n        for (i <- 1 to 9) {\n            result\
    \ += pow(10, n - 1).toLong\n        }\n        result", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        var count = 0L\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 1).toLong\n        }\n        count", "    \
    \    if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to 9)\
    \ {\n            result += pow(10, n - 1).toLong\n        }\n        result",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     if (n == 2) return 5\n        if (n == 3) return 13\n        if (n == 4)\
    \ return 34\n        if (n == 5) return 89\n        if (n == 6) return 233\n \
    \       if (n == 7) return 610\n        if (n == 8) return 1597\n        if (n\
    \ == 9) return 4181\n        if (n == 10) return 10946\n        if (n == 11) return\
    \ 28657\n        if (n == 12) return 75025\n        if (n == 13) return 196418\n\
    \        if (n == 14) return 514229\n        if (n == 15) return 1346269\n   \
    \     if (n == 16) return 3524578\n        if (n == 17) return 9227465\n     \
    \   if (n == 18) return 24157817\n        if (n == 19) return 63245986\n     \
    \   if (n == 20) return 165580141\n        if (n == 21) return 433494437\n   \
    \     if (n == 22) return 1134903170\n        if (n == 23) return 2971215073L\n\
    \        if (n == 24) return 7778742049L\n        if (n == 25) return 20365011074L\n\
    \        if (n == 26) return 53316291173L\n        if (n == 27) return 139583862445L\n\
    \        if (n == 28) return 365435296162L\n        if (n == 29) return 956722026041L\n\
    \        if (n == 30) return 2504730781961L\n        if (n == 31) return 6557470319842L\n\
    \        if (n == 32) return 17167680177565L\n        if (n == 33) return 44945570212853L\n\
    \        if (n == 34) return 117669030460994L\n        if (n == 35) return 308061521170129L\n\
    \        if (n == 36) return 806515533049393L\n        if (n == 37) return 2111485077978050L\n\
    \        if (n == 38) return 5551115123127783L\n        if (n == 39) return 1447",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 3\n        var count = 0L\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 1).toLong\n            count += pow(10, n -\
    \ 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for (i\
    \ <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n      \
    \  count", "        if (n == 1) return 2\n        if (n == 2) return 3\n     \
    \   if (n == 3) return 5\n        if (n == 4) return 8\n        if (n == 5) return\
    \ 13\n        if (n == 6) return 21\n        if (n == 7) return 34\n        if\
    \ (n == 8) return 55\n        if (n == 9) return 89\n        if (n == 10) return\
    \ 144\n        if (n == 11) return 233\n        if (n == 12) return 377\n    \
    \    if (n == 13) return 610\n        if (n == 14) return 987\n        if (n ==\
    \ 15) return 1597\n        if (n == 16) return 2584\n        if (n == 17) return\
    \ 4181\n        if (n == 18) return 6765\n        if (n == 19) return 10946\n\
    \        if (n == 20) return 17711\n        if (n == 21) return 28657\n      \
    \  if (n == 22) return 46368\n        if (n == 23) return 75025\n        if (n\
    \ == 24) return 121393\n        if (n == 25) return 196418\n        if (n == 26)\
    \ return 317811\n        if (n == 27) return 514229\n        if (n == 28) return\
    \ 832040\n        if (n == 29) return 1346269\n        if (n == 30) return 2178309\n\
    \        if (n == 31) return 3524578\n        if (n == 32) return 5702887\n  \
    \      if (n == 33) return 9227465\n        if (n == 34) return 14930352\n   \
    \     if (n == 35) return 24157817\n        if (n == 36) return 39088169\n   \
    \     if (n == 37) return 63245986\n        if (n == 38) return 102334155\n  \
    \      if (n == 39) return 165580141\n        if (n == 40) return 267914296\n\
    \        if (n == 41) return 433494437\n        if (n == 42) return 701408733\n\
    \        if (n == 43) return 1134903170\n        if (n == 44) return 1836311903\n\
    \        if (n == 45) return 297", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 10\n        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n       \
    \ dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)"]
stop_tokens:
- "\n    }\n"
