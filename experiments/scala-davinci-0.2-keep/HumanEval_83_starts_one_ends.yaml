name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     if (n == 2) return 4\n        if (n == 3) return 6\n        if (n == 4)\
    \ return 10\n        if (n == 5) return 16\n        if (n == 6) return 26\n  \
    \      if (n == 7) return 42\n        if (n == 8) return 68\n        if (n ==\
    \ 9) return 110\n        if (n == 10) return 178\n        if (n == 11) return\
    \ 288\n        if (n == 12) return 466\n        if (n == 13) return 754\n    \
    \    if (n == 14) return 1220\n        if (n == 15) return 1974\n        if (n\
    \ == 16) return 3194\n        if (n == 17) return 5168\n        if (n == 18) return\
    \ 8362\n        if (n == 19) return 13530\n        if (n == 20) return 21892\n\
    \        if (n == 21) return 35422\n        if (n == 22) return 57344\n      \
    \  if (n == 23) return 92766\n        if (n == 24) return 150010\n        if (n\
    \ == 25) return 242774\n        if (n == 26) return 392884\n        if (n == 27)\
    \ return 635670\n        if (n == 28) return 1028544\n        if (n == 29) return\
    \ 1664214\n        if (n == 30) return 2692758\n        if (n == 31) return 4356992\n\
    \        if (n == 32) return 7051750\n        if (n == 33) return 11404742\n \
    \       if (n == 34) return 18456592\n        if (n == 35) return 29860334\n \
    \       if (n == 36) return 48316226\n        if (n == 37) return 78150558\n \
    \       if (n == 38) return 126510784\n        if (n == 39) return 204621042\n\
    \        if (n == 40) return 331142126\n        if (n == 41) return 535764172\n\
    \        if (n == 42) return 866906498\n        if (n == 43) return 1402602770\n\
    \        if (n == 44) return 2273509268\n        if (n ==", "        val dp =\
    \ Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 1\n        if (n == 2) return\
    \ 10\n        var result = 0L\n        for (i <- 1 to 9) {\n            result\
    \ += pow(10, n - 1).toLong\n        }\n        result", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        var count = 0L\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 1).toLong\n        }\n        count", "    \
    \    if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to 9)\
    \ {\n            result += pow(10, n - 1).toLong\n        }\n        result",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     if (n == 2) return 5\n        if (n == 3) return 13\n        if (n == 4)\
    \ return 34\n        if (n == 5) return 89\n        if (n == 6) return 233\n \
    \       if (n == 7) return 610\n        if (n == 8) return 1597\n        if (n\
    \ == 9) return 4181\n        if (n == 10) return 10946\n        if (n == 11) return\
    \ 28657\n        if (n == 12) return 75025\n        if (n == 13) return 196418\n\
    \        if (n == 14) return 514229\n        if (n == 15) return 1346269\n   \
    \     if (n == 16) return 3524578\n        if (n == 17) return 9227465\n     \
    \   if (n == 18) return 24157817\n        if (n == 19) return 63245986\n     \
    \   if (n == 20) return 165580141\n        if (n == 21) return 433494437\n   \
    \     if (n == 22) return 1134903170\n        if (n == 23) return 2971215073L\n\
    \        if (n == 24) return 7778742049L\n        if (n == 25) return 20365011074L\n\
    \        if (n == 26) return 53316291173L\n        if (n == 27) return 139583862445L\n\
    \        if (n == 28) return 365435296162L\n        if (n == 29) return 956722026041L\n\
    \        if (n == 30) return 2504730781961L\n        if (n == 31) return 6557470319842L\n\
    \        if (n == 32) return 17167680177565L\n        if (n == 33) return 44945570212853L\n\
    \        if (n == 34) return 117669030460994L\n        if (n == 35) return 308061521170129L\n\
    \        if (n == 36) return 806515533049393L\n        if (n == 37) return 2111485077978050L\n\
    \        if (n == 38) return 5551115123127783L\n        if (n == 39) return 1447",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 3\n        var count = 0L\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 1).toLong\n            count += pow(10, n -\
    \ 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for (i\
    \ <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n      \
    \  count", "        if (n == 1) return 2\n        if (n == 2) return 3\n     \
    \   if (n == 3) return 5\n        if (n == 4) return 8\n        if (n == 5) return\
    \ 13\n        if (n == 6) return 21\n        if (n == 7) return 34\n        if\
    \ (n == 8) return 55\n        if (n == 9) return 89\n        if (n == 10) return\
    \ 144\n        if (n == 11) return 233\n        if (n == 12) return 377\n    \
    \    if (n == 13) return 610\n        if (n == 14) return 987\n        if (n ==\
    \ 15) return 1597\n        if (n == 16) return 2584\n        if (n == 17) return\
    \ 4181\n        if (n == 18) return 6765\n        if (n == 19) return 10946\n\
    \        if (n == 20) return 17711\n        if (n == 21) return 28657\n      \
    \  if (n == 22) return 46368\n        if (n == 23) return 75025\n        if (n\
    \ == 24) return 121393\n        if (n == 25) return 196418\n        if (n == 26)\
    \ return 317811\n        if (n == 27) return 514229\n        if (n == 28) return\
    \ 832040\n        if (n == 29) return 1346269\n        if (n == 30) return 2178309\n\
    \        if (n == 31) return 3524578\n        if (n == 32) return 5702887\n  \
    \      if (n == 33) return 9227465\n        if (n == 34) return 14930352\n   \
    \     if (n == 35) return 24157817\n        if (n == 36) return 39088169\n   \
    \     if (n == 37) return 63245986\n        if (n == 38) return 102334155\n  \
    \      if (n == 39) return 165580141\n        if (n == 40) return 267914296\n\
    \        if (n == 41) return 433494437\n        if (n == 42) return 701408733\n\
    \        if (n == 43) return 1134903170\n        if (n == 44) return 1836311903\n\
    \        if (n == 45) return 297", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 10\n        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n       \
    \ dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 4\n        if (n == 3) return 7\n        var dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        dp(2)(0) = 2\n\
    \        dp(2)(1) = 2\n        dp(3)(0) = 4\n        dp(3)(1) = 3\n        for\
    \ (i <- 4 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n      \
    \      dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1) + dp(i - 2)(0) + dp(i - 2)(1)\n\
    \        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n    \
    \    var result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            result\
    \ += (x - y)\n        }\n        result", "        if (n == 1) return 2\n    \
    \    val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n      \
    \  dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        var result = 0L\n        for\
    \ (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n        }\n  \
    \      result * 2", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 10\n        var\
    \ count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            count += (i * x) + (y\
    \ * 9)\n        }\n        count", "        if (n == 1) return 2\n        var\
    \ count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            count += (x - y) * 2\n\
    \        }\n        count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val m = pow(10, n\
    \ - 1).toLong\n        val a = m * 10 - m - 1\n        val b = m * 10 - m - 2\n\
    \        val c = m * 10 - m - 3\n        val d = m * 10 - m - 4\n        val e\
    \ = m * 10 - m - 5\n        val f = m * 10 - m - 6\n        val g = m * 10 - m\
    \ - 7\n        val h = m * 10 - m - 8\n        val i = m * 10 - m - 9\n      \
    \  val j = m * 10 - m - 10\n        val k = m * 10 - m - 11\n        val l = m\
    \ * 10 - m - 12\n        val o = m * 10 - m - 13\n        val p = m * 10 - m -\
    \ 14\n        val q = m * 10 - m - 15\n        val r = m * 10 - m - 16\n     \
    \   val s = m * 10 - m - 17\n        val t = m * 10 - m - 18\n        val u =\
    \ m * 10 - m - 19\n        val v = m * 10 - m - 20\n        val w = m * 10 - m\
    \ - 21\n        val x = m * 10 - m - 22\n        val y = m * 10 - m - 23\n   \
    \     val z = m * 10 - m - 24\n        val aa = m * 10 - m - 25\n        val bb\
    \ = m * 10 - m - 26\n        val cc = m * 10 - m - 27\n        val dd = m * 10\
    \ - m - 28\n        val ee = m * 10 - m - 29\n        val ff = m * 10 - m - 30\n\
    \        val gg = m * 10 - m - 31\n        val hh = m * 10 - m - 32\n        val\
    \ ii = m * 10 - m - 33\n        val jj = m * 10 - m - 34\n        val kk = m *\
    \ 10 - m - 35\n        val ll = m * 10 - m - 36\n        val mm = m * 10 - m -\
    \ 37\n        val nn = m * 10 - m - 38\n        val oo = m * 10 - m - 39\n   \
    \     val pp = m * 10 - m", "        if (n == 1) return 2\n        if (n == 2)\
    \ return 3\n        var result = 0L\n        for (i <- 1 to 9) {\n           \
    \ result += pow(10, n - 1).toLong\n        }\n        result", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        // The number\
    \ of n-digit positive integers that start or end with 1 is\n        // the number\
    \ of n-digit positive integers that start with 1 plus the\n        // number of\
    \ n-digit positive integers that end with 1.\n        // The number of n-digit\
    \ positive integers that start with 1 is the\n        // number of (n - 1)-digit\
    \ positive integers.\n        // The number of n-digit positive integers that\
    \ end with 1 is the\n        // number of (n - 1)-digit positive integers.\n \
    \       // Therefore, the number of n-digit positive integers that start or end\n\
    \        // with 1 is the number of (n - 1)-digit positive integers plus the\n\
    \        // number of (n - 1)-digit positive integers.\n        // The number\
    \ of (n - 1)-digit positive integers is the number of\n        // n-digit positive\
    \ integers that start or end with 1.\n        // Therefore, the number of n-digit\
    \ positive integers that start or end\n        // with 1 is the number of n-digit\
    \ positive integers that start or end\n        // with 1 plus the number of n-digit\
    \ positive integers that start or end\n        // with 1.\n        // The number\
    \ of n-digit positive integers that start or end with 1 is\n        // the number\
    \ of n-digit positive integers that start or end with 1\n        // times 2.\n\
    \        // Therefore, the number of n-digit positive integers that start or end\n\
    \        // with 1 is the number of n-digit positive integers that start or end\n\
    \        // with 1 times 2.\n        // The number of 1-digit positive integers\
    \ that start or end with 1 is\n        // 2.\n        // Therefore, the number\
    \ of n-digit positive integers that start or end\n        // with 1 is 2 times\
    \ the number of (n - 1)-digit positive integers that\n        // start or end\
    \ with 1.\n        // The number of (n - 1)-digit positive integers that start\
    \ or end with\n        // 1 is 2 times the number of (n - 2)-digit positive integers\
    \ that\n        // start or end with 1.\n        // Therefore, the number of n-digit\
    \ positive integers that start or end\n        // with 1 is 2 times the number\
    \ of (n - 2)-digit positive integers that\n        // start or end with 1 times\
    \ 2.\n        // The number of (n - 2", "        if (n == 1) return 2\n      \
    \  var result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n\
    \ - 1).toLong\n            val y = pow(10, n - 2).toLong\n            result +=\
    \ x + y * i\n        }\n        result", "        // The number of n-digit positive\
    \ integers that start with 1 is\n        // 9 * 10^(n-1)\n        // The number\
    \ of n-digit positive integers that end with 1 is\n        // 9 * 10^(n-1)\n \
    \       // The number of n-digit positive integers that start and end with 1 is\n\
    \        // 9 * 10^(n-2)\n        // The number of n-digit positive integers that\
    \ start or end with 1 is\n        // 2 * 9 * 10^(n-1) - 9 * 10^(n-2)\n       \
    \ 2 * 9 * pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9)\
    \ {\n            val x = pow(10, n - 1).toLong\n            val y = pow(10, n\
    \ - 2).toLong\n            count += (x - y) * 2\n        }\n        count", " \
    \       if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n \
    \       dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to n) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)", "        if\
    \ (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 3\n        var count = 0L\n     \
    \   for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n        \
    \    count += pow(10, n - 2).toLong\n        }\n        count", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        // The number of n-digit positive integers that\
    \ start with 1 is\n        // 10^(n-1).\n        // The number of n-digit positive\
    \ integers that end with 1 is\n        // 9 * 10^(n-2).\n        // The number\
    \ of n-digit positive integers that start and end with 1 is\n        // 9 * 10^(n-3).\n\
    \        // The number of n-digit positive integers that start or end with 1 is\n\
    \        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of\
    \ n-digit positive integers that start or end with 1 is\n        // 10^(n-1) +\
    \ 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of n-digit positive integers\
    \ that start or end with 1 is\n        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(n-3).\n\
    \        // The number of n-digit positive integers that start or end with 1 is\n\
    \        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of\
    \ n-digit positive integers that start or end with 1 is\n        // 10^(n-1) +\
    \ 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of n-digit positive integers\
    \ that start or end with 1 is\n        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(n-3).\n\
    \        // The number of n-digit positive integers that start or end with 1 is\n\
    \        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of\
    \ n-digit positive integers that start or end with 1 is\n        // 10^(n-1) +\
    \ 9 * 10^(n-2) - 9 * 10^(n-3).\n        // The number of n-digit positive integers\
    \ that start or end with 1 is\n        // 10^(n-1) + 9 * 10^(n-2) - 9 * 10^(",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        var count =\
    \ 0L\n        for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n\
    \            count += pow(10, n - 2).toLong\n        }\n        count", "    \
    \    // The number of n-digit numbers that start with 1 is 10^(n-1).\n       \
    \ // The number of n-digit numbers that end with 1 is 9 * 10^(n-1).\n        //\
    \ The number of n-digit numbers that start and end with 1 is 9 * 10^(n-2).\n \
    \       // The number of n-digit numbers that start or end with 1 is 10^(n-1)\
    \ + 9 * 10^(n-1) - 9 * 10^(n-2).\n        val start = pow(10, n - 1).toLong\n\
    \        val end = 9 * pow(10, n - 1).toLong\n        val startEnd = 9 * pow(10,\
    \ n - 2).toLong\n        start + end - startEnd", "        var count = 0L\n  \
    \      var i = 1L\n        while (i <= n) {\n            count += pow(10, i -\
    \ 1).toLong\n            i += 1\n        }\n        count", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        if (n == 3) return 5\n        var count\
    \ = 5\n        var i = 4\n        while (i <= n) {\n            count += 3 * pow(2,\
    \ i - 2).toLong\n            i += 1\n        }\n        return count", "     \
    \   var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for (i\
    \ <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n        }\n      \
    \  count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = 1\n      \
    \  dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     else {\n            val dp = Array.fill(n.toInt + 1)(0L)\n            dp(1)\
    \ = 2\n            for (i <- 2 to n.toInt) {\n                dp(i) = dp(i - 1)\
    \ * 9 + pow(10, i - 1).toLong\n            }\n            dp(n.toInt)\n      \
    \  }", "        if (n == 1) return 2\n        var count = 0L\n        for (i <-\
    \ 1 to 9) {\n            val x = pow(10, n - 1).toLong\n            val y = pow(10,\
    \ n - 2).toLong\n            count += (x - y)\n        }\n        count", "  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n     \
    \   dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9)\
    \ {\n            count += pow(10, n - 1).toLong\n        }\n        count", " \
    \       if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return\
    \ 8\n        if (n == 4) return 16\n        if (n == 5) return 32\n        if\
    \ (n == 6) return 64\n        if (n == 7) return 128\n        if (n == 8) return\
    \ 256\n        if (n == 9) return 512\n        if (n == 10) return 1024\n    \
    \    if (n == 11) return 2048\n        if (n == 12) return 4096\n        if (n\
    \ == 13) return 8192\n        if (n == 14) return 16384\n        if (n == 15)\
    \ return 32768\n        if (n == 16) return 65536\n        if (n == 17) return\
    \ 131072\n        if (n == 18) return 262144\n        if (n == 19) return 524288\n\
    \        if (n == 20) return 1048576\n        if (n == 21) return 2097152\n  \
    \      if (n == 22) return 4194304\n        if (n == 23) return 8388608\n    \
    \    if (n == 24) return 16777216\n        if (n == 25) return 33554432\n    \
    \    if (n == 26) return 67108864\n        if (n == 27) return 134217728\n   \
    \     if (n == 28) return 268435456\n        if (n == 29) return 536870912\n \
    \       if (n == 30) return 1073741824\n        if (n == 31) return 2147483648L\n\
    \        if (n == 32) return 4294967296L\n        if (n == 33) return 8589934592L\n\
    \        if (n == 34) return 17179869184L\n        if (n == 35) return 34359738368L\n\
    \        if (n == 36) return 68719476736L\n        if (n == 37) return 137438953472L\n\
    \        if (n == 38) return 274877906944L\n        if (n == 39) return 549755813888L\n\
    \        if (n == 40) return 1099511627776L\n        if (n == 41) return 2199023255552L\n\
    \        if (n", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        var count = 0L\n        for (i <- 1 to 9) {\n         \
    \   val x = pow(10, n - 1).toLong\n            val y = pow(10, n - 2).toLong\n\
    \            count += x + y * i\n        }\n        count", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            result += (x - y) * 2\n\
    \        }\n        result", "        var count = 0L\n        for (i <- 1 to n)\
    \ {\n            count += pow(10, i - 1).toLong\n        }\n        count", " \
    \       // The number of n-digit positive integers that start or end with 1 is\n\
    \        // the number of n-digit positive integers that start with 1 plus the\n\
    \        // number of n-digit positive integers that end with 1.\n        // The\
    \ number of n-digit positive integers that start with 1 is the\n        // number\
    \ of (n - 1)-digit positive integers.\n        // The number of n-digit positive\
    \ integers that end with 1 is the\n        // number of (n - 1)-digit positive\
    \ integers.\n        // Therefore, the number of n-digit positive integers that\
    \ start or end\n        // with 1 is 2 * the number of (n - 1)-digit positive\
    \ integers.\n        // The number of (n - 1)-digit positive integers is 9 * 10\
    \ ^ (n - 1).\n        // Therefore, the number of n-digit positive integers that\
    \ start or end\n        // with 1 is 2 * 9 * 10 ^ (n - 1).\n        2 * 9 * pow(10,\
    \ n - 1).toLong", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n      \
    \  dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n   \
    \         dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        var count = 0L\n        for (i <- 1 to 9) {\n         \
    \   var x = i\n            for (j <- 1 to n - 1) {\n                x *= 10\n\
    \                x += 1\n            }\n            count += x\n        }\n  \
    \      count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The\
    \ number of n-digit positive integers that start with 1 is\n        // 9 * 10^(n-1).\n\
    \        // The number of n-digit positive integers that end with 1 is\n     \
    \   // 9 * 10^(n-1).\n        // The number of n-digit positive integers that\
    \ start and end with 1 is\n        // 9 * 10^(n-2).\n        // The number of\
    \ n-digit positive integers that start or end with 1 is\n        // 2 * 9 * 10^(n-1)\
    \ - 9 * 10^(n-2).\n        2 * 9 * pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val digits = n - 1\n        val dp = Array.fill(digits\
    \ + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to digits) {\n            dp(i)\
    \ = dp(i - 1) * 9 + pow(10, i - 1).toLong\n        }\n        dp(digits) * 2",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        var count = 0\n        for (i <- 1 to 9)\
    \ {\n            count += pow(10, n - 1).toLong\n            count += pow(10,\
    \ n - 2).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      if (n == 2) return 3\n        var result = 1L\n        for (i <- 1 to n\
    \ - 1) {\n            result *= 10\n            result += 1\n        }\n     \
    \   result *= 9\n        result += 1\n        result", "        // The number\
    \ of n-digit positive integers that start with 1 is\n        // 9 * 10^(n-1).\
    \ The number of n-digit positive integers that end with 1\n        // is 10^(n-1).\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        var count = 0L\n        for\
    \ (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n   \
    \     count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     var count = 0L\n        for (i <- 1 to n) count += pow(10, i - 1).toLong\n\
    \        count * 2", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 2\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ * 9 + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1)\n   \
    \     }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        val dp = Array.fill(n.toInt + 1)(0L)\n\
    \        dp(1) = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt) {\n   \
    \         dp(i) = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)", "  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = 1\n        dp(0)(1)\
    \ = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt\
    \ - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return 2\n        var count\
    \ = 0\n        for (i <- 1 to 9) {\n            var d = 1\n            var x =\
    \ i\n            while (x < n) {\n                x = x * 10 + 1\n           \
    \     d += 1\n            }\n            count += d\n        }\n        return\
    \ count", "        if (n == 1) return 2\n        if (n == 2) return 3\n      \
    \  var count = 0\n        for (i <- 1 to 9) {\n            count += pow(10, n\
    \ - 1).toLong\n            count += pow(10, n - 2).toLong\n        }\n       \
    \ count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        var result = 0L\n        for (i <- 1 to\
    \ n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\
    \ * 2", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        var result = 0L\n        for (i <- 1 to 9) {\n            result\
    \ += pow(10, n - 1).toLong\n        }\n        result", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var result = 0\n        for (i <- 1 to 9) {\n      \
    \      result += pow(10, n - 1).toLong\n        }\n        result", "        if\
    \ (n == 1) return 2\n        if (n == 2) return 5\n        if (n == 3) return\
    \ 13\n        var count = 5L\n        for (i <- 2 to n - 1) {\n            count\
    \ += (count * 2) + (pow(2, i - 1).toLong - 1)\n        }\n        count", "  \
    \      if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        var result\
    \ = 0L\n        for (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n\
    \        }\n        result", "        if (n == 1) return 2\n        var count\
    \ = 0L\n        for (i <- 1 to n) {\n            val x = pow(10, i - 1).toLong\n\
    \            val y = pow(10, n - i).toLong\n            count += x * y\n     \
    \   }\n        count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n \
    \       dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n      \
    \      dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 10\n        val dp = Array.ofDim[Long](n + 1, 2)\n \
    \       dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        var count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            count\
    \ += (x - y)\n        }\n        return count", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        var result = 0L\n        for (i <- 1 to n) {\n           \
    \ result += pow(10, i - 1).toLong\n        }\n        result * 2", "        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ result = 0L\n        for (i <- 1 to n) {\n            result += pow(10, i -\
    \ 1).toLong\n        }\n        result * 2", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for (i\
    \ <- 1 to n) {\n            val x = pow(10, i - 1).toLong\n            val y =\
    \ pow(10, i).toLong\n            count += (y - x) * (y - x)\n        }\n     \
    \   count", "        if (n == 1) return 2\n        else if (n == 2) return 4\n\
    \        else if (n == 3) return 10\n        else {\n            val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n            dp(1) = 2\n            dp(2) = 4\n            dp(3) =\
    \ 10\n            for (i <- 4 to n.toInt) {\n                dp(i) = dp(i - 1)\
    \ + dp(i - 2) + dp(i - 3)\n            }\n            dp(n.toInt)\n        }",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      if (n == 2) return 4\n        if (n == 3) return 7\n        var count =\
    \ 0L\n        for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n\
    \        }\n        count + startsOneEnds(n - 1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 4\n        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        dp(2)(0) = 2\n     \
    \   dp(2)(1) = 2\n        for (i <- 3 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        // The number of n-digit positive integers that\
    \ start with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive integers\
    \ that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong", "        if (n == 1) return 1\n        var result\
    \ = 0L\n        for (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n\
    \        }\n        result", "        if (n == 1) return 2\n        if (n == 2)\
    \ return 4\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        dp(2)(0) = 2\n        dp(2)(1) = 2\n    \
    \    for (i <- 3 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            result += pow(10, i - 1).toLong\n        }\n        result *\
    \ 2", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1,\
    \ 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        // The number of n-digit positive integers that start with 1 is\n     \
    \   // 9 * 10^(n-1).\n        // The number of n-digit positive integers that\
    \ end with 1 is\n        // 10^(n-1).\n        // The number of n-digit positive\
    \ integers that start and end with 1 is\n        // 9 * 10^(n-2).\n        //\
    \ The number of n-digit positive integers that start or end with 1 is\n      \
    \  // 9 * 10^(n-1) + 10^(n-1) - 9 * 10^(n-2).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong", "        if (n == 1) return\
    \ 2\n        var count = 0\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            count\
    \ += (x - y)\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val a = Array.fill(n.toInt + 1)(0L)\n        a(1) =\
    \ 2\n        for (i <- 2 to n.toInt) {\n            a(i) = a(i - 1) * 10 - a(i\
    \ - 2)\n        }\n        a(n.toInt)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 3\n        var count = 0\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 1).toLong\n            count += pow(10, n -\
    \ 2).toLong\n        }\n        return count", "        if (n == 1) return 2\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            val d = pow(10,\
    \ n - 1).toLong\n            val a = i * d\n            val b = a + d - 1\n  \
    \          result += b - a + 1\n        }\n        result", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            count += x + i * y\n \
    \       }\n        count", "        if (n == 1) return 2\n        var result =\
    \ 0L\n        for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n\
    \        }\n        result * 2", "        if (n == 1) return 2\n        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        if (n == 2) return\
    \ 4\n        if (n == 3) return 10\n        if (n == 4) return 20\n        if\
    \ (n == 5) return 42\n        if (n == 6) return 84\n        if (n == 7) return\
    \ 170\n        if (n == 8) return 340\n        if (n == 9) return 680\n      \
    \  if (n == 10) return 1360\n        if (n == 11) return 2720\n        if (n ==\
    \ 12) return 5440\n        if (n == 13) return 10880\n        if (n == 14) return\
    \ 21760\n        if (n == 15) return 43520\n        if (n == 16) return 87040\n\
    \        if (n == 17) return 174080\n        if (n == 18) return 348160\n    \
    \    if (n == 19) return 696320\n        if (n == 20) return 1392640\n       \
    \ if (n == 21) return 27852800\n        if (n == 22) return 55705600\n       \
    \ if (n == 23) return 111411200\n        if (n == 24) return 222822400\n     \
    \   if (n == 25) return 445644800\n        if (n == 26) return 891289600\n   \
    \     if (n == 27) return 1782579200\n        if (n == 28) return 3565158400\n\
    \        if (n == 29) return 7130316800\n        if (n == 30) return 14260633600\n\
    \        if (n == 31) return 28521267200\n        if (n == 32) return 57042534400\n\
    \        if (n == 33) return 114085068800\n        if (n == 34) return 228170137600\n\
    \        if (n == 35) return 456340275200\n        if (n == 36) return 912680550400\n\
    \        if (n == 37) return 18253611008000\n        if (n == 38) return 36507222016000\n\
    \        if (n == 39) return 73014444032000\n        if (n == 40) return 146028888064000\n\
    \        if (n == 41) return 292057776128000\n        if (n == 42", "        if\
    \ (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return\
    \ 8\n        var result = 0L\n        var pow10 = 1L\n        for (i <- 1 to n)\
    \ {\n            result += pow10\n            pow10 *= 10\n        }\n       \
    \ result * 2", "        if (n == 1) return 2\n        if (n == 2) return 3\n \
    \       var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n            count += pow(10, n - 2).toLong\n        }\n     \
    \   count", "        if (n == 1) return 2\n        if (n == 2) return 3\n    \
    \    var count = 0\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n            count += pow(10, n - 2).toLong\n        }\n     \
    \   count", "        if (n == 1) return 2\n        if (n == 2) return 3\n    \
    \    val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2) =\
    \ 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i -\
    \ 2)\n        }\n        dp(n.toInt)", "        if (n == 1) return 2\n       \
    \ var count = 0\n        for (i <- 1 to 9) {\n            count += pow(10, n -\
    \ 1).toLong\n        }\n        count", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val m = pow(10, n\
    \ - 1).toLong\n        val p = pow(10, n).toLong\n        val q = pow(10, n -\
    \ 2).toLong\n        return (p - m) * 2 + q", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The\
    \ number of n-digit positive integers that start with 1 is\n        // 9 * 10\
    \ ^ (n - 1)\n        // The number of n-digit positive integers that end with\
    \ 1 is\n        // 10 ^ (n - 1)\n        // The number of n-digit positive integers\
    \ that start and end with 1 is\n        // 9 * 10 ^ (n - 2)\n        // The number\
    \ of n-digit positive integers that start or end with 1 is\n        // 9 * 10\
    \ ^ (n - 1) + 10 ^ (n - 1) - 9 * 10 ^ (n - 2)\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 4\n        var result = 0L\n        for (i <-\
    \ 1 to n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\
    \ * 2", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n +\
    \ 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The number of n-digit\
    \ numbers that start with 1 is 10^(n-1).\n        // The number of n-digit numbers\
    \ that end with 1 is 10^(n-1).\n        // The number of n-digit numbers that\
    \ start and end with 1 is 9.\n        // The number of n-digit numbers that start\
    \ with 1 and end with 2 is\n        // 9 * 10^(n-2).\n        // The number of\
    \ n-digit numbers that start with 1 and end with 3 is\n        // 9 * 10^(n-2).\n\
    \        // ...\n        // The number of n-digit numbers that start with 1 and\
    \ end with 9 is\n        // 9 * 10^(n-2).\n        // The number of n-digit numbers\
    \ that start with 2 and end with 1 is\n        // 9 * 10^(n-2).\n        // ...\n\
    \        // The number of n-digit numbers that start with 9 and end with 1 is\n\
    \        // 9 * 10^(n-2).\n        // The number of n-digit numbers that start\
    \ with 1 and end with 1 is\n        // 9 * 10^(n-2).\n        // The number of\
    \ n-digit numbers that start with 2 and end with 2 is\n        // 9 * 10^(n-2).\n\
    \        // ...\n        // The number of n-digit numbers that start with 9 and\
    \ end with 9 is\n        // 9 * 10^(n-2).\n        // The total number of n-digit\
    \ numbers that start or end with 1 is\n        // 10^(n-1) + 10^(n-1) + 9 + 9\
    \ * 10^(n-2) * 8 + 9 * 10^(n-2) * 8 + ... +\n        // 9 * 10^(n-2) * 8 + 9 *\
    \ 10^(n-2) + 9 * 10^(n-2) + ... + 9 * 10^(n-2) =\n        // 10^(n-1) + 10^(n-1)\
    \ + 9 + 9 * 10^(n-2) * 8 * 9\n        // = 10^(n-1) + 10^(n-1) + 9 + 9 * 10^(n-2)\
    \ * 72\n        // = 10^(n-1", "        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9) {\n      \
    \      val x = pow(10, n - 1).toLong\n            val y = pow(10, n - 2).toLong\n\
    \            count += (x - y) * 2\n        }\n        count", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        // The number of n-digit positive\
    \ integers that start with 1 is\n        // 9 * 10 ^ (n - 1).\n        // The\
    \ number of n-digit positive integers that end with 1 is\n        // 9 * 10 ^\
    \ (n - 1).\n        // The number of n-digit positive integers that start and\
    \ end with 1 is\n        // 9 * 10 ^ (n - 2).\n        // Therefore, the number\
    \ of n-digit positive integers that start or end\n        // with 1 is\n     \
    \   // 9 * 10 ^ (n - 1) + 9 * 10 ^ (n - 1) - 9 * 10 ^ (n - 2) =\n        // 18\
    \ * 10 ^ (n - 1) - 9 * 10 ^ (n - 2).\n        18 * pow(10, n - 1).toLong - 9 *\
    \ pow(10, n - 2).toLong", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        var count = 0\n        var i = 1\n        while (i <= n) {\n\
    \            count += pow(10, i - 1).toLong\n            i += 1\n        }\n \
    \       count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)"]
stop_tokens:
- "\n    }\n"
