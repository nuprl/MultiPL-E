name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n    // cycpattern_check(\"\
  abcd\",\"abd\") => False\n    // cycpattern_check(\"hello\",\"ell\") => True\n \
  \   // cycpattern_check(\"whassup\",\"psus\") => False\n    // cycpattern_check(\"\
  abab\",\"baa\") => True\n    // cycpattern_check(\"efef\",\"eeff\") => False\n \
  \   // cycpattern_check(\"himenss\",\"simen\") => True\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n\
    \            if (a.contains(bs1.mkString)) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        bb.contains(a)", "        val bb =\
    \ b + b\n        return bb.contains(a)", "        val b1 = b + b\n        b1.contains(a)",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        var i = 0\n        while (i < n) {\n       \
    \     var j = 0\n            while (j < m) {\n                if (a(i) == b(j))\
    \ {\n                    var k = 0\n                    while (k < m) {\n    \
    \                    if (a(i + k) != b((j + k) % m)) {\n                     \
    \       j = m\n                            k = m\n                        }\n\
    \                        k += 1\n                    }\n                    if\
    \ (k == m) return true\n                }\n                j += 1\n          \
    \  }\n            i += 1\n        }\n        false", "        val n = a.length\n\
    \        val m = b.length\n        val s = a + a\n        for (i <- 0 to n - m)\
    \ {\n            var flag = true\n            for (j <- 0 to m - 1) {\n      \
    \          if (s(i + j) != b(j)) {\n                    flag = false\n       \
    \             break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val tmp = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = tmp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val n = a.length; val m = b.length\n        if\
    \ (n < m) return false\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (m > n) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            var flag = true\n \
    \           for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n\
    \                    flag = false\n                    break\n               \
    \ }\n            }\n            if (flag) return true\n        }\n        false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) =\
    \ bs(j + 1)\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        val bb = b + b\n        for (i <-\
    \ 0 until n - m + 1) {\n            var j = 0\n            while (j < m && a(i\
    \ + j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n    \
    \    false", "        if (a.length < b.length) return false\n        val bb =\
    \ b + b\n        return bb.contains(a)", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        return bb.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        val bb = b + b\n        val\
    \ bb2 = bb.substring(1, m + 1)\n        if (a.contains(b) || a.contains(bb2))\
    \ true else false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val temp = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) bs(j) = bs(j + 1)\n            bs(bs.length - 1) = temp\n            if\
    \ (a.contains(bs.mkString)) return true\n        }\n        return false", " \
    \       if (a.length < b.length) return false\n        val bb = b + b\n      \
    \  return bb.contains(a)", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs1.mkString)) return true\n        }\n     \
    \   return false"]
stop_tokens:
- "\n    }\n"
