name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n    // cycpattern_check(\"\
  abcd\",\"abd\") => False\n    // cycpattern_check(\"hello\",\"ell\") => True\n \
  \   // cycpattern_check(\"whassup\",\"psus\") => False\n    // cycpattern_check(\"\
  abab\",\"baa\") => True\n    // cycpattern_check(\"efef\",\"eeff\") => False\n \
  \   // cycpattern_check(\"himenss\",\"simen\") => True\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n\
    \            if (a.contains(bs1.mkString)) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        bb.contains(a)", "        val bb =\
    \ b + b\n        return bb.contains(a)", "        val b1 = b + b\n        b1.contains(a)",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        var i = 0\n        while (i < n) {\n       \
    \     var j = 0\n            while (j < m) {\n                if (a(i) == b(j))\
    \ {\n                    var k = 0\n                    while (k < m) {\n    \
    \                    if (a(i + k) != b((j + k) % m)) {\n                     \
    \       j = m\n                            k = m\n                        }\n\
    \                        k += 1\n                    }\n                    if\
    \ (k == m) return true\n                }\n                j += 1\n          \
    \  }\n            i += 1\n        }\n        false", "        val n = a.length\n\
    \        val m = b.length\n        val s = a + a\n        for (i <- 0 to n - m)\
    \ {\n            var flag = true\n            for (j <- 0 to m - 1) {\n      \
    \          if (s(i + j) != b(j)) {\n                    flag = false\n       \
    \             break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val tmp = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = tmp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val n = a.length; val m = b.length\n        if\
    \ (n < m) return false\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (m > n) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            var flag = true\n \
    \           for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n\
    \                    flag = false\n                    break\n               \
    \ }\n            }\n            if (flag) return true\n        }\n        false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) =\
    \ bs(j + 1)\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        val bb = b + b\n        for (i <-\
    \ 0 until n - m + 1) {\n            var j = 0\n            while (j < m && a(i\
    \ + j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n    \
    \    false", "        if (a.length < b.length) return false\n        val bb =\
    \ b + b\n        return bb.contains(a)", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        return bb.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        val bb = b + b\n        val\
    \ bb2 = bb.substring(1, m + 1)\n        if (a.contains(b) || a.contains(bb2))\
    \ true else false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val temp = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) bs(j) = bs(j + 1)\n            bs(bs.length - 1) = temp\n            if\
    \ (a.contains(bs.mkString)) return true\n        }\n        return false", " \
    \       if (a.length < b.length) return false\n        val bb = b + b\n      \
    \  return bb.contains(a)", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs1.mkString)) return true\n        }\n     \
    \   return false", "        val bb = b + b\n        bb.contains(a)", "       \
    \ if (a.length < b.length) return false\n        for (i <- 0 until a.length) {\n\
    \            var s = \"\"\n            for (j <- i until a.length) s += a(j)\n\
    \            for (j <- 0 until i) s += a(j)\n            if (s.contains(b)) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        a.contains(b)\
    \ || bb.contains(a)", "        val n = a.length\n        val m = b.length\n  \
    \      val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    if (a.length < b.length) return false\n        val b2 = b + b\n        return\
    \ b2.contains(a)", "        val n = a.length\n        val m = b.length\n     \
    \   val s = a + a\n        for (i <- 0 to n - m) {\n            var flag = true\n\
    \            for (j <- 0 to m - 1) {\n                if (s(i + j) != b(j)) {\n\
    \                    flag = false\n                    break\n               \
    \ }\n            }\n            if (flag) return true\n        }\n        return\
    \ false", "        var b2 = b + b\n        return b2.contains(a)", "        val\
    \ n = a.length; val m = b.length\n        if (n < m) return false\n        val\
    \ bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (bb.contains(sub)) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        for (i\
    \ <- 0 until n) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (a(i + j) != b(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ sub = a.substring(i, i + m)\n            if (bb.contains(sub)) return true\n\
    \        }\n        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (m > n) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        return bb.contains(a)", "        val n = a.length\n       \
    \ val m = b.length\n        if (n < m) return false\n        val bb = b + b\n\
    \        for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        if (a.length <\
    \ b.length) return false\n        for (i <- 0 until a.length) {\n            val\
    \ c = a.substring(i) + a.substring(0, i)\n            if (c.contains(b)) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val b2 = b + b\n        return b2.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        false", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val temp = bs(0)\n            for (j <- 0\
    \ until bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n \
    \           bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.toSet\n \
    \       if (bs.size != b.size) return false\n        val bs2 = b.toSet\n     \
    \   if (bs2.size != b.size) return false\n        val bs3 = b.toSet\n        if\
    \ (bs3.size != b.size) return false\n        val bs4 = b.toSet\n        if (bs4.size\
    \ != b.size) return false\n        val bs5 = b.toSet\n        if (bs5.size !=\
    \ b.size) return false\n        val bs6 = b.toSet\n        if (bs6.size != b.size)\
    \ return false\n        val bs7 = b.toSet\n        if (bs7.size != b.size) return\
    \ false\n        val bs8 = b.toSet\n        if (bs8.size != b.size) return false\n\
    \        val bs9 = b.toSet\n        if (bs9.size != b.size) return false\n   \
    \     val bs10 = b.toSet\n        if (bs10.size != b.size) return false\n    \
    \    val bs11 = b.toSet\n        if (bs11.size != b.size) return false\n     \
    \   val bs12 = b.toSet\n        if (bs12.size != b.size) return false\n      \
    \  val bs13 = b.toSet\n        if (bs13.size != b.size) return false\n       \
    \ val bs14 = b.toSet\n        if (bs14.size != b.size) return false\n        val\
    \ bs15 = b.toSet\n        if (bs15.size != b.size) return false\n        val bs16\
    \ = b.toSet\n        if (bs16.size != b.size) return false\n        val bs17 =\
    \ b.toSet\n        if (bs17.size != b.size) return false\n        val bs18 = b.toSet\n\
    \        if (bs18.size != b.size) return false\n        val bs19 = b.toSet\n \
    \       if (bs19.size != b.size) return false\n        val bs20 = b.toSet\n  \
    \      if (bs20.size !=", "        val bb = b + b\n        bb.contains(a)", " \
    \       val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n     \
    \       val c = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j\
    \ + 1)\n            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val c = bs(0)\n           \
    \ for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = c\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        false", "        if (a.length < b.length) return false\n        val bb\
    \ = b + b\n        return bb.contains(a)", "        val bb = b + b\n        return\
    \ bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", "       \
    \ if (a.length < b.length) return false\n        val bb = b + b\n        bb.contains(a)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ if (bb.contains(a)) return true\n        return false", "        val bb = b\
    \ + b\n        return a.contains(bb)", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        return bb.contains(a)", "        val\
    \ bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val\
    \ c = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n\
    \            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString)) return\
    \ true\n        }\n        false", "        val n = a.length\n        val m =\
    \ b.length\n        val k = gcd(n, m)\n        val l = n / k\n        val s =\
    \ a.substring(0, k)\n        val t = b.substring(0, k)\n        if (s != t) return\
    \ false\n        for (i <- 0 until l) {\n            val u = a.substring(i * k,\
    \ (i + 1) * k)\n            val v = b.substring(i * k, (i + 1) * k)\n        \
    \    if (u != v) return false\n        }\n        return true", "        val bs\
    \ = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val temp\
    \ = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n  \
    \          bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        false", "        val bb = b + b\n \
    \       return bb.contains(a)", "        val bb = b + b\n        return a.contains(bb)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        val c = a + a\n  \
    \      for (i <- 0 to n - m) {\n            var j = 0\n            while (j <\
    \ m && c(i + j) == b(j)) j += 1\n            if (j == m) return true\n       \
    \ }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 to n - m) {\n            var flag\
    \ = true\n            for (j <- 0 to m - 1) {\n                if (s(i + j) !=\
    \ b(j)) {\n                    flag = false\n                    break\n     \
    \           }\n            }\n            if (flag) return true\n        }\n \
    \       return false", "        val bb = b + b\n        bb.contains(a)", "   \
    \     val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val temp = bs(0)\n      \
    \      for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = temp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (m > n) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        false", "        val aa = a.toCharArray\n        val\
    \ bb = b.toCharArray\n        val n = aa.length\n        val m = bb.length\n \
    \       val bb2 = new Array[Char](m)\n        for (i <- 0 until m) bb2(i) = bb(m\
    \ - 1 - i)\n        for (i <- 0 until n) {\n            var flag = true\n    \
    \        for (j <- 0 until m) {\n                if (aa(i + j) != bb(j) && aa(i\
    \ + j) != bb2(j)) {\n                    flag = false\n                    break\n\
    \                }\n            }\n            if (flag) return true\n       \
    \ }\n        false", "        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        false", "        if (a.length < b.length) return false\n       \
    \ val bs = b.toCharArray\n        val bs2 = bs.clone\n        for (i <- 0 until\
    \ bs.length) {\n            val t = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) bs(j) = bs(j + 1)\n            bs(bs.length - 1) = t\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.toList\n\
    \        for (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length)\
    \ ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n \
    \       }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            val sub = a.substring(i, i + m)\n          \
    \  if (bb.contains(sub)) return true\n        }\n        return false", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            var flag = true\n         \
    \   for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n       \
    \             flag = false\n                    break\n                }\n   \
    \         }\n            if (flag) return true\n        }\n        return false",
  "        var bb = b\n        for (i <- 0 until b.length) {\n            if (a.contains(bb))\
    \ return true\n            bb = bb.tail + bb.head\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        for (i <- 0 until n) {\n            var flag = true\n    \
    \        for (j <- 0 until m) {\n                if (a(i + j) != b(j)) {\n   \
    \                 flag = false\n                    break\n                }\n\
    \            }\n            if (flag) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val s = a + a\n   \
    \     for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m\
    \ && s(i + j) == b(j)) j += 1\n            if (j == m) return true\n        }\n\
    \        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        // Write your code here\n        val n = a.length\n        val m = b.length\n\
    \        val c = a + a\n        for (i <- 0 to n - m) {\n            var j = 0\n\
    \            while (j < m && c(i + j) == b(j)) j += 1\n            if (j == m)\
    \ return true\n        }\n        false", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (bb.contains(sub)) return true\n        }\n        return\
    \ false", "        if (a.length < b.length) return false\n        val bb = b +\
    \ b\n        return bb.contains(a)", "        val bs = b.toCharArray\n       \
    \ for (i <- 0 until bs.length) {\n            val temp = bs(0)\n            for\
    \ (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n        \
    \    }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            var j = 0\n            while (j < m && a(i + j) == bb(j))\
    \ j += 1\n            if (j == m) return true\n        }\n        false", "  \
    \      val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    if (a.length < b.length) return false\n        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val bs2 = bs.clone\n        for (i <- 0 until bs.length) {\n        \
    \    val t = bs2(0)\n            for (j <- 0 until bs.length - 1) bs2(j) = bs2(j\
    \ + 1)\n            bs2(bs.length - 1) = t\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n        \
    \    val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n      \
    \          bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bs = b.toCharArray\n        val bs2 = bs.clone\n      \
    \  for (i <- 0 until bs.length) {\n            val temp = bs2(0)\n           \
    \ for (j <- 0 until bs.length - 1) bs2(j) = bs2(j + 1)\n            bs2(bs.length\
    \ - 1) = temp\n            if (a.contains(bs2.mkString)) return true\n       \
    \ }\n        return false", "        val bs = b.toList\n        val bs2 = bs :::\
    \ bs\n        val bs2s = bs2.mkString\n        a.contains(bs2s)", "        val\
    \ n = a.length\n        val m = b.length\n        val s = a + a\n        for (i\
    \ <- 0 to n - m) {\n            var flag = true\n            for (j <- 0 to m\
    \ - 1) {\n                if (s(i + j) != b(j)) {\n                    flag =\
    \ false\n                    break\n                }\n            }\n       \
    \     if (flag) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        for (i <- 0 until n)\
    \ {\n            val sub = a.substring(i, i + m)\n            if (sub == b) return\
    \ true\n            val sub2 = a.substring(i, i + m) + a.substring(0, i)\n   \
    \         if (sub2 == b) return true\n        }\n        return false", "    \
    \    if (a.length < b.length) return false\n        val bb = b + b\n        return\
    \ bb.contains(a)", "        if (a.length < b.length) return false\n        val\
    \ b2 = b + b\n        return b2.contains(a)", "        val bb = b + b\n      \
    \  bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", "      \
    \  val n = a.length\n        val m = b.length\n        val c = a + a\n       \
    \ var i = 0\n        while (i < n) {\n            if (c.substring(i, i + m) ==\
    \ b) return true\n            i += 1\n        }\n        return false", "    \
    \    val n = a.length\n        val m = b.length\n        val s = a + a\n     \
    \   for (i <- 0 to n - m) {\n            var flag = true\n            for (j <-\
    \ 0 to m - 1) {\n                if (s(i + j) != b(j)) {\n                   \
    \ flag = false\n                    break\n                }\n            }\n\
    \            if (flag) return true\n        }\n        return false", "      \
    \  val bs = b.toCharArray\n        val as = a.toCharArray\n        val n = bs.length\n\
    \        val m = as.length\n        val bs2 = new Array[Char](n * 2)\n       \
    \ for (i <- 0 until n) {\n            bs2(i) = bs(i)\n            bs2(i + n) =\
    \ bs(i)\n        }\n        for (i <- 0 until n) {\n            var j = 0\n  \
    \          while (j < m && bs2(i + j) == as(j)) j += 1\n            if (j == m)\
    \ return true\n        }\n        false", "        val n = a.length\n        val\
    \ m = b.length\n        for (i <- 0 until n) {\n            val c = a.substring(i,\
    \ i + m)\n            if (c == b) return true\n            if (c.length == m)\
    \ {\n                val d = c.substring(1) + c.substring(0, 1)\n            \
    \    if (d == b) return true\n            }\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val s = a + a\n        for (i <- 0 to n - m)\
    \ {\n            var flag = true\n            for (j <- 0 to m - 1) {\n      \
    \          if (s(i + j) != b(j)) {\n                    flag = false\n       \
    \             break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        a.contains(bb)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (m > n) return false\n\
    \        val aa = a + a\n        for (i <- 0 to n - 1) {\n            var flag\
    \ = true\n            for (j <- 0 to m - 1) {\n                if (aa(i + j) !=\
    \ b(j)) {\n                    flag = false\n                    break\n     \
    \           }\n            }\n            if (flag) return true\n        }\n \
    \       return false", "        if (a.length < b.length) return false\n      \
    \  val b2 = b + b\n        b2.contains(a)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bb = b + b\n        bb.contains(a)", "        val bs = b.toSet\n    \
    \    val bs2 = b.toSet\n        val bs3 = b.toSet\n        val bs4 = b.toSet\n\
    \        val bs5 = b.toSet\n        val bs6 = b.toSet\n        val bs7 = b.toSet\n\
    \        val bs8 = b.toSet\n        val bs9 = b.toSet\n        val bs10 = b.toSet\n\
    \        val bs11 = b.toSet\n        val bs12 = b.toSet\n        val bs13 = b.toSet\n\
    \        val bs14 = b.toSet\n        val bs15 = b.toSet\n        val bs16 = b.toSet\n\
    \        val bs17 = b.toSet\n        val bs18 = b.toSet\n        val bs19 = b.toSet\n\
    \        val bs20 = b.toSet\n        val bs21 = b.toSet\n        val bs22 = b.toSet\n\
    \        val bs23 = b.toSet\n        val bs24 = b.toSet\n        val bs25 = b.toSet\n\
    \        val bs26 = b.toSet\n        val bs27 = b.toSet\n        val bs28 = b.toSet\n\
    \        val bs29 = b.toSet\n        val bs30 = b.toSet\n        val bs31 = b.toSet\n\
    \        val bs32 = b.toSet\n        val bs33 = b.toSet\n        val bs34 = b.toSet\n\
    \        val bs35 = b.toSet\n        val bs36 = b.toSet\n        val bs37 = b.toSet\n\
    \        val bs38 = b.toSet\n        val bs39 = b.toSet\n        val bs40 = b.toSet\n\
    \        val bs41 = b.toSet\n        val bs42 = b.toSet\n        val bs43 = b.toSet\n\
    \        val bs44 = b.toSet\n        val bs45 = b.toSet\n        val bs46 = b.toSet\n\
    \        val bs47 =", "        val n = a.length\n        val m = b.length\n  \
    \      val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ flag = true\n            for (j <- 0 until m) {\n                if (a(i + j)\
    \ != bb(j)) {\n                    flag = false\n                    break\n \
    \               }\n            }\n            if (flag) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (m > n) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        def isSubstring(a\
    \ : String, b : String) : Boolean = {\n            if (a.length < b.length) return\
    \ false\n            for (i <- 0 to a.length - b.length) {\n                var\
    \ flag = true\n                for (j <- 0 until b.length) {\n               \
    \     if (a(i + j) != b(j)) {\n                        flag = false\n        \
    \                break\n                    }\n                }\n           \
    \     if (flag) return true\n            }\n            return false\n       \
    \ }\n        for (i <- 0 until b.length) {\n            if (isSubstring(a, b.substring(i)\
    \ + b.substring(0, i))) return true\n        }\n        return false", "     \
    \   if (a.length < b.length) return false\n        val bb = b + b\n        return\
    \ bb.contains(a)", "        val b2 = b + b\n        return b2.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        val bb = b + b\n \
    \       for (i <- 0 until n - m + 1) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        false", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs1.mkString)) return true\n        }\n     \
    \   return false", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val bs = b.toCharArray\n        val bs2 = bs.clone\n        for (i <-\
    \ 0 until bs.length) {\n            val c = bs(0)\n            for (j <- 0 until\
    \ bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length - 1) = c\n      \
    \      if (a.contains(bs.mkString)) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ flag = true\n            for (j <- 0 until m) {\n                if (a(i + j)\
    \ != bb(j)) {\n                    flag = false\n                    break\n \
    \               }\n            }\n            if (flag) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (m > n) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == bb.substring(i,\
    \ i + m)) return true\n        }\n        return false", "        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length)\
    \ ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n \
    \       }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        false", "        val bs = b.toCharArray\n\
    \        val bs2 = bs.clone\n        for (i <- 0 until bs.length) {\n        \
    \    val c = bs2(0)\n            for (j <- 0 until bs.length - 1) bs2(j) = bs2(j\
    \ + 1)\n            bs2(bs.length - 1) = c\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.size\n  \
    \      val as = a.size\n        if (bs > as) return false\n        val bmap =\
    \ new HashMap[Char, Int]\n        for (i <- 0 until bs) {\n            val c =\
    \ b(i)\n            if (bmap.contains(c)) bmap(c) += 1\n            else bmap(c)\
    \ = 1\n        }\n        val amap = new HashMap[Char, Int]\n        for (i <-\
    \ 0 until bs) {\n            val c = a(i)\n            if (amap.contains(c)) amap(c)\
    \ += 1\n            else amap(c) = 1\n        }\n        if (bmap == amap) return\
    \ true\n        for (i <- bs until as) {\n            val c = a(i)\n         \
    \   val d = a(i - bs)\n            if (amap.contains(c)) amap(c) += 1\n      \
    \      else amap(c) = 1\n            amap(d) -= 1\n            if (amap(d) ==\
    \ 0) amap.remove(d)\n            if (bmap == amap) return true\n        }\n  \
    \      false", "        if (a.length < b.length) return false\n        val n =\
    \ a.length\n        val m = b.length\n        for (i <- 0 until n) {\n       \
    \     var j = 0\n            while (j < m && a(i) == b(j)) {\n               \
    \ i += 1\n                j += 1\n                if (i == n) i = 0\n        \
    \    }\n            if (j == m) return true\n        }\n        return false",
  "        val bb = b + b\n        bb.contains(a)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        a.contains(b) || bb.contains(a)", "        val\
    \ bb = b + b\n        a.contains(bb)", "        val bb = b + b\n        bb.contains(a)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        if (a.length < b.length) return false\n   \
    \     val bb = b + b\n        return bb.contains(a)", "        if (a.length <\
    \ b.length) return false\n        val bb = b + b\n        if (bb.indexOf(a) !=\
    \ -1) return true\n        return false", "        val bb = b + b\n        return\
    \ bb.contains(a)", "        val bb = b + b\n        return a.contains(bb)", " \
    \       val bb = b + b\n        return a.contains(bb)", "        def isSubstring(a\
    \ : String, b : String) : Boolean = {\n            if (a.length < b.length) return\
    \ false\n            for (i <- 0 to a.length - b.length) {\n                if\
    \ (a.substring(i, i + b.length) == b) return true\n            }\n           \
    \ return false\n        }\n        if (a.length < b.length) return false\n   \
    \     for (i <- 0 to b.length - 1) {\n            if (isSubstring(a, b.substring(i)\
    \ + b.substring(0, i))) return true\n        }\n        return false", "     \
    \   val b2 = b + b\n        b2.contains(a)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        for (i <- 0 until n) {\n            val sub = a.substring(i, i + m)\n\
    \            if (sub == b) return true\n            if (sub.length == m && sub.substring(1)\
    \ + sub.substring(0, 1) == b) return true\n        }\n        return false", " \
    \       val bb = b + b\n        bb.contains(a)", "        val n = a.length\n \
    \       val m = b.length\n        val aa = a + a\n        for (i <- 0 to n - m)\
    \ {\n            if (aa.substring(i, i + m) == b) return true\n        }\n   \
    \     return false", "        var bb = b\n        for (i <- 0 until b.length)\
    \ {\n            if (a.contains(bb)) return true\n            bb = bb.tail + bb.head\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val aa = a + a\n        for (i <- 0 to n -\
    \ m) {\n            if (aa.substring(i, i + m) == b) return true\n        }\n\
    \        return false", "        var bs = b\n        for (i <- 0 until b.length)\
    \ {\n            if (a.contains(bs)) return true\n            bs = bs.tail + bs.head\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val c = bs(0)\n           \
    \ for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = c\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        false", "        if (a.length < b.length) return false\n        val bb\
    \ = b + b\n        bb.contains(a)", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            var flag = true\n            for (j <- 0 until m) {\n\
    \                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (bb.contains(sub)) return true\n        }\n        return\
    \ false", "        if (a.length < b.length) return false\n        val bb = b +\
    \ b\n        return bb.contains(a)", "        val n = a.length\n        val m\
    \ = b.length\n        for (i <- 0 until n) {\n            var flag = true\n  \
    \          for (j <- 0 until m) {\n                if (a(i + j) != b(j)) {\n \
    \                   flag = false\n                    break\n                }\n\
    \            }\n            if (flag) return true\n        }\n        false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val c = b + b\n   \
    \     for (i <- 0 to n - m) {\n            var flag = true\n            for (j\
    \ <- 0 to m - 1) {\n                if (a(i + j) != c(j)) {\n                \
    \    flag = false\n                    break\n                }\n            }\n\
    \            if (flag) return true\n        }\n        return false", "      \
    \  val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n          \
    \  val c = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j +\
    \ 1)\n            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        false", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n\
    \            var j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n\
    \            if (j == m) return true\n        }\n        false", "        val\
    \ bs = b + b\n        bs.contains(a)", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        if (bb.contains(a)) return true\n   \
    \     return false", "        val bb = b + b\n        bb.contains(a)", "     \
    \   val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n         \
    \   val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n       \
    \         bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bs = b.toCharArray\n        for (i <- 0 until bs.length)\
    \ {\n            val bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n        \
    \    if (a.contains(bs2.mkString)) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ if (bb.indexOf(a) != -1) return true\n        return false", "        val bs\
    \ = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val c =\
    \ bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n    \
    \        bs(bs.length - 1) = c\n            if (a.contains(bs.mkString)) return\
    \ true\n        }\n        false", "        val n = a.length\n        val m =\
    \ b.length\n        for (i <- 0 until n) {\n            if (a.substring(i, i +\
    \ m) == b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (m > n) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            var flag = true\n \
    \           for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n\
    \                    flag = false\n                    break\n               \
    \ }\n            }\n            if (flag) return true\n        }\n        false",
  "        val n = a.length\n        val m = b.length\n        val s = a + a\n   \
    \     for (i <- 0 to n - m) {\n            if (s.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val s = a + a\n        s.contains(b)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        if (a.length < b.length) return false\n   \
    \     val bb = b + b\n        if (bb.indexOf(a) != -1) return true\n        return\
    \ false", "        val bs = b.toCharArray\n        for (i <- 0 until bs.length)\
    \ {\n            val bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n        \
    \    if (a.contains(bs2.mkString)) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     bb.contains(a)", "        if (a.length < b.length) return false\n      \
    \  val bs = b + b\n        return bs.contains(a)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val n = a.length\n        val m = b.length\n        if (m > n) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
