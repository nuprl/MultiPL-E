language: scala
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        var i = 3\n        while (i <= sqrt(n)) {\n\
    \            if (n % i == 0) return false\n            i += 2\n        }\n   \
    \     return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3 to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cto51h4.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m3\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 2) return true\n        if (n % 2 == 0) return false\n     \
    \   val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n        \
    \    if (n % i == 0) return false\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgscmp_69.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0yorxu2_.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3 to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8cto51h4.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m3\e[0m to limit by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (limit\
    \ : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 2) return true\n        if (n == 1 || n % 2 == 0) return false\n\
    \        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n \
    \           if (n % i == 0) return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n < 4) return true\n        if\
    \ (n % 2 == 0) return false\n        if (n < 9) return true\n        if (n % 3\
    \ == 0) return false\n        val r = floor(sqrt(n)).toLong\n        var f = 5\n\
    \        while (f <= r) {\n            if (n % f == 0) return false\n        \
    \    if (n % (f + 2) == 0) return false\n            f += 6\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n <= 3) return true\n        if\
    \ (n % 2 == 0 || n % 3 == 0) return false\n        for (i <- 5 to sqrt(n).toInt\
    \ by 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt_n = sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt_n by 2) {\n            if (n % i == 0) return false\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 2) return true\n        if (n == 1 || n % 2 == 0) return false\n\
    \        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n \
    \           if (n % i == 0) return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3L to sqrt(n).toLong by 2) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3 to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplwbz_7gw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n        for (i\
    \ <- 3L to limit by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 2) return true\n        if (n < 2 || n % 2 == 0) return false\n\
    \        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n \
    \           if (n % i == 0) return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by 2) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n <= 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmporcuosnw.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n  \
    \  // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n\
    \    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n\
    \    // >>> is_prime(1)\n    // False\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        if\
    \ (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i\
    \ <- 3L to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5rxo57ib.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792862
