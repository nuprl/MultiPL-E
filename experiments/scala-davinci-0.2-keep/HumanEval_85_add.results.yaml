language: scala
name: HumanEval_85_add
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n         \
    \       sum += lst(i)\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n\
    \    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong,\
    \ 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
    \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n         \
    \       sum += lst(i)\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n\
    \    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong,\
    \ 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong, 0l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length by 2) {\n            if (lst(i) % 2 == 0) sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
    \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69kff348.scala:15)\n\tat Problem.main(tmp69kff348.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
    \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
    \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ lst.indices) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
    \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong, 88l.toLong)))\
    \ == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
    \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n   \
    \ def add(lst : List[Long]) : Long = {\n        var sum = 0L\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) sum +=\
    \ lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((List[Long](4l.toLong, 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n   \
    \ assert(add((List[Long](4l.toLong, 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n\
    \    assert(add((List[Long](4l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800079
