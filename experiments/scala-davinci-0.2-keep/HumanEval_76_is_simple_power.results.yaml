language: scala
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var y = n\n        while (y < x) {\n            y *= n\n\
    \        }\n        return y == x\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) {\n            if (x == 1) true\
    \ else false\n        } else {\n            if (x == 1) false else {\n       \
    \         var i = 2\n                while (pow(n, i) <= x) {\n              \
    \      if (pow(n, i) == x) return true\n                    i += 1\n         \
    \       }\n                false\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9hzh0cx.scala:38)\n\tat Problem.main(tmpt9hzh0cx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        var p = pow(n, i)\n        while (p <= x) {\n            if (p == x)\
    \ return true\n            i += 1\n            p = pow(n, i)\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var i =\
    \ 0\n        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return\
    \ true\n            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (x == pow(n, i).toLong) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = log(x) / log(n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4kd07zv2.scala:27)\n\tat Problem.main(tmp4kd07zv2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var m = n\n        while (m <= x) {\n            if (m\
    \ == x) return true\n            m *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        var p = pow(n, i)\n        while (p <= x) {\n            if (p == x)\
    \ return true\n            i += 1\n            p = pow(n, i)\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var i =\
    \ 2\n        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkuk11qu.scala:33)\n\tat Problem.main(tmpdkuk11qu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val log = log10(x)\
    \ / log10(n)\n        log % 1 == 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = x / n\n\
    \        isSimplePower(y, n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        var i = 2\n        while\
    \ (i <= x) {\n            if (pow(n, i) == x) return true\n            i += 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var power = n\n        while (power <= x) {\n        \
    \    if (power == x) return true\n            power *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        var y = x / n\n\
    \        while (y % n == 0) y /= n\n        y == 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // your code here\n        true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) ==\
    \ (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapb67iyn.scala:20)\n\tat Problem.main(tmpapb67iyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = x / n\n\
    \        if (y == 1) return true\n        if (y % n != 0) return false\n     \
    \   val z = y / n\n        if (z == 1) return true\n        if (z % n != 0) return\
    \ false\n        val w = z / n\n        if (w == 1) return true\n        if (w\
    \ % n != 0) return false\n        val v = w / n\n        if (v == 1) return true\n\
    \        if (v % n != 0) return false\n        val u = v / n\n        if (u ==\
    \ 1) return true\n        if (u % n != 0) return false\n        val t = u / n\n\
    \        if (t == 1) return true\n        if (t % n != 0) return false\n     \
    \   val s = t / n\n        if (s == 1) return true\n        if (s % n != 0) return\
    \ false\n        val r = s / n\n        if (r == 1) return true\n        if (r\
    \ % n != 0) return false\n        val q = r / n\n        if (q == 1) return true\n\
    \        if (q % n != 0) return false\n        val p = q / n\n        if (p ==\
    \ 1) return true\n        if (p % n != 0) return false\n        val o = p / n\n\
    \        if (o == 1) return true\n        if (o % n != 0) return false\n     \
    \   val m = o / n\n        if (m == 1) return true\n        if (m % n != 0) return\
    \ false\n        val l = m / n\n        if (l == 1) return true\n        if (l\
    \ % n != 0) return false\n        val k = l / n\n        if (k == 1) return true\n\
    \        if (k % n != 0) return false\n        val j = k / n\n        if (j ==\
    \ 1) return true\n        if (j % n != 0) return false\n        val i = j / n\n\
    \        if (i == 1) return true\n        if (i % n != 0) return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58_atlrk.scala:65:8\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m        \e[33mif\e[0m (i % n\
    \ != \e[31m0\e[0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are\
    \ missing an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var result = false\n        for (i <- 1 to\
    \ x.toInt) {\n            if (pow(n, i) == x) result = true\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpszl1ieg4.scala:31)\n\tat Problem.main(tmpszl1ieg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var result = false\n        var i = 1\n   \
    \     while(i <= x) {\n            if(pow(n, i).toLong == x) {\n             \
    \   result = true\n                i = x + 1\n            }\n            i +=\
    \ 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0soi9f3y.scala:20:20\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                i = x + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbiic4w64.scala:22)\n\tat Problem.main(tmpbiic4w64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r - r.toInt\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpssrwa_48.scala:22)\n\tat Problem.main(tmpssrwa_48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var result = n\n        while (result\
    \ <= x) {\n            if (result == x) return true\n            result *= n\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        var i = 2\n        while\
    \ (i <= x) {\n            if (pow(n, i) == x) return true\n            i += 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var result = n\n        while (result\
    \ <= x) {\n            if (result == x) return true\n            result *= n\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var i =\
    \ 2\n        while (i <= x) {\n            if (i == x) return true\n         \
    \   i *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih9l9a31.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var y = n\n        while (y < x) {\n            y *= n\n\
    \        }\n        return y == x\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 0\n        while(pow(n, i) <= x) {\n\
    \            if(pow(n, i) == x) return true\n            i += 1\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        // your code here\n        var i = 1\n    \
    \    while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n \
    \           i += 1\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzgxghxb.scala:33)\n\tat Problem.main(tmppzgxghxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = x / n\n\
    \        if (y % n == 0) return isSimplePower(y, n)\n        true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) ==\
    \ (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6j8xsszh.scala:28)\n\tat Problem.main(tmp6j8xsszh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        var p = n\n        while (p <= x) {\n            if (p == x) return true\n\
    \            p *= n\n            i += 1\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        var i = 2\n        while\
    \ (i <= x) {\n            if (pow(n, i) == x) return true\n            i += 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            if\
    \ (i > x) return false\n            i *= n\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6td22g8d.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val log = log10(x) / log10(n)\n        log\
    \ == log.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprab4nz15.scala:27)\n\tat Problem.main(tmprab4nz15.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var p = n\n\
    \        while (p < x) {\n            p *= n\n        }\n        return p == x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return true\n        if (x == 1)\
    \ return true\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        return isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (x % i == 0) {\n                if (i\
    \ == n) return true\n                else return false\n            }\n      \
    \      i += 1\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ljf1x3c.scala:31)\n\tat Problem.main(tmp7ljf1x3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val log = log10(x) / log10(n)\n        log\
    \ == log.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprab4nz15.scala:27)\n\tat Problem.main(tmprab4nz15.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var p = n\n        while (p <= x) {\n\
    \            if (p == x) return true\n            p *= n\n            i += 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1\n        while (pow(n, i) <= x) {\n\
    \            if (pow(n, i) == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplow70o94.scala:32)\n\tat Problem.main(tmplow70o94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var m = n\n\
    \        while (m <= x) {\n            if (m == x) return true\n            m\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = x / n\n\
    \        if (y % n == 0) return isSimplePower(y, n)\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxf4r9y8.scala:28)\n\tat Problem.main(tmpfxf4r9y8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 1\n        while (pow(n, i) <= x) {\n        \
    \    if (pow(n, i) == x) return true\n            i += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var result = false\n        var i = 1\n   \
    \     while (i <= x) {\n            if (pow(n, i).toLong == x) {\n           \
    \     result = true\n                i = x\n            }\n            i += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mvn8t04.scala:20:20\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                i = x\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (x : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliq1ikyc.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqnl1r81.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) =>\
    \ true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) =>\
    \ true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) =>\
    \ false\n    // is_simple_power(5, 3) => false\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793858
