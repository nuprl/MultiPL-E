language: scala
name: HumanEval_111_histogram
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyodba0zq.scala:33)\n\tat Problem.main(tmpyodba0zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmlb5gelx.scala:39)\n\tat Problem.main(tmpmlb5gelx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdauvc9ah.scala:30)\n\tat Problem.main(tmpdauvc9ah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppu58ktp5.scala:27)\n\tat Problem.main(tmppu58ktp5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7rsfno_.scala:33)\n\tat Problem.main(tmpe7rsfno_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = Map[String,Long]()\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpajhmjf3u.scala:38)\n\tat Problem.main(tmpajhmjf3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ {\n                letterCount(letter) += 1\n            } else {\n        \
    \        letterCount(letter) = 1\n            }\n        }\n        val maxCount\
    \ = letterCount.values.max\n        val maxLetters = letterCount.filter(x => x._2\
    \ == maxCount)\n        maxLetters\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsgxqtg0i.scala:34)\n\tat Problem.main(tmpsgxqtg0i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = new\
    \ HashMap[String,Long]\n        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ letterCount(letter) += 1\n            else letterCount(letter) = 1\n       \
    \ }\n        val maxCount = letterCount.values.max\n        val maxLetters = letterCount.filter(x\
    \ => x._2 == maxCount)\n        maxLetters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3alo7d6f.scala:31)\n\tat Problem.main(tmp3alo7d6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44r4nr3z.scala:27)\n\tat Problem.main(tmp44r4nr3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4rzqa7de.scala:39)\n\tat Problem.main(tmp4rzqa7de.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result += (c -> 1)\n        }\n        result.filter(x => x._2 == result.values.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8fbrf84p.scala:28)\n\tat Problem.main(tmp8fbrf84p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            if (testMap.contains(testArray(i)))\
    \ {\n                testMap(testArray(i)) += 1\n            } else {\n      \
    \          testMap += (testArray(i) -> 1)\n            }\n        }\n        val\
    \ max = testMap.values.max\n        val result = Map[String,Long]()\n        for\
    \ ((k,v) <- testMap) {\n            if (v == max) {\n                result +=\
    \ (k -> v)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwfun_vtc.scala:39)\n\tat Problem.main(tmpwfun_vtc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc_8ug1fq.scala:27)\n\tat Problem.main(tmpc_8ug1fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        val result = counts.filter(x =>\
    \ x._2 == max)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5l326mnr.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \ Found:    (result : scala.collection.MapView[String, Int])\n\e[31m   |\e[0m\
    \              Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter,count)\
    \ <- map) {\n            if (count == max) {\n                result += (letter\
    \ -> count)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76j6co3k.scala:39)\n\tat Problem.main(tmp76j6co3k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppu58ktp5.scala:27)\n\tat Problem.main(tmppu58ktp5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        if (test.length() > 0)\
    \ {\n            var max = 0\n            var maxLetters = List[String]()\n  \
    \          var letters = test.split(\" \")\n            for (letter <- letters)\
    \ {\n                if (result.contains(letter)) {\n                    var count\
    \ = result(letter)\n                    result += (letter -> (count + 1))\n  \
    \                  if (count + 1 > max) {\n                        max = count\
    \ + 1\n                        maxLetters = List(letter)\n                   \
    \ } else if (count + 1 == max) {\n                        maxLetters = letter\
    \ :: maxLetters\n                    }\n                } else {\n           \
    \         result += (letter -> 1)\n                    if (1 > max) {\n      \
    \                  max = 1\n                        maxLetters = List(letter)\n\
    \                    } else if (1 == max) {\n                        maxLetters\
    \ = letter :: maxLetters\n                    }\n                }\n         \
    \   }\n            result = Map[String,Long]()\n            for (letter <- maxLetters)\
    \ {\n                result += (letter -> max)\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppakl038v.scala:24:30\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                        max =\
    \ count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Long\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        if (test.length > 0) {\n\
    \            val letters = test.split(\" \")\n            var max = 0\n      \
    \      for (letter <- letters) {\n                if (result.contains(letter))\
    \ result(letter) += 1\n                else result(letter) = 1\n             \
    \   if (result(letter) > max) max = result(letter).toInt\n            }\n    \
    \        result = result.filter(x => x._2 == max)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35mu1kid.scala:30)\n\tat Problem.main(tmp35mu1kid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) result(key) = value\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7msih6n.scala:37)\n\tat Problem.main(tmpm7msih6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((key,value) <- map)\
    \ {\n            if (value == max) result(key) = value\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69g4x4ee.scala:34)\n\tat Problem.main(tmp69g4x4ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7rsfno_.scala:33)\n\tat Problem.main(tmpe7rsfno_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvjrbm1q.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCounts.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxqel7ex.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_gbtta9.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            histogram.put(letter, count + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659799450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val wordCount = words.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = wordCount.values.max\n        wordCount.filter(x => x._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2yvbvto.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        wordCount.filter(\e[36mx\e\
    [0m => x._2 == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) {\n   \
    \             map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.keys.filter(key => map(key) == max)\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6p26lfg8.scala:38)\n\tat Problem.main(tmp6p26lfg8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5mx1j3a.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n\
    \        wordCounts.filter(wordCount => wordCount._2 == maxCount)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaeyocefy.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        wordCounts.filter(\e\
    [36mwordCount\e[0m => wordCount._2 == maxCount)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m  \
    \      Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) result(k) = v\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp429x7sbt.scala:37)\n\tat Problem.main(tmp429x7sbt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        var max = 0L\n        for (c <- map.keys) {\n      \
    \      if (map(c) > max) max = map(c)\n        }\n        val result = new HashMap[String,Long]\n\
    \        for (c <- map.keys) {\n            if (map(c) == max) result(c) = max\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp240a7hm3.scala:36)\n\tat Problem.main(tmp240a7hm3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) result(k) = v\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp429x7sbt.scala:37)\n\tat Problem.main(tmp429x7sbt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val arr = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i)))\
    \ {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i))\
    \ = 1\n            }\n        }\n        var max = 0\n        for (i <- map.values)\
    \ {\n            if (i > max) max = i.toInt\n        }\n        val result = new\
    \ HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v == max)\
    \ result(k) = v\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc5ncl275.scala:40)\n\tat Problem.main(tmpc5ncl275.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.keys.filter(key => map(key) == max)\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypeopvvc.scala:38)\n\tat Problem.main(tmpypeopvvc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(identity).mapValues(_.size)\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6i9no3as.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val maxKeys = histogram.filter(x => x._2 == max).keys\n        val result\
    \ = new HashMap[String,Long]\n        for (key <- maxKeys) {\n            result(key)\
    \ = max\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yxbtzas.scala:38)\n\tat Problem.main(tmp3yxbtzas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = counts.values.max\n        counts.filter(p => p._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44zquml7.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mp\e\
    [0m => p._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3h8d06k6.scala:34)\n\tat Problem.main(tmp3h8d06k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(identity).mapValues(_.size)\n\
    \        val max = map.values.max\n        map.filter(_._2 == max)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnnuiv3ll.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4n73hntf.scala:27)\n\tat Problem.main(tmp4n73hntf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                result(letter)\
    \ = count\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8fsohyp.scala:39)\n\tat Problem.main(tmpc8fsohyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val m = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (m.contains(c)) m(c) += 1\n            else m(c) = 1\n\
    \        }\n        val max = m.values.max\n        m.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15a_48n6.scala:29)\n\tat Problem.main(tmp15a_48n6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result.filter(x => x._2 == result.values.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2233_b4n.scala:28)\n\tat Problem.main(tmp2233_b4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val keys = map.filter(x => x._2 == max).keys\n        keys.map(x => (x,max)).toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74mxs_s8.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        keys.map(\e[36mx\e[0m\
    \ => (x,max)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (i <- test.split(\" \"\
    )) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i\
    \ -> 1)\n        }\n        var max = 0\n        for (i <- map.values) max = max.max(i)\n\
    \        var result = Map[String,Long]()\n        for ((k,v) <- map) if (v ==\
    \ max) result += (k -> v)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6fup1_9d.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ map.values) max = max.max(i)\n\e[31m\e[31m   |\e[0m                        \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \           Found:    (i : Long)\n\e[31m   |\e[0m                            \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c\
    \ -> 1)\n        }\n        var max = 0L\n        for (c <- map.keys) max = max\
    \ max map(c)\n        var result = Map[String,Long]()\n        for (c <- map.keys)\
    \ if (map(c) == max) result += (c -> max)\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa7xjy3rj.scala:32)\n\tat Problem.main(tmpa7xjy3rj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7rsfno_.scala:33)\n\tat Problem.main(tmpe7rsfno_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        var map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map += (letter -> 1)\n        }\n        var max = 0\n\
    \        for (letter <- map.keys) {\n            if (map(letter) > max) max =\
    \ map(letter).toInt\n        }\n        var result = Map[String,Long]()\n    \
    \    for (letter <- map.keys) {\n            if (map(letter) == max) result +=\
    \ (letter -> max)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl43iz2hn.scala:37)\n\tat Problem.main(tmpl43iz2hn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppu58ktp5.scala:27)\n\tat Problem.main(tmppu58ktp5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7o72vp62.scala:29)\n\tat Problem.main(tmp7o72vp62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (map.contains(x)) {\n                map(x) += 1\n    \
    \        } else {\n                map += (x -> 1)\n            }\n        })\n\
    \        map\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvsart3h.scala:26)\n\tat Problem.main(tmpbvsart3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphty53kb0.scala:29)\n\tat Problem.main(tmphty53kb0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((letter,count) <- map) {\n \
    \           if (count == max) {\n                result(letter) = count\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjos096bf.scala:39)\n\tat Problem.main(tmpjos096bf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            if (testMap.contains(testArray(i)))\
    \ {\n                testMap(testArray(i)) += 1\n            } else {\n      \
    \          testMap += (testArray(i) -> 1)\n            }\n        }\n        testMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiui8slkq.scala:27)\n\tat Problem.main(tmpiui8slkq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxqel7ex.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ letter -> 1\n            }\n        }\n        map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbrtmjiy.scala:27)\n\tat Problem.main(tmpvbrtmjiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) map(token)\
    \ += 1\n            else map(token) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_hukwxz.scala:30)\n\tat Problem.main(tmpd_hukwxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35mu1kid.scala:30)\n\tat Problem.main(tmp35mu1kid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4n73hntf.scala:27)\n\tat Problem.main(tmp4n73hntf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = Map[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8lon321.scala:29)\n\tat Problem.main(tmpj8lon321.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxqel7ex.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letterCount = Map[String,Long]()\n        test.split(\" \"\
    ).foreach(letter => {\n            if (letterCount.contains(letter)) {\n     \
    \           letterCount(letter) += 1\n            } else {\n                letterCount(letter)\
    \ = 1\n            }\n        })\n        letterCount.filter(x => x._2 == letterCount.values.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfxfz3op.scala:31)\n\tat Problem.main(tmptfxfz3op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) {\n   \
    \             map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuhlekfo.scala:38)\n\tat Problem.main(tmpyuhlekfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        val maxLetters = counts.filter(_._2\
    \ == max)\n        return maxLetters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppeivwrnq.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m maxLetters\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \ Found:    (maxLetters : scala.collection.MapView[String, Int])\n\e[31m   |\e\
    [0m          Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result += (letter -> count)\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1v1t7s2f.scala:37)\n\tat Problem.main(tmp1v1t7s2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44r4nr3z.scala:27)\n\tat Problem.main(tmp44r4nr3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map +=\
    \ (c -> 1)\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9t6cub_z.scala:29)\n\tat Problem.main(tmp9t6cub_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        return map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bdw7yro.scala:30)\n\tat Problem.main(tmp0bdw7yro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44r4nr3z.scala:27)\n\tat Problem.main(tmp44r4nr3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        map.filter(x => x._2\
    \ == map.values.max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpterrqbpz.scala:29)\n\tat Problem.main(tmpterrqbpz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) {\n                result(k) = v\n            }\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4rbifq6.scala:39)\n\tat Problem.main(tmpu4rbifq6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7e_4f2k.scala:33)\n\tat Problem.main(tmpc7e_4f2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        if (test.length == 0) return Map()\n        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprosl48b5.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val counts = words.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        counts.filter(_._2 == maxCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bm8qp5d.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m\
    \   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]()\n        for ((key,value) <- map) {\n         \
    \   if (value == max) {\n                result(key) = value\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2p9xd_f.scala:39)\n\tat Problem.main(tmpn2p9xd_f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        val maxCountLetters = counts.filter(_._2\
    \ == maxCount)\n        maxCountLetters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6n9utkw.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        maxCountLetters\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  (maxCountLetters : scala.collection.MapView[String, Int])\n\e[31m   |\e[0m\
    \     Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((word,count) <- map)\
    \ {\n            if (count == max) result(word) = count\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxr_109r3.scala:34)\n\tat Problem.main(tmpxr_109r3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44r4nr3z.scala:27)\n\tat Problem.main(tmp44r4nr3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        var histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram += (letter -> 1)\n            }\n        }\n        histogram\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7wgh7_p.scala:27)\n\tat Problem.main(tmpd7wgh7_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        var map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        val max = map.values.max\n\
    \        var maxMap = Map[String,Long]()\n        for ((k,v) <- map) {\n     \
    \       if (v == max) {\n                maxMap += (k -> v)\n            }\n \
    \       }\n        maxMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpldl2v7y9.scala:39)\n\tat Problem.main(tmpldl2v7y9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (map.contains(x)) map(x) += 1\n            else map(x)\
    \ = 1\n        })\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaadhztv.scala:29)\n\tat Problem.main(tmpmaadhztv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.length)\n        val max = counts.values.max\n        counts.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6z4nx40g.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        hist.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzqr9q2i.scala:33)\n\tat Problem.main(tmpkzqr9q2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(_._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uhqri_g.scala:33)\n\tat Problem.main(tmp_uhqri_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(x\
    \ => x._2 == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_5muoia.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCounts.filter(\e\
    [36mx\e[0m => x._2 == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (hist.contains(c)) hist(c) += 1\n            else hist(c)\
    \ = 1\n        }\n        val max = hist.values.max\n        hist.filter(x =>\
    \ x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m2whyk7.scala:29)\n\tat Problem.main(tmp4m2whyk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((letter,count) <- map) {\n \
    \           if (count == max) {\n                result(letter) = count\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjos096bf.scala:39)\n\tat Problem.main(tmpjos096bf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) hist(letter)\
    \ += 1\n            else hist(letter) = 1\n        }\n        val max = hist.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ hist) {\n            if (count == max) result(letter) = count\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5hxs4y4.scala:34)\n\tat Problem.main(tmpn5hxs4y4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxqel7ex.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val dict = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (dict.contains(letter)) dict(letter)\
    \ += 1\n            else dict(letter) = 1\n        }\n        val max = dict.values.max\n\
    \        dict.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5yoodab5.scala:30)\n\tat Problem.main(tmp5yoodab5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((k,v) <- map) {\n\
    \            if (v == max) result(k) = v\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8s9j_n08.scala:34)\n\tat Problem.main(tmp8s9j_n08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35mu1kid.scala:30)\n\tat Problem.main(tmp35mu1kid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) {\n                map(c) += 1\n      \
    \      } else {\n                map += (c -> 1)\n            }\n        }\n \
    \       var max = 0L\n        for (c <- map.keys) {\n            if (map(c) >\
    \ max) max = map(c)\n        }\n        var result = Map[String,Long]()\n    \
    \    for (c <- map.keys) {\n            if (map(c) == max) result += (c -> max)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrh6e25v.scala:39)\n\tat Problem.main(tmprrh6e25v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val testArray = test.split(\"\
    \ \")\n        for (i <- 0 until testArray.length) {\n            if (result.contains(testArray(i)))\
    \ {\n                result(testArray(i)) += 1\n            } else {\n       \
    \         result(testArray(i)) = 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5b5y_xi.scala:27)\n\tat Problem.main(tmpo5b5y_xi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c\
    \ -> 1)\n        }\n        map.filter(x => x._2 == map.values.max)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_y7zgz9e.scala:28)\n\tat Problem.main(tmp_y7zgz9e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4uuo1g0f.scala:29)\n\tat Problem.main(tmp4uuo1g0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) {\n\
    \                counts(letter) += 1\n            } else {\n                counts(letter)\
    \ = 1\n            }\n        }\n        val maxCount = counts.values.max\n  \
    \      val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- counts) {\n            if (count == maxCount) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5oamhk_9.scala:39)\n\tat Problem.main(tmp5oamhk_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvjrbm1q.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCounts.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(_._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jkhez5e.scala:38)\n\tat Problem.main(tmp1jkhez5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) if (count == max) result(letter) = count\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx2dfega.scala:32)\n\tat Problem.main(tmpfx2dfega.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa7reczbh.scala:26)\n\tat Problem.main(tmpa7reczbh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (hist.contains(c)) hist(c) += 1\n            else hist(c)\
    \ = 1\n        }\n        hist.filter(x => x._2 == hist.values.max)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuq4td_bo.scala:28)\n\tat Problem.main(tmpuq4td_bo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (map.contains(x)) {\n                map(x) += 1\n    \
    \        } else {\n                map += (x -> 1)\n            }\n        })\n\
    \        var max = map.maxBy(_._2)._2\n        map.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprsp43ci6.scala:32)\n\tat Problem.main(tmprsp43ci6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (i <- test.split(\" \"\
    )) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i\
    \ -> 1)\n        }\n        var max = 0L\n        for (i <- map.values) max =\
    \ max.max(i)\n        var result = Map[String,Long]()\n        for ((k,v) <- map)\
    \ if (v == max) result += (k -> v)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsu3osuv.scala:32)\n\tat Problem.main(tmpfsu3osuv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val m = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = m.values.max\n        m.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzx7dcwt5.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        m.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((letter,count) <- hist) {\n\
    \            if (count == max) {\n                result(letter) = count\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8a8uv3ue.scala:39)\n\tat Problem.main(tmp8a8uv3ue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map += (word\
    \ -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3ouhzdf.scala:27)\n\tat Problem.main(tmpq3ouhzdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCount.values.max\n        letterCount.filter(_._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptp70qbco.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCount.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) counts(letter)\
    \ += 1\n            else counts(letter) = 1\n        }\n        val max = counts.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((key,value) <- counts)\
    \ {\n            if (value == max) result(key) = value\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4je2t7pi.scala:34)\n\tat Problem.main(tmp4je2t7pi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        map.filter(x => x._2 == map.values.max)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26gphec9.scala:28)\n\tat Problem.main(tmp26gphec9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (result.contains(word)) {\n\
    \                result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrue43n4.scala:27)\n\tat Problem.main(tmpyrue43n4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(identity).mapValues(_.size)\n\
    \        val max = map.values.max\n        map.filter(_._2 == max)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnnuiv3ll.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0mgk2x3.scala:33)\n\tat Problem.main(tmpf0mgk2x3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35mu1kid.scala:30)\n\tat Problem.main(tmp35mu1kid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ result = Map[String,Long]()\n        for ((letter,count) <- hist) {\n      \
    \      if (count == max) {\n                result(letter) = count\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr5cls4du.scala:39)\n\tat Problem.main(tmpr5cls4du.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result.filter(x => x._2 == result.values.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2233_b4n.scala:28)\n\tat Problem.main(tmp2233_b4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3h8d06k6.scala:34)\n\tat Problem.main(tmp3h8d06k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((k,v) <- map) if\
    \ (v == max) result(k) = v\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3le8ll4v.scala:32)\n\tat Problem.main(tmp3le8ll4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n\
    \        wordCounts.filter(wordCount => wordCount._2 == maxCount)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaeyocefy.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        wordCounts.filter(\e\
    [36mwordCount\e[0m => wordCount._2 == maxCount)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m  \
    \      Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuad6wen.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4n73hntf.scala:27)\n\tat Problem.main(tmp4n73hntf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8xak4el2.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = new\
    \ HashMap[String,Long]\n        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ letterCount(letter) += 1\n            else letterCount(letter) = 1\n       \
    \ }\n        val maxCount = letterCount.values.max\n        val maxLetters = letterCount.filter(x\
    \ => x._2 == maxCount)\n        maxLetters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3alo7d6f.scala:31)\n\tat Problem.main(tmp3alo7d6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ maxLetters = map.filter(x => x._2 == max)\n        maxLetters\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebz0z2ti.scala:34)\n\tat Problem.main(tmpebz0z2ti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        map.filter(x => x._2 == map.values.max)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26gphec9.scala:28)\n\tat Problem.main(tmp26gphec9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) {\n   \
    \             map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_x_p4jj.scala:39)\n\tat Problem.main(tmpy_x_p4jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterMap = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        letterMap\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn33_act7.scala:27)\n\tat Problem.main(tmpn33_act7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ maxKeys = hist.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- maxKeys) {\n            result(key) = max\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1um1hj2.scala:38)\n\tat Problem.main(tmpj1um1hj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map += (word\
    \ -> 1)\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result += (key -> value)\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphuukc0sb.scala:39)\n\tat Problem.main(tmphuukc0sb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35mu1kid.scala:30)\n\tat Problem.main(tmp35mu1kid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ result(letter) += 1\n            else result(letter) = 1\n        }\n      \
    \  result.filter(x => x._2 == result.values.max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppdg2263f.scala:29)\n\tat Problem.main(tmppdg2263f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5mx1j3a.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7o72vp62.scala:29)\n\tat Problem.main(tmp7o72vp62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val tokens = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (token <- tokens) {\n            if (map.contains(token)) {\n   \
    \             map(token) += 1\n            } else {\n                map(token)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ result = new HashMap[String,Long]\n        for ((key,value) <- map) {\n    \
    \        if (value == max) {\n                result(key) = value\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_x_p4jj.scala:39)\n\tat Problem.main(tmpy_x_p4jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val histogram = new\
    \ HashMap[String,Long]\n        for (letter <- testArray) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- histogram) {\n            if (count == max) {\n                maxLetters(letter)\
    \ = count\n            }\n        }\n        maxLetters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7tl_436n.scala:39)\n\tat Problem.main(tmp7tl_436n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        var max = 0\n\
    \        for (letter <- histogram.keys) {\n            if (histogram(letter) >\
    \ max) {\n                max = histogram(letter).toInt\n            }\n     \
    \   }\n        val result = new HashMap[String,Long]\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) == max) {\n                result(letter)\
    \ = histogram(letter)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38tnblkx.scala:44)\n\tat Problem.main(tmp38tnblkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v\
    \ == max) {\n                result(k) = v\n            }\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4rbifq6.scala:39)\n\tat Problem.main(tmpu4rbifq6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) map(word)\
    \ += 1\n            else map(word) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((key,value) <- map)\
    \ {\n            if (value == max) result(key) = value\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69g4x4ee.scala:34)\n\tat Problem.main(tmp69g4x4ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        var max = 0L\n\
    \        for (letter <- histogram.keys) {\n            if (histogram(letter) >\
    \ max) {\n                max = histogram(letter)\n            }\n        }\n\
    \        val result = new HashMap[String,Long]\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) == max) {\n                result(letter)\
    \ = max\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqb9l0utj.scala:44)\n\tat Problem.main(tmpqb9l0utj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (hist.contains(letter)) {\n\
    \                hist(letter) += 1\n            } else {\n                hist(letter)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ result = Map[String,Long]()\n        for ((letter, count) <- hist) {\n     \
    \       if (count == max) {\n                result(letter) = count\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtfnumnd.scala:39)\n\tat Problem.main(tmpgtfnumnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        map.filter(x => x._2\
    \ == map.values.max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxb8rlost.scala:29)\n\tat Problem.main(tmpxb8rlost.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) map(letter)\
    \ += 1\n            else map(letter) = 1\n        }\n        val max = map.values.max\n\
    \        val result = new HashMap[String,Long]\n        for ((letter,count) <-\
    \ map) {\n            if (count == max) result(letter) = count\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3h8d06k6.scala:34)\n\tat Problem.main(tmp3h8d06k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val arr = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i)))\
    \ {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i))\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = new HashMap[String,Long]\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqi3or77s.scala:38)\n\tat Problem.main(tmpqi3or77s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterMap = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        val max = letterMap.values.max\n\
    \        letterMap.filter(x => x._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_xs5bz5.scala:33)\n\tat Problem.main(tmpv_xs5bz5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n\
    \        wordCounts.filter(wordCount => wordCount._2 == maxCount)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaeyocefy.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        wordCounts.filter(\e\
    [36mwordCount\e[0m => wordCount._2 == maxCount)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m  \
    \      Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCount.values.max\n        letterCount.filter(x =>\
    \ x._2 == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq19qjvrz.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCount.filter(\e\
    [36mx\e[0m => x._2 == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpey2l58zq.scala:27)\n\tat Problem.main(tmpey2l58zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (i <- test.split(\"\
    \ \")) {\n            if (result.contains(i)) result(i) += 1\n            else\
    \ result(i) = 1\n        }\n        result.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgr5u0nk.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Map[String,\
    \ Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val m = Map[String,Long]()\n        val l = test.split(\" \")\n\
    \        for (i <- 0 until l.length) {\n            val c = l(i)\n           \
    \ if (m.contains(c)) m(c) += 1\n            else m(c) = 1\n        }\n       \
    \ val max = m.values.max\n        m.filter(x => x._2 == max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdd41elfg.scala:31)\n\tat Problem.main(tmpdd41elfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) result(key) = value\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3_nfnufg.scala:37)\n\tat Problem.main(tmp3_nfnufg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val result = new HashMap[String,Long]\n\
    \        for (letter <- letters) {\n            if (result.contains(letter)) result(letter)\
    \ += 1\n            else result(letter) = 1\n        }\n        val max = result.values.max\n\
    \        val maxLetters = new HashMap[String,Long]\n        for ((letter,count)\
    \ <- result) {\n            if (count == max) maxLetters(letter) = count\n   \
    \     }\n        maxLetters\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxns09ncp.scala:34)\n\tat Problem.main(tmpxns09ncp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(_._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvjrbm1q.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        letterCounts.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhn6m7ja.scala:27)\n\tat Problem.main(tmpxhn6m7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) {\n\
    \                counts(letter) += 1\n            } else {\n                counts(letter)\
    \ = 1\n            }\n        }\n        val max = counts.values.max\n       \
    \ val result = Map[String,Long]()\n        for ((letter,count) <- counts) {\n\
    \            if (count == max) {\n                result(letter) = count\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7xqokfb.scala:39)\n\tat Problem.main(tmpe7xqokfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        counts.filter(_._2 == maxCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpki0p9qt0.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m\
    \   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c\
    \ -> 1)\n        }\n        var max = map.values.max\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) {\n            if (v == max) result += (k -> v)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4f3i3g2d.scala:33)\n\tat Problem.main(tmp4f3i3g2d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7o72vp62.scala:29)\n\tat Problem.main(tmp7o72vp62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (i <- test.split(\" \"\
    )) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i\
    \ -> 1)\n        }\n        var max = 0L\n        for (i <- map.values) max =\
    \ max.max(i)\n        var result = Map[String,Long]()\n        for ((k,v) <- map)\
    \ {\n            if (v == max) result += (k -> v)\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1x1x8ebv.scala:34)\n\tat Problem.main(tmp1x1x8ebv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4n73hntf.scala:27)\n\tat Problem.main(tmp4n73hntf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((key,value) <- map) {\n           \
    \ if (value == max) {\n                result(key) = value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdykj8vw3.scala:39)\n\tat Problem.main(tmpdykj8vw3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkuum1qh.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterMap = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (letterMap.contains(letter))\
    \ {\n                letterMap(letter) += 1\n            } else {\n          \
    \      letterMap(letter) = 1\n            }\n        }\n        val maxCount =\
    \ letterMap.values.max\n        val maxLetters = letterMap.filter(x => x._2 ==\
    \ maxCount)\n        return maxLetters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprde1w9yy.scala:34)\n\tat Problem.main(tmprde1w9yy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a\
    \ b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n \
    \   // histogram('') == {}\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> (count + 1))\n        }\n        map.filter(x\
    \ => x._2 == map.values.max)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoaucspck.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            map += (letter -> (count + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659799499
