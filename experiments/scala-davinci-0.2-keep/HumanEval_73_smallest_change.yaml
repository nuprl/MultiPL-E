name: HumanEval_73_smallest_change
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers, find the minimum number of elements that\n\
  \    // need to be changed to make the array palindromic. A palindromic array is\
  \ an array that\n    // is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n    // For example:\n    //\
  \ smallest_change([1,2,3,5,4,7,9,6]) == 4\n    // smallest_change([1, 2, 3, 4, 3,\
  \ 2, 2]) == 1\n    // smallest_change([1, 2, 3, 2, 1]) == 0\n    def smallestChange(arr\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\
  \ == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong,\
  \ 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong)))\
  \ == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n\
  \    }\n\n}\n"
completions: ["        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j)\
    \ = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n        for (i <-\
    \ 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n       \
    \     else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n            else dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            for (k\
    \ <- i until j) {\n                dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k +\
    \ 1)(j))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n    \
    \            dp(j)(j + i) = min(dp(j + 1)(j + i) + abs(arr(j) - arr(j + 1)), dp(j)(j\
    \ + i - 1) + abs(arr(j + i) - arr(j + i - 1)))\n            }\n        }\n   \
    \     dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else dp(i)(j) = Long.MaxValue\n    \
    \        }\n        }\n        for (l <- 2 until n) {\n            for (i <- 0\
    \ until n - l) {\n                val j = i + l\n                for (k <- i until\
    \ j) {\n                    dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j) +\
    \ abs(arr(i) - arr(j)))\n                }\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i <= j) {\n                    if (i == j) dp(i)(j) = 0\n          \
    \          else if (i + 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n  \
    \                  else {\n                        if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                        else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n                    }\n                }\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i\
    \ + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n       \
    \     for (i <- 0 to n - l) {\n                val j = i + l - 1\n           \
    \     dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (i <- 2 until n) {\n            for (j <- 0 until\
    \ n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + 1)), dp(j)(j + i - 1) + abs(arr(j + i) - arr(j + i - 1)))\n        \
    \    }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n      \
    \  val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n        \
    \    dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = 0\n       \
    \ }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n      \
    \          val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1,\
    \ dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                dp(i)(j) = Long.MaxValue\n            }\n \
    \       }\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n        }\n\
    \        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = if (arr(i) ==\
    \ arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                val j = i + k\n               \
    \ if (arr(i) == arr(j)) {\n                    dp(i)(j) = dp(i + 1)(j - 1)\n \
    \               } else {\n                    dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i >= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i == j + 1) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                    else dp(i)(j) = min(dp(i)(j), dp(i - 1)(j + 1)\
    \ + abs(arr(i) - arr(j)))\n                }\n            }\n        }\n     \
    \   dp(n - 1)(0)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (len <- 3 to n) {\n\
    \            for (i <- 0 until n - len + 1) {\n                val j = i + len\
    \ - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n          \
    \      dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + (if (arr(j) == arr(j + i)) 0\
    \ else 1), dp(j + 1)(j + i) + 1, dp(j)(j + i - 1) + 1)\n            }\n      \
    \  }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j)\
    \ dp(i)(j) = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n       \
    \ for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = if (arr(i) == arr(i +\
    \ 1)) 0 else 1\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) {\n\
    \                dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n            }\n    \
    \    }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n\
    \                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) +\
    \ abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n          \
    \      val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i <= j) {\n  \
    \                  if (i == j) dp(i)(j) = 0\n                    else if (i +\
    \ 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n                    else\
    \ {\n                        dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + (if (arr(i)\
    \ == arr(j)) 0 else 1))\n                        dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + 1)\n                        dp(i)(j) = min(dp(i)(j), dp(i)(j - 1)\
    \ + 1)\n                    }\n                }\n            }\n        }\n \
    \       dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n     \
    \           dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n\
    \        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n\
    \                val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (i <- n - 3 to 0 by -1) {\n            for (j <-\
    \ i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) -\
    \ arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n       \
    \         val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if\
    \ (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n        \
    \    }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n      \
    \  val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n\
    \        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n      \
    \          val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        def helper(arr : List[Long], i : Int,\
    \ j : Int) : Long = {\n            if (i >= j) 0\n            else if (arr(i)\
    \ == arr(j)) helper(arr, i + 1, j - 1)\n            else 1 + min(helper(arr, i\
    \ + 1, j), helper(arr, i, j - 1))\n        }\n        helper(arr, 0, arr.length\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n    \
    \        for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n \
    \               if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n          \
    \      else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n  \
    \      }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n            for\
    \ (i <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        def helper(arr\
    \ : List[Long], left : Int, right : Int) : Long = {\n            if (left >= right)\
    \ 0\n            else if (arr(left) == arr(right)) helper(arr, left + 1, right\
    \ - 1)\n            else min(helper(arr, left + 1, right), helper(arr, left, right\
    \ - 1)) + 1\n        }\n        helper(arr, 0, arr.length - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (i <- 2 until n) {\n            for (j <- 0 until\
    \ n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j)\
    \ - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n          \
    \  }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val\
    \ dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n            }\n        }\n        for (len <- 3 to\
    \ n) {\n            for (i <- 0 to n - len) {\n                val j = i + len\
    \ - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n  \
    \              if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (i <- 2 until n) {\n       \
    \     for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j\
    \ + i - 1) + (if (arr(j) == arr(j + i)) 0 else 1), dp(j + 1)(j + i) + 1, dp(j)(j\
    \ + i - 1) + 1)\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n)\
    \ {\n            for (i <- 0 until n - k) {\n                val j = i + k\n \
    \               dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n         \
    \       if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n   \
    \         }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n \
    \       val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = arr(i) - arr(i + 1)\n       \
    \ }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n\
    \                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) +\
    \ arr(i) - arr(i + 1), dp(i)(j - 1) + arr(j) - arr(j - 1))\n            }\n  \
    \      }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (len <- 3 to n) {\n            for (i <- 0 to n -\
    \ len) {\n                val j = i + len - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i +\
    \ 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n\
    \                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n         \
    \   }\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n -\
    \ l) {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                val j = i + k\n               \
    \ dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if\
    \ (arr(i) == arr(i + 1)) 0 else 1\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                val j = i + k\n               \
    \ dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = 0\n        }\n        for (len <- 3 to n) {\n   \
    \         for (i <- 0 until n - len + 1) {\n                val j = i + len -\
    \ 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n    \
    \            if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        def helper(arr : List[Long],\
    \ left : Int, right : Int) : Long = {\n            if (left >= right) 0\n    \
    \        else if (arr(left) == arr(right)) helper(arr, left + 1, right - 1)\n\
    \            else 1 + min(helper(arr, left + 1, right), helper(arr, left, right\
    \ - 1))\n        }\n        helper(arr, 0, arr.length - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n            else\
    \ dp(i)(j) = Long.MaxValue\n        }\n        for (i <- n - 1 to 0 by -1; j <-\
    \ i + 1 until n) {\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i +\
    \ 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        def recurse(arr : List[Long],\
    \ left : Int, right : Int) : Long = {\n            if (left >= right) return 0\n\
    \            if (arr(left) == arr(right)) return recurse(arr, left + 1, right\
    \ - 1)\n            else return 1 + min(recurse(arr, left + 1, right), recurse(arr,\
    \ left, right - 1))\n        }\n        recurse(arr, 0, arr.length - 1)", "  \
    \      val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i >= j) {\n  \
    \                  if (i == j) dp(i)(j) = 0\n                    else if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                    else dp(i)(j) =\
    \ min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n    \
    \    }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j)\
    \ dp(i)(j) = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n       \
    \ for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = if (arr(i) == arr(i +\
    \ 1)) 0 else 1\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until n) {\n                if (i == j)\
    \ dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n            }\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until\
    \ n) {\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n  \
    \              else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n         \
    \   }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n       \
    \ val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n         \
    \   dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i < j) {\n                    if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                    else dp(i)(j) =\
    \ min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n    \
    \    }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          for (k <- i until j) {\n                        dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j) + abs(arr(i) - arr(j)))\n                    }\n   \
    \             }\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n          \
    \      dp(j)(j + i) = dp(j + 1)(j + i - 1) + (if (arr(j) == arr(j + i)) 0 else\
    \ 2)\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n\
    \                val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) =\
    \ abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + (if (arr(i) == arr(i + k)) 0 else 1), dp(i)(i + k - 1) + 1)\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (l <- 2 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (l == 2) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n     \
    \           else {\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j)\
    \ + 1)\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + 1)\n     \
    \               dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + (if (arr(i) == arr(j))\
    \ 0 else 1))\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i < j) {\n                    if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                    else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j -\
    \ 1)) + 1\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 until n - len + 1) {\n                val j = i + len - 1\n           \
    \     dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n       \
    \     else dp(i)(j) = Long.MaxValue\n        }\n        for (i <- 0 until n -\
    \ 1) {\n            dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n      \
    \  }\n        for (len <- 2 until n) {\n            for (i <- 0 until n - len)\
    \ {\n                val j = i + len\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + 1)), dp(i)(i\
    \ + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n   \
    \     dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n\
    \            for (i <- 0 to n - l) {\n                val j = i + l - 1\n    \
    \            dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n            \
    \    if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n    \
    \            else dp(i)(j) = Long.MaxValue\n            }\n        }\n       \
    \ for (i <- 0 until n) {\n            for (j <- 0 until n) {\n               \
    \ if (i >= j) {\n                    if (i == j) dp(i)(j) = 0\n              \
    \      else if (i == j + 1) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n      \
    \              else dp(i)(j) = min(dp(i)(j), dp(i - 1)(j + 1) + (if (arr(i) ==\
    \ arr(j)) 0 else 1))\n                }\n            }\n        }\n        dp(n\
    \ - 1)(0)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j)\
    \ dp(i)(j) = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n       \
    \ for (i <- 0 until n - 1) {\n            if (arr(i) != arr(i + 1)) dp(i)(i +\
    \ 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i + k) =\
    \ min(dp(i + 1)(i + k - 1) + (if (arr(i) == arr(i + k)) 0 else 1), dp(i)(i + k\
    \ - 1) + 1)\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if\
    \ (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n             \
    \   if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i !=\
    \ n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n\
    \            for (i <- 0 to n - l) {\n                val j = i + l - 1\n    \
    \            dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n            \
    \    if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) dp(i)(i) = 0\n        for (len <- 2 to n) {\n            for (i <-\
    \ 0 until n - len + 1) {\n                val j = i + len - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = dp(i + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else 1)\n\
    \                for (k <- i + 1 to j - 1) {\n                    dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j))\n                }\n            }\n        }\n    \
    \    dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until n) {\n                if (i == j)\
    \ dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n            }\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j)\
    \ dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n                  \
    \  for (k <- i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k)\
    \ + dp(k + 1)(j) + abs(arr(i) - arr(j)))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n       \
    \         val j = i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1,\
    \ dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i\
    \ + k - 1) + (if (arr(i) == arr(i + k)) 0 else 1), dp(i)(i + k - 1) + 1)\n   \
    \         }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n \
    \       val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n; j <- 0\
    \ until n) {\n            if (i == j) dp(i)(j) = 0\n            else dp(i)(j)\
    \ = Long.MaxValue\n        }\n        for (i <- 0 until n; j <- 0 until n) {\n\
    \            if (i == j) dp(i)(j) = 0\n            else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n            else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j\
    \ - 1) + abs(arr(i) - arr(j)))\n            for (k <- i until j) {\n         \
    \       dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i == j) dp(i)(j)\
    \ = 0\n                else if (i + 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0\
    \ else 1\n                else {\n                    dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j) + 1)\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1)\
    \ + 1)\n                    if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n                }\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n    \
    \        for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n \
    \               dp(i)(j) = if (arr(i) == arr(j)) dp(i + 1)(j - 1) else 1 + min(dp(i\
    \ + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n)\
    \ dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k\
    \ <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val\
    \ j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n; j <- 0 until n) {\n            dp(i)(j) = Long.MaxValue\n\
    \        }\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n       \
    \ }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    if (arr(i) == arr(j)) {\n                    dp(i)(j) = dp(i + 1)(j - 1)\n\
    \                } else {\n                    dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        if (arr.length == 0) 0\n        else {\n            val n = arr.length\n\
    \            val dp = Array.ofDim[Long](n, n)\n            for (i <- 0 until n)\
    \ dp(i)(i) = 0\n            for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n            for (i <- 2 until n) {\n                for (j <-\
    \ 0 until n - i) {\n                    dp(j)(j + i) = min(dp(j + 1)(j + i) +\
    \ abs(arr(j) - arr(j + i)), dp(j)(j + i - 1) + abs(arr(j + i) - arr(j + i - 1)))\n\
    \                }\n            }\n            dp(0)(n - 1)\n        }", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n\
    \                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n         \
    \   }\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + (if (arr(i)\
    \ == arr(i + k)) 0 else 1), dp(i)(i + k - 1) + 1)\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n            }\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- n - 2 to 0 by -1)\
    \ {\n            for (j <- i + 1 until n) {\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i +\
    \ 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n; j <- 0 until n) dp(i)(j) = Long.MaxValue\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if\
    \ (arr(i) == arr(i + 1)) 0 else 1\n        for (l <- 2 until n) {\n          \
    \  for (i <- 0 until n - l) {\n                val j = i + l\n               \
    \ if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i < j) {\n                    if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                    else dp(i)(j) =\
    \ min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n    \
    \    }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (l <- 1 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i <= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i + 1 == j) dp(i)(j) = if (arr(i)\
    \ == arr(j)) 0 else 1\n                    else {\n                        val\
    \ min = min(dp(i + 1)(j), dp(i)(j - 1))\n                        dp(i)(j) = if\
    \ (arr(i) == arr(j)) min else min + 1\n                    }\n               \
    \ }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n            for\
    \ (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i)\
    \ + abs(arr(j) - arr(j + 1)), dp(j)(j + i - 1) + abs(arr(j + i) - arr(j + i -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n            for (j\
    \ <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1)\
    \ + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n            \
    \    val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n\
    \                val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j\
    \ - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n            for (i\
    \ <- 0 until n - l + 1) {\n                val j = i + l - 1\n               \
    \ if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      val j = i + k\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) +\
    \ 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n            for\
    \ (i <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n    \
    \        for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n \
    \               dp(i)(j) = if (arr(i) == arr(j)) dp(i + 1)(j - 1) else min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n            for\
    \ (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n            \
    \    if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n          \
    \  for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j\
    \ + i) + abs(arr(j) - arr(j + 1)), dp(j)(j + i - 1) + abs(arr(j + i) - arr(j +\
    \ i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if\
    \ (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n             \
    \   if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) =\
    \ 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n    \
    \            dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j) - arr(j + i)),\
    \ dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (i <- n - 3 to 0 by -1) {\n\
    \            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i\
    \ + k) + abs(arr(i) - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i +\
    \ k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) -\
    \ arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n        \
    \    }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n      \
    \  val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n        \
    \    dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 1 until n) dp(i)(i - 1) = 0\n        for (i <- n - 2\
    \ to 0 by -1) {\n            for (j <- i + 1 until n) {\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1)\
    \ + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until n) {\n                dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n\
    \            for (i <- 0 to n - l) {\n                val j = i + l - 1\n    \
    \            if (arr(i) == arr(j)) {\n                    dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                } else {\n                    dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n    \
    \        for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n \
    \               if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n          \
    \      else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n  \
    \      }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) =\
    \ abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n            }\n        }\n        for (l <- 3 to n) {\n            for (i\
    \ <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j)\
    \ = dp(i + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else 1)\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = arr(i) - arr(i + 1)\n        for (i <- 2 until n) {\n    \
    \        for (j <- 0 until n - i) {\n                dp(j)(j + i) = dp(j + 1)(j\
    \ + i - 1) + arr(j) - arr(j + i)\n            }\n        }\n        var min =\
    \ Long.MaxValue\n        for (i <- 0 until n) {\n            min = min min dp(0)(i)\n\
    \            min = min min dp(i)(n - 1)\n        }\n        min", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n\
    \                val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j\
    \ - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i\
    \ + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i\
    \ + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (i <- n - 3 to\
    \ 0 by -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i > 0) dp(i)(i - 1) = 0\n        }\n        for (l <- 2\
    \ to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l\
    \ - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n  \
    \              if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (i <- n - 3\
    \ to 0 by -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j\
    \ - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) =\
    \ abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (l <- 3 to n) {\n          \
    \  for (i <- 0 to n - l) {\n                val j = i + l - 1\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n       \
    \         val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j\
    \ - 1))\n            }\n        }\n        dp(0)(n - 1)"]
stop_tokens:
- "\n    }\n"
