language: scala
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val num = arr(i.toInt)\n            if (num < 100) sum += num\n \
    \       }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val x = arr(i.toInt)\n            if (x < 100) sum += x\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val arr2 = arr.filter(x => x < 100)\n        arr2.take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2ux5l0z.scala:18)\n\tat Problem.main(tmpb2ux5l0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val x = arr(i.toInt)\n            if (x < 100) sum += x\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val arr2 = arr.filter(x => x < 100).take(k.toInt)\n\
    \        arr2.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiqt84qan.scala:18)\n\tat Problem.main(tmpiqt84qan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val n = arr.length\n        var sum = 0L\n   \
    \     for (i <- 0 until n) {\n            if (i < k) {\n                val x\
    \ = arr(i)\n                if (x < 100) sum += x\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until min(k,\
    \ arr.length)) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8u7sxhrh.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until min(k, arr.length)) {\n\e[31m\e[31m   |\e[0m            \
    \                  ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (k : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while\
    \ (i < k) {\n            val x = arr(i.toInt)\n            if (x < 100) sum +=\
    \ x\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until min(k,\
    \ arr.length).toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- arr.indices) {\n\
    \            if (i == k) return sum\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) >= 10 && arr(i) < 100) sum += arr(i)\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ixee2a1.scala:20)\n\tat Problem.main(tmp1ixee2a1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val arr2 = arr.filter(x => x < 100)\n        arr2.take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2ux5l0z.scala:18)\n\tat Problem.main(tmpb2ux5l0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val x = arr(i.toInt)\n            if (x < 100) sum += x\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) result += arr(i)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.filter(x => x < 100).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39w55pwk.scala:16)\n\tat Problem.main(tmp39w55pwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) >= 10 && arr(i) < 100) sum += arr(i)\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ixee2a1.scala:20)\n\tat Problem.main(tmp1ixee2a1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        var count = 0L\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) < 100) {\n         \
    \       sum += arr(i)\n                count += 1\n            }\n           \
    \ if (count == k) return sum\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17zczmiv.scala:26)\n\tat Problem.main(tmp17zczmiv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) result += n\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val n = arr.length\n        var sum = 0L\n   \
    \     for (i <- 0 until n) {\n            if (i == k) return sum\n           \
    \ if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val sorted = arr.sorted\n        var sum = 0L\n\
    \        for (i <- 0 until k.toInt) {\n            if (sorted(i).toString.length\
    \ <= 2) sum += sorted(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuasyu9cm.scala:22)\n\tat Problem.main(tmpuasyu9cm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val sum = arr.take(k.toInt).filter(x => x < 100).sum\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val arr2 = arr.filter(x => x < 100)\n        arr2.take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2ux5l0z.scala:18)\n\tat Problem.main(tmpb2ux5l0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val n = arr.length\n        val m = min(k, n)\n\
    \        var sum = 0L\n        for (i <- 0 until m.toInt) {\n            val x\
    \ = arr(i)\n            if (x < 100) sum += x\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.filter(x => x < 100).take(k.toInt).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpd3h_vs.scala:17)\n\tat Problem.main(tmpbpd3h_vs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val sum = arr.take(k.toInt).filter(x => x < 100).sum\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val n = arr.size\n        var sum = 0L\n     \
    \   for (i <- 0 until n) {\n            if (i < k) {\n                val x =\
    \ arr(i)\n                if (x < 100) sum += x\n            }\n        }\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val result = arr.filter(x => x < 100).take(k.toInt).sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_yggzti.scala:18)\n\tat Problem.main(tmp7_yggzti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val a = arr.take(k.toInt).filter(x => x < 100).sum\n\
    \        a\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.filter(x => x < 100).take(k.toInt).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpd3h_vs.scala:17)\n\tat Problem.main(tmpbpd3h_vs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val n = arr(i.toInt)\n            if (n < 100) sum += n\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until min(k,\
    \ arr.length)) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8u7sxhrh.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until min(k, arr.length)) {\n\e[31m\e[31m   |\e[0m            \
    \                  ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (k : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val sum = arr.take(k.toInt).filter(x => x < 100).sum\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val n = arr(i.toInt)\n            if (n < 100) sum += n\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val arr2 = arr.filter(x => x < 100)\n        arr2.take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2ux5l0z.scala:18)\n\tat Problem.main(tmpb2ux5l0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        arr.filter(x => x < 100).take(k.toInt).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpd3h_vs.scala:17)\n\tat Problem.main(tmpbpd3h_vs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) >= 10 && arr(i) < 100) sum += arr(i)\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ixee2a1.scala:20)\n\tat Problem.main(tmp1ixee2a1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                sum += arr(i)\n        \
    \    }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        val s = arr.take(k.toInt).filter(x => x < 100).sum\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until min(k,\
    \ arr.length)) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8u7sxhrh.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until min(k, arr.length)) {\n\e[31m\e[31m   |\e[0m            \
    \                  ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (k : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            val n = arr(i.toInt)\n            if (n < 100) sum += n\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) {\n                sum +=\
    \ arr(i.toInt)\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0L until k) {\n\
    \            if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        def helper(arr : List[Long], k : Long, sum : Long)\
    \ : Long = {\n            if (k == 0) sum\n            else {\n              \
    \  val x = arr.head\n                if (x < 100) helper(arr.tail, k - 1, sum\
    \ + x)\n                else helper(arr.tail, k - 1, sum)\n            }\n   \
    \     }\n        helper(arr, k, 0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
    \ 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
    \ <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long],\
    \ k : Long) : Long = {\n        var sum = 0L\n        for (i <- 0 until k.toInt)\
    \ {\n            val x = arr(i)\n            if (x < 100) sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794319
