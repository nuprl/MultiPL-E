name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // find_max([\"name\", \"\
  of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"\
  ]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
  \    def findMax(words : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val set = new HashSet[Char]\n            for (c <-\
    \ word) set += c\n            if (set.size > max) {\n                max = set.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val uniqueChars = word.toSet\n            if (uniqueChars.size >\
    \ max) {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n  \
    \          val uniqueChars = word.toSet\n            if (uniqueChars.size > max)\
    \ {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = word.toSet\n  \
    \          if (set.size > max) {\n                max = set.size\n           \
    \     maxWord = word\n            }\n        }\n        maxWord", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val set = new HashSet[Char]\n            for (c <- word) {\n           \
    \     set += c\n            }\n            if (set.size > max) {\n           \
    \     max = set.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) {\n                set += c\n            }\n            if (set.size\
    \ > max) {\n                max = set.size\n                maxWord = word\n \
    \           }\n        }\n        maxWord", "        var max = 0\n        var\
    \ result = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   result = word\n            }\n        }\n        result", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ result = \"\"\n        for (word <- words) {\n            val set = word.toSet\n\
    \            if (set.size > max) {\n                max = set.size\n         \
    \       result = word\n            }\n        }\n        result", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val unique = word.toSet.size\n            if (unique > max) {\n        \
    \        max = unique\n                maxWord = word\n            }\n       \
    \ }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n    \
    \    for (word <- words) {\n            val unique = word.toSet.size\n       \
    \     if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val uniqueChars = word.toSet\n            if (uniqueChars.size >\
    \ max) {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val uniqueChars =\
    \ word.toSet\n            if (uniqueChars.size > max) {\n                max =\
    \ uniqueChars.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord"]
stop_tokens:
- "\n    }\n"
