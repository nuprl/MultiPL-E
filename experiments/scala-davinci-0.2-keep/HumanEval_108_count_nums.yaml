name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1,\
  \ 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def countNums(arr :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ['        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).filter(_
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  "        var count = 0\n        for (i <- arr) {\n            var sum = 0\n    \
    \        var num = i\n            if (num < 0) num = -num\n            while (num\
    \ > 0) {\n                sum += num % 10\n                num /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        return count",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length']
stop_tokens:
- "\n    }\n"
