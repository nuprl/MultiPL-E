name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1,\
  \ 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    def countNums(arr :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ['        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).filter(_
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  "        var count = 0\n        for (i <- arr) {\n            var sum = 0\n    \
    \        var num = i\n            if (num < 0) num = -num\n            while (num\
    \ > 0) {\n                sum += num % 10\n                num /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        return count",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(n => n.toString.map(c => c.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            if (n < 0) -n else n\n  \
    \      }\n        arr.map(sumDigits).filter(_ > 0).size", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    val sum = arr.map(x => abs(x).toString.map(_.asDigit).sum).filter(_ > 0).length\n\
    \        sum", '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.map(x => abs(x)).map(x
    => x.toString.map(x => x.asDigit).sum).filter(x => x > 0).size', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.map(x => if (x
    < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).count(_ > 0)', "     \
    \   def sumDigits(n : Long) : Long = {\n            var sum = 0L\n           \
    \ var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.map(sumDigits).filter(_\
    \ > 0).length", "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0L\n            var m = n\n            if (m < 0) m = -m\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length",
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.count(x => x.toString.map(x => x.asDigit).sum
    > 0)', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  "        var count = 0\n        for (i <- arr) {\n            if (i > 0) {\n   \
    \             var sum = 0\n                var n = i\n                while (n\
    \ > 0) {\n                    sum += n % 10\n                    n /= 10\n   \
    \             }\n                if (sum > 0) count += 1\n            } else {\n\
    \                var sum = 0\n                var n = -i\n                while\
    \ (n > 0) {\n                    sum += n % 10\n                    n /= 10\n\
    \                }\n                if (sum > 0) count += 1\n            }\n \
    \       }\n        count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', "        def sumDigits(n : Long) : Long = {\n            var m =\
    \ n\n            var s = 0L\n            while (m != 0) {\n                s +=\
    \ m % 10\n                m /= 10\n            }\n            s\n        }\n \
    \       arr.filter(sumDigits(_) > 0).length", '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        return arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', "        var count = 0\n        for (i <- arr)\
    \ {\n            var sum = 0\n            var n = i\n            if (n < 0) n\
    \ = -n\n            while (n > 0) {\n                sum += n % 10\n         \
    \       n /= 10\n            }\n            if (sum > 0) count += 1\n        }\n\
    \        return count", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0L\n          \
    \  var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n   \
    \             sum += m % 10\n                m /= 10\n            }\n        \
    \    sum\n        }\n        arr.map(sumDigits).filter(_ > 0).length", "     \
    \   def sumDigits(n : Long) : Long = {\n            var sum = 0L\n           \
    \ var x = n\n            while (x != 0) {\n                sum += x % 10\n   \
    \             x /= 10\n            }\n            sum\n        }\n        arr.filter(x\
    \ => sumDigits(x) > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', "        def sumDigits(n :\
    \ Long) : Long = {\n            var sum = 0L\n            var m = abs(n)\n   \
    \         while (m > 0) {\n                sum += m % 10\n                m /=\
    \ 10\n            }\n            if (n < 0) sum *= -1\n            sum\n     \
    \   }\n        arr.filter(sumDigits(_) > 0).length", "        def sumDigits(x\
    \ : Long) : Long = {\n            var sum = 0L\n            var x2 = x\n     \
    \       if (x < 0) x2 = -x\n            while (x2 > 0) {\n                sum\
    \ += x2 % 10\n                x2 /= 10\n            }\n            if (x < 0)\
    \ sum = -sum\n            sum\n        }\n        arr.map(sumDigits).filter(_\
    \ != 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', "        var count = 0\n        for (i <- arr)\
    \ {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0L\n          \
    \  var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(y => y.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0L\n            var x = abs(n)\n            while (x > 0) {\n            \
    \    sum += x % 10\n                x /= 10\n            }\n            sum\n\
    \        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(y => y.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var m = n\n           \
    \ var sum = 0L\n            while (m != 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(x\
    \ => sumDigits(x) > 0).length", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', "        def sumDigits(n :\
    \ Long) : Long = {\n            var m = abs(n)\n            var sum = 0L\n   \
    \         while (m > 0) {\n                sum += m % 10\n                m /=\
    \ 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(y => y.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  "        var count = 0\n        for (i <- arr) {\n            if (i > 0) {\n   \
    \             var sum = 0\n                var j = i\n                while (j\
    \ > 0) {\n                    sum += j % 10\n                    j /= 10\n   \
    \             }\n                if (sum > 0) count += 1\n            } else {\n\
    \                var sum = 0\n                var j = i\n                while\
    \ (j < 0) {\n                    sum += j % 10\n                    j /= 10\n\
    \                }\n                if (sum < 0) count += 1\n            }\n \
    \       }\n        count", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', "        def sumDigits(n :\
    \ Long) : Long = {\n            var sum = 0L\n            var m = abs(n)\n   \
    \         while (m > 0) {\n                sum += m % 10\n                m /=\
    \ 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    var count = 0\n        for (i <- arr) {\n            if (i > 0) {\n     \
    \           var sum = 0\n                var j = i\n                while (j >\
    \ 0) {\n                    sum += j % 10\n                    j /= 10\n     \
    \           }\n                if (sum > 0) count += 1\n            } else {\n\
    \                var sum = 0\n                var j = -i\n                while\
    \ (j > 0) {\n                    sum += j % 10\n                    j /= 10\n\
    \                }\n                if (sum > 0) count += 1\n            }\n \
    \       }\n        count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).count(_
    > 0)', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.count(x => x.toString.map(_.asDigit).sum
    > 0)', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0L\n          \
    \  var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).filter(_
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', "        var count = 0\n \
    \       for (i <- arr) {\n            if (i > 0) {\n                var sum =\
    \ 0\n                var j = i\n                while (j > 0) {\n            \
    \        sum += j % 10\n                    j /= 10\n                }\n     \
    \           if (sum > 0) count += 1\n            } else {\n                var\
    \ sum = 0\n                var j = -i\n                while (j > 0) {\n     \
    \               sum += j % 10\n                    j /= 10\n                }\n\
    \                if (sum > 0) count += 1\n            }\n        }\n        count",
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', "        val sum = (arr.map(abs(_)).map(_.toString.map(_.asDigit.toLong).sum).filter(_\
    \ > 0)).length\n        sum", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).count(_
    > 0)', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0L\n          \
    \  var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0L\n          \
    \  var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length']
stop_tokens:
- "\n    }\n"
