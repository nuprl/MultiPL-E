name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // total_match([], []) \u279E []\n    //\
  \ total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    def totalMatch(lst1 : List[String],\
  \ lst2 : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1_total = lst1.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) =>\
    \ acc + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "   \
    \     if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        var lst1_total = 0\n        var lst2_total = 0\n        for\
    \ (i <- lst1) lst1_total += i.length\n        for (i <- lst2) lst2_total += i.length\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x\
    \ => x.length).sum\n        if (lst1Total < lst2Total) lst1\n        else if (lst1Total\
    \ > lst2Total) lst2\n        else lst1", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2"]
stop_tokens:
- "\n    }\n"
