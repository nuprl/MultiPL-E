name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // total_match([], []) \u279E []\n    //\
  \ total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    // total_match(['hi',\
  \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    // total_match(['hi',\
  \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    // total_match(['4'],\
  \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    def totalMatch(lst1 : List[String],\
  \ lst2 : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1_total = lst1.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) =>\
    \ acc + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "   \
    \     if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        var lst1_total = 0\n        var lst2_total = 0\n        for\
    \ (i <- lst1) lst1_total += i.length\n        for (i <- lst2) lst2_total += i.length\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x\
    \ => x.length).sum\n        if (lst1Total < lst2Total) lst1\n        else if (lst1Total\
    \ > lst2Total) lst2\n        else lst1", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "        if\
    \ (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1Total =\
    \ lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x => x.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        val lst1_sum = lst1.map(_.length).sum\n \
    \       val lst2_sum = lst2.map(_.length).sum\n        if (lst1_sum < lst2_sum)\
    \ lst1\n        else if (lst1_sum > lst2_sum) lst2\n        else lst1", "    \
    \    val total1 = lst1.foldLeft(0)((acc, str) => acc + str.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, str) => acc + str.length)\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", '        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else
    lst2', "        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i <-\
    \ lst1) lst1_sum += i.length\n        for (i <- lst2) lst2_sum += i.length\n \
    \       if (lst1_sum < lst2_sum) lst1\n        else if (lst1_sum > lst2_sum) lst2\n\
    \        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        var lst1_total = 0\n        var lst2_total\
    \ = 0\n        for (i <- lst1) {\n            lst1_total += i.length\n       \
    \ }\n        for (i <- lst2) {\n            lst2_total += i.length\n        }\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1_total = lst1.map(_.length).sum\n\
    \        val lst2_total = lst2.map(_.length).sum\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total < lst2Total) lst1 else lst2", "        var lst1Total = 0\n\
    \        var lst2Total = 0\n        for (i <- lst1) lst1Total += i.length\n  \
    \      for (i <- lst2) lst2Total += i.length\n        if (lst1Total < lst2Total)\
    \ lst1\n        else lst2", "        val lst1_len = lst1.map(_.length).sum\n \
    \       val lst2_len = lst2.map(_.length).sum\n        if (lst1_len < lst2_len)\
    \ lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1", "    \
    \    val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        val lst1_len = lst1.map(_.length).sum\n \
    \       val lst2_len = lst2.map(_.length).sum\n        if (lst1_len == lst2_len)\
    \ lst1\n        else if (lst1_len < lst2_len) lst1\n        else lst2", "    \
    \    if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1Total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1Total <= lst2Total) lst1 else lst2", "        val lst1Total =\
    \ lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n   \
    \     if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        var lst1Total = 0\n        var lst2Total\
    \ = 0\n        for (str <- lst1) {\n            lst1Total += str.length\n    \
    \    }\n        for (str <- lst2) {\n            lst2Total += str.length\n   \
    \     }\n        if (lst1Total < lst2Total) {\n            return lst1\n     \
    \   } else if (lst1Total > lst2Total) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        var total1 = 0\n\
    \        var total2 = 0\n        for (i <- lst1) total1 += i.length\n        for\
    \ (i <- lst2) total2 += i.length\n        if (total1 == total2) lst1\n       \
    \ else if (total1 < total2) lst1\n        else lst2", "        var total1 = 0\n\
    \        var total2 = 0\n        for (i <- lst1) total1 += i.length\n        for\
    \ (i <- lst2) total2 += i.length\n        if (total1 < total2) lst1\n        else\
    \ if (total1 > total2) lst2\n        else lst1", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1_len = lst1.map(_.length).sum\n \
    \       val lst2_len = lst2.map(_.length).sum\n        if (lst1_len == lst2_len)\
    \ lst1\n        else if (lst1_len < lst2_len) lst1\n        else lst2", "    \
    \    val sum1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val sum2\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (sum1 == sum2) lst1\n\
    \        else if (sum1 < sum2) lst1\n        else lst2", "        val lst1Total\
    \ = lst1.foldLeft(0)((acc, s) => acc + s.length)\n        val lst2Total = lst2.foldLeft(0)((acc,\
    \ s) => acc + s.length)\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n\
    \        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n    \
    \    else lst2", "        if (lst1.map(_.length).sum > lst2.map(_.length).sum)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1_total = lst1.foldLeft(0)((acc, x)\
    \ => acc + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (lst1_total < lst2_total) lst1\n        else if (lst1_total\
    \ > lst2_total) lst2\n        else lst1", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1_len =\
    \ lst1.map(x => x.length).sum\n        val lst2_len = lst2.map(x => x.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total == lst2Total) lst1\n        else if (lst1Total\
    \ < lst2Total) lst1\n        else lst2", "        if (lst1.map(_.length).sum ==\
    \ lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", '        // Write your code here', "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1Total =\
    \ lst1.foldLeft(0)((a, b) => a + b.length)\n        val lst2Total = lst2.foldLeft(0)((a,\
    \ b) => a + b.length)\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        var total1 = 0\n        var total2 = 0\n\
    \        for (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 +=\
    \ i.length\n        if (total1 == total2) lst1\n        else if (total1 < total2)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total == lst2Total)\
    \ lst1\n        else if (lst1Total < lst2Total) lst1\n        else lst2", "  \
    \      val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x\
    \ => x.length).sum\n        if (lst1Total < lst2Total) lst1\n        else if (lst1Total\
    \ > lst2Total) lst2\n        else lst1", "        if (lst1.map(_.length).sum <\
    \ lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        var total1 = 0\n        var total2 = 0\n\
    \        for (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 +=\
    \ i.length\n        if (total1 < total2) lst1\n        else if (total1 > total2)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.map(x => x.length).sum\n\
    \        val lst2Total = lst2.map(x => x.length).sum\n        if (lst1Total <\
    \ lst2Total) lst1\n        else if (lst1Total > lst2Total) lst2\n        else\
    \ lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        var total1 = 0\n        var total2 = 0\n       \
    \ for (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 += i.length\n\
    \        if (total1 == total2) lst1\n        else if (total1 < total2) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "        val\
    \ lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        var lst1_total = 0\n        var lst2_total\
    \ = 0\n        for (i <- lst1) {\n            lst1_total += i.length\n       \
    \ }\n        for (i <- lst2) {\n            lst2_total += i.length\n        }\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1_len = lst1.map(x => x.length).sum\n\
    \        val lst2_len = lst2.map(x => x.length).sum\n        if (lst1_len < lst2_len)\
    \ lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1", "    \
    \    if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n    \
    \    val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        var lst1_total\
    \ = 0\n        var lst2_total = 0\n        for (i <- lst1) {\n            lst1_total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_total +=\
    \ i.length\n        }\n        if (lst1_total < lst2_total) lst1\n        else\
    \ if (lst1_total > lst2_total) lst2\n        else lst1", "        val lst1Total\
    \ = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x => x.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1_total = lst1.map(x => x.length).sum\n        val lst2_total =\
    \ lst2.map(x => x.length).sum\n        if (lst1_total < lst2_total) lst1\n   \
    \     else if (lst1_total > lst2_total) lst2\n        else lst1", "        val\
    \ lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2", "        var total1 = 0\n        var total2 = 0\n\
    \        for (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 +=\
    \ i.length\n        if (total1 < total2) lst1\n        else if (total1 > total2)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", '        if (lst1.map(_.length).sum < lst2.map(_.length).sum)
    lst1 else lst2', "        var lst1_total = 0\n        var lst2_total = 0\n   \
    \     for (i <- lst1) lst1_total += i.length\n        for (i <- lst2) lst2_total\
    \ += i.length\n        if (lst1_total < lst2_total) lst1\n        else if (lst1_total\
    \ > lst2_total) lst2\n        else lst1", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1_len =\
    \ lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n    \
    \    if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len) lst1\n\
    \        else lst2", "        val lst1CharCount = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val lst2CharCount = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (lst1CharCount < lst2CharCount) lst1\n        else if\
    \ (lst1CharCount > lst2CharCount) lst2\n        else lst1", "        val lst1Total\
    \ = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n \
    \       if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        val lst1_total = lst1.map(_.length).sum\n\
    \        val lst2_total = lst2.map(_.length).sum\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n\
    \        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n    \
    \    else lst2", "        var lst1Total = 0\n        var lst2Total = 0\n     \
    \   for (i <- lst1) {\n            lst1Total += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2Total += i.length\n        }\n        if (lst1Total\
    \ < lst2Total) {\n            return lst1\n        } else if (lst1Total > lst2Total)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }", "        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      val lst1_total = lst1.map(_.length).sum\n        val lst2_total = lst2.map(_.length).sum\n\
    \        if (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total)\
    \ lst2\n        else lst1", "        val lst1_len = lst1.map(_.length).sum\n \
    \       val lst2_len = lst2.map(_.length).sum\n        if (lst1_len < lst2_len)\
    \ lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1", "    \
    \    val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1Total\
    \ <= lst2Total) lst1 else lst2", "        var lst1Total = 0\n        var lst2Total\
    \ = 0\n        for (i <- lst1) {\n            lst1Total += i.length\n        }\n\
    \        for (i <- lst2) {\n            lst2Total += i.length\n        }\n   \
    \     if (lst1Total < lst2Total) {\n            return lst1\n        } else if\
    \ (lst1Total > lst2Total) {\n            return lst2\n        } else {\n     \
    \       return lst1\n        }", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total == lst2Total)\
    \ lst1\n        else if (lst1Total < lst2Total) lst1\n        else lst2", "  \
    \      var total1 = 0\n        for (i <- lst1) total1 += i.length\n        var\
    \ total2 = 0\n        for (i <- lst2) total2 += i.length\n        if (total1 <\
    \ total2) lst1\n        else if (total1 > total2) lst2\n        else lst1", " \
    \       val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1_total\
    \ < lst2_total) lst1\n        else if (lst1_total > lst2_total) lst2\n       \
    \ else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n\
    \        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n    \
    \    else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "        if\
    \ (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n    \
    \    val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ > lst2.map(_.length).sum) lst2\n        else lst1", "        var lst1Total =\
    \ 0\n        var lst2Total = 0\n        for (i <- lst1) {\n            lst1Total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2Total +=\
    \ i.length\n        }\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       val lst1_len = lst1.map(_.length).sum\n        val lst2_len = lst2.map(_.length).sum\n\
    \        if (lst1_len == lst2_len) lst1\n        else if (lst1_len < lst2_len)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) =>\
    \ acc + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "   \
    \     val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n     \
    \   val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n       \
    \ if (lst1Total < lst2Total) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ > lst2.map(_.length).sum) lst2\n        else lst1", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1CharCount\
    \ = lst1.foldLeft(0)((acc, str) => acc + str.length)\n        val lst2CharCount\
    \ = lst2.foldLeft(0)((acc, str) => acc + str.length)\n        if (lst1CharCount\
    \ < lst2CharCount) lst1\n        else if (lst1CharCount > lst2CharCount) lst2\n\
    \        else lst1", "        // Write your code here\n        var lst1_len =\
    \ 0\n        var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_len += i.length\n\
    \        }\n        if (lst1_len == lst2_len) {\n            return lst1\n   \
    \     } else if (lst1_len < lst2_len) {\n            return lst1\n        } else\
    \ {\n            return lst2\n        }", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else if\
    \ (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n  \
    \      if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val lst2Total = lst2.foldLeft(0)((total,\
    \ str) => total + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2",
  "        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n   \
    \         total1 += i.length\n        }\n        for (i <- lst2) {\n         \
    \   total2 += i.length\n        }\n        if (total1 < total2) lst1\n       \
    \ else if (total1 > total2) lst2\n        else lst1", "        var total1 = 0\n\
    \        var total2 = 0\n        for (i <- lst1) total1 += i.length\n        for\
    \ (i <- lst2) total2 += i.length\n        if (total1 < total2) lst1\n        else\
    \ if (total1 > total2) lst2\n        else lst1", "        val lst1_len = lst1.map(_.length).sum\n\
    \        val lst2_len = lst2.map(_.length).sum\n        if (lst1_len < lst2_len)\
    \ lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1", "    \
    \    if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (lst1Total < lst2Total) lst1 else lst2", "        var lst1Total =\
    \ 0\n        var lst2Total = 0\n        for (i <- lst1) {\n            lst1Total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2Total +=\
    \ i.length\n        }\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       val lst1Total = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (lst1Total == lst2Total) lst1\n        else if (lst1Total < lst2Total)\
    \ lst1\n        else lst2", "        val lst1_len = lst1.map(_.length).sum\n \
    \       val lst2_len = lst2.map(_.length).sum\n        if (lst1_len == lst2_len)\
    \ lst1\n        else if (lst1_len < lst2_len) lst1\n        else lst2", "    \
    \    if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val sum1 = lst1.map(_.length).sum\n        val sum2 = lst2.map(_.length).sum\n\
    \        if (sum1 == sum2) lst1\n        else if (sum1 < sum2) lst1\n        else\
    \ lst2", "        var lst1_total = 0\n        var lst2_total = 0\n        for\
    \ (i <- lst1) {\n            lst1_total += i.length\n        }\n        for (i\
    \ <- lst2) {\n            lst2_total += i.length\n        }\n        if (lst1_total\
    \ < lst2_total) lst1\n        else if (lst1_total > lst2_total) lst2\n       \
    \ else lst1", "        val total1 = lst1.foldLeft(0)((a, b) => a + b.length)\n\
    \        val total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1_len = lst1.map(_.length).sum\n        val lst2_len\
    \ = lst2.map(_.length).sum\n        if (lst1_len < lst2_len) lst1\n        else\
    \ if (lst1_len > lst2_len) lst2\n        else lst1", "        val sum1 = lst1.map(_.length).sum\n\
    \        val sum2 = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else\
    \ if (sum1 > sum2) lst2 else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1_total = lst1.map(x => x.length).sum\n \
    \       val lst2_total = lst2.map(x => x.length).sum\n        if (lst1_total <\
    \ lst2_total) lst1\n        else if (lst1_total > lst2_total) lst2\n        else\
    \ lst1", "        val lst1Total = lst1.map(_.length).sum\n        val lst2Total\
    \ = lst2.map(_.length).sum\n        if (lst1Total < lst2Total) lst1\n        else\
    \ if (lst1Total > lst2Total) lst2\n        else lst1", "        val sum1 = lst1.map(x\
    \ => x.length).sum\n        val sum2 = lst2.map(x => x.length).sum\n        if\
    \ (sum1 < sum2) lst1\n        else if (sum1 > sum2) lst2\n        else lst1",
  '        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2', '        if
    (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2', "        if\
    \ (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val lst1Total =\
    \ lst1.foldLeft(0)((acc, str) => acc + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2",
  "        val lst1Chars = lst1.map(x => x.length).sum\n        val lst2Chars = lst2.map(x\
    \ => x.length).sum\n        if (lst1Chars < lst2Chars) lst1\n        else if (lst1Chars\
    \ > lst2Chars) lst2\n        else lst1", "        val lst1CharCount = lst1.map(_.length).sum\n\
    \        val lst2CharCount = lst2.map(_.length).sum\n        if (lst1CharCount\
    \ < lst2CharCount) lst1\n        else if (lst1CharCount > lst2CharCount) lst2\n\
    \        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.map(_.length).sum\n       \
    \ val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total) lst1\n\
    \        else if (lst1Total > lst2Total) lst2\n        else lst1", "        if\
    \ (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1Total = lst1.map(_.length).sum\n        val lst2Total = lst2.map(_.length).sum\n\
    \        if (lst1Total < lst2Total) lst1\n        else if (lst1Total > lst2Total)\
    \ lst2\n        else lst1", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "        val\
    \ lst1_len = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2_len\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1_len < lst2_len)\
    \ lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1", "    \
    \    if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1_total = lst1.map(x => x.length).sum\n        val lst2_total =\
    \ lst2.map(x => x.length).sum\n        if (lst1_total < lst2_total) lst1\n   \
    \     else if (lst1_total > lst2_total) lst2\n        else lst1", "        var\
    \ total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n            total1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) lst1\n        else if (total1 > total2)\
    \ lst2\n        else lst1", "        val sum1 = lst1.foldLeft(0)((a, b) => a +\
    \ b.length)\n        val sum2 = lst2.foldLeft(0)((a, b) => a + b.length)\n   \
    \     if (sum1 == sum2) lst1\n        else if (sum1 < sum2) lst1\n        else\
    \ lst2", "        val lst1Total = lst1.map(_.length).sum\n        val lst2Total\
    \ = lst2.map(_.length).sum\n        if (lst1Total == lst2Total) lst1\n       \
    \ else if (lst1Total < lst2Total) lst1\n        else lst2", "        val lst1_total\
    \ = lst1.foldLeft(0)((total, str) => total + str.length)\n        val lst2_total\
    \ = lst2.foldLeft(0)((total, str) => total + str.length)\n        if (lst1_total\
    \ < lst2_total) lst1\n        else if (lst1_total > lst2_total) lst2\n       \
    \ else lst1", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ if (sum1 == sum2) lst1\n        else if (sum1 < sum2) lst1\n        else lst2",
  "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc + str.length)\n    \
    \    val lst2Total = lst2.foldLeft(0)((acc, str) => acc + str.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        val lst1Total = lst1.map(_.length).sum\n\
    \        val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1\n        else if (lst1Total > lst2Total) lst2\n        else lst1", "  \
    \      var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ lst1\n        else if (lst1_total > lst2_total) lst2\n        else lst1", " \
    \       var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) sum1 += i.length\n\
    \        for (i <- lst2) sum2 += i.length\n        if (sum1 == sum2) lst1\n  \
    \      else if (sum1 < sum2) lst1\n        else lst2", "        val len1 = lst1.foldLeft(0)((acc,\
    \ s) => acc + s.length)\n        val len2 = lst2.foldLeft(0)((acc, s) => acc +\
    \ s.length)\n        if (len1 < len2) lst1 else if (len1 > len2) lst2 else lst1",
  "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2"]
stop_tokens:
- "\n    }\n"
