name: HumanEval_1_separate_paren_groups
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n    // separate those group into separate strings\
  \ and return the list of those.\n    // Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n    // Ignore any\
  \ spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) (( )(\
  \ ))')\n    // ['()', '(())', '(()())']\n    def separateParenGroups(paren_string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
  (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
  ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
  )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
  (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
  ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
  \    }\n\n}\n"
completions: ["        var result = List[String]()\n        var current_group = \"\
    \"\n        var open_count = 0\n        for (c <- paren_string) {\n          \
    \  if (c == '(') {\n                open_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_count -= 1\n\
    \                current_group += c\n                if (open_count == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current += c\n            } else if (c ==\
    \ ')') {\n                open -= 1\n                current += c\n          \
    \      if (open == 0) {\n                    result = current :: result\n    \
    \                current = \"\"\n                }\n            }\n        }\n\
    \        result.reverse", "        var result = List[String]()\n        var stack\
    \ = Stack[Char]()\n        var current_group = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == ' ') {\n                // ignore\n            } else\
    \ if (c == '(') {\n                stack.push(c)\n                current_group\
    \ += c\n            } else if (c == ')') {\n                if (stack.isEmpty)\
    \ {\n                    throw new Exception(\"Invalid paren string\")\n     \
    \           }\n                stack.pop\n                current_group += c\n\
    \                if (stack.isEmpty) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else {\n                throw new Exception(\"Invalid paren string\"\
    )\n            }\n        }\n        if (!stack.isEmpty) {\n            throw\
    \ new Exception(\"Invalid paren string\")\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = \"\"\n        var stack\
    \ = Stack[Char]()\n        for (c <- paren_string) {\n            if (c == ' ')\
    \ {\n                // Ignore spaces\n            } else if (c == '(') {\n  \
    \              stack.push(c)\n                current += c\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty) {\n                    throw\
    \ new Exception(\"Unbalanced parentheses\")\n                }\n             \
    \   stack.pop\n                current += c\n                if (stack.isEmpty)\
    \ {\n                    result = current :: result\n                    current\
    \ = \"\"\n                }\n            } else {\n                throw new Exception(\"\
    Invalid character in parentheses string\")\n            }\n        }\n       \
    \ if (!stack.isEmpty) {\n            throw new Exception(\"Unbalanced parentheses\"\
    )\n        }\n        result.reverse", "        var stack = new Stack[Char]\n\
    \        var result = new ListBuffer[String]\n        var current_string = new\
    \ StringBuilder\n        for (c <- paren_string) {\n            if (c == ' ')\
    \ {\n                // Ignore spaces\n            } else if (c == '(') {\n  \
    \              stack.push(c)\n                current_string.append(c)\n     \
    \       } else if (c == ')') {\n                if (stack.isEmpty) {\n       \
    \             throw new Exception(\"Unbalanced parentheses\")\n              \
    \  }\n                stack.pop\n                current_string.append(c)\n  \
    \              if (stack.isEmpty) {\n                    result += current_string.toString\n\
    \                    current_string = new StringBuilder\n                }\n \
    \           } else {\n                throw new Exception(\"Invalid character\"\
    )\n            }\n        }\n        if (!stack.isEmpty) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        result.toList",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid input\")\n            }\n        }\n      \
    \  result.reverse", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current.append(c)\n            } else if (c == ')') {\n                count\
    \ -= 1\n                current.append(c)\n            }\n            if (count\
    \ == 0) {\n                result = current.toString :: result\n             \
    \   current = new StringBuilder()\n            }\n        }\n        result",
  "        var result = List[String]()\n        var stack = Stack[Char]()\n      \
    \  var current_group = \"\"\n        for (c <- paren_string) {\n            if\
    \ (c == ' ') {\n                // Ignore spaces\n            } else if (c ==\
    \ '(') {\n                stack.push(c)\n                current_group += c\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       }\n                stack.pop\n                current_group += c\n   \
    \             if (stack.isEmpty) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else {\n                throw new Exception(\"Invalid character in\
    \ parentheses string\")\n            }\n        }\n        if (!stack.isEmpty)\
    \ {\n            throw new Exception(\"Unbalanced parentheses\")\n        }\n\
    \        result.reverse", "        var result = List[String]()\n        var stack\
    \ = Stack[Char]()\n        var current_string = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            \
    \    current_string += c\n            } else if (c == ')') {\n               \
    \ stack.pop\n                current_string += c\n                if (stack.isEmpty)\
    \ {\n                    result = current_string :: result\n                 \
    \   current_string = \"\"\n                }\n            }\n        }\n     \
    \   result", "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var depth = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                depth += 1\n                current.append(c)\n    \
    \        } else if (c == ')') {\n                depth -= 1\n                current.append(c)\n\
    \                if (depth == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        var result = List[String]()\n \
    \       var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) throw new Exception(\"Unbalanced paren string\")\n        result.reverse",
  "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_groups = ListBuffer[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups += current_group\n               \
    \     current_group = \"\"\n                }\n            }\n        }\n    \
    \    paren_groups.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        return paren_groups", "        var result = List[String]()\n\
    \        var paren_stack = Stack[Char]()\n        var current_group = \"\"\n \
    \       for (c <- paren_string) {\n            if (c == '(') {\n             \
    \   paren_stack.push(c)\n                current_group += c\n            } else\
    \ if (c == ')') {\n                paren_stack.pop\n                current_group\
    \ += c\n                if (paren_stack.isEmpty) {\n                    result\
    \ = current_group :: result\n                    current_group = \"\"\n      \
    \          }\n            }\n        }\n        result", "        var result =\
    \ new ListBuffer[String]\n        var current = new StringBuilder\n        var\
    \ open = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n \
    \               open += 1\n                current += c\n            } else if\
    \ (c == ')') {\n                open -= 1\n                current += c\n    \
    \            if (open == 0) {\n                    result += current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    } else if (c != ' ') {\n                current += c\n            }\n   \
    \     }\n        result.toList", "        var result = List[String]()\n      \
    \  var current = \"\"\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current += c\n            } else if (c == ')') {\n                count -= 1\n\
    \                current += c\n            }\n            if (count == 0 && current\
    \ != \"\") {\n                result = current :: result\n                current\
    \ = \"\"\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \            }\n            current_group += c\n            if (paren_count ==\
    \ 0) {\n                paren_groups = current_group :: paren_groups\n       \
    \         current_group = \"\"\n            }\n        }\n        paren_groups.reverse",
  "        val paren_groups = new ListBuffer[String]\n        var current_group =\
    \ new StringBuilder\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_string_list_length = paren_string_list.length\n        val\
    \ paren_string_list_length_minus_one = paren_string_list_length - 1\n        var\
    \ paren_string_list_index = 0\n        var paren_string_list_index_minus_one =\
    \ 0\n        var paren_string_list_index_plus_one = 0\n        var paren_string_list_index_plus_two\
    \ = 0\n        var paren_string_list_index_plus_three = 0\n        var paren_string_list_index_plus_four\
    \ = 0\n        var paren_string_list_index_plus_five = 0\n        var paren_string_list_index_plus_six\
    \ = 0\n        var paren_string_list_index_plus_seven = 0\n        var paren_string_list_index_plus_eight\
    \ = 0\n        var paren_string_list_index_plus_nine = 0\n        var paren_string_list_index_plus_ten\
    \ = 0\n        var paren_string_list_index_plus_eleven = 0\n        var paren_string_list_index_plus_twelve\
    \ = 0\n        var paren_string_list_index_plus_thirteen = 0\n        var paren_string_list_index_plus_fourteen\
    \ = 0\n        var paren_string_list_index_plus_fifteen = 0\n        var paren_string_list_index_plus_sixteen\
    \ = 0\n        var paren_string_list_index_plus_seventeen = 0\n        var paren_string_list_index_plus_eighteen\
    \ = 0\n        var paren_string_list_index_plus_nineteen = 0\n        var paren_string_list_index_plus_twenty\
    \ = 0\n        var paren_string_list_index_plus_twenty_one = 0\n        var paren_string_list_index_plus_twenty_two\
    \ =", "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\"\
    )\n        val paren_string_list = paren_string_no_spaces.toList\n        val\
    \ paren_string_list_length = paren_string_list.length\n        val paren_string_list_length_minus_one\
    \ = paren_string_list_length - 1\n        val paren_string_list_length_minus_two\
    \ = paren_string_list_length - 2\n        var paren_string_list_index = 0\n  \
    \      var paren_string_list_index_plus_one = 1\n        var paren_string_list_index_plus_two\
    \ = 2\n        var paren_string_list_index_minus_one = -1\n        var paren_string_list_index_minus_two\
    \ = -2\n        var paren_string_list_index_minus_three = -3\n        var paren_string_list_index_minus_four\
    \ = -4\n        var paren_string_list_index_minus_five = -5\n        var paren_string_list_index_minus_six\
    \ = -6\n        var paren_string_list_index_minus_seven = -7\n        var paren_string_list_index_minus_eight\
    \ = -8\n        var paren_string_list_index_minus_nine = -9\n        var paren_string_list_index_minus_ten\
    \ = -10\n        var paren_string_list_index_minus_eleven = -11\n        var paren_string_list_index_minus_twelve\
    \ = -12\n        var paren_string_list_index_minus_thirteen = -13\n        var\
    \ paren_string_list_index_minus_fourteen = -14\n        var paren_string_list_index_minus_fifteen\
    \ = -15\n        var paren_string_list_index_minus_sixteen = -16\n        var\
    \ paren_string_list_index_minus_seventeen = -17\n        var paren_string_list_index_minus_eighteen\
    \ = -18\n        var paren_string_list_index_minus_", "        var result = List[String]()\n\
    \        var current_group = new StringBuilder\n        var open_parens = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open_parens += 1\n                current_group.append(c)\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group.append(c)\n\
    \                if (open_parens == 0) {\n                    result = result\
    \ :+ current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var paren_count = 0\n        for (i <-\
    \ 0 until paren_string_no_spaces_length) {\n            if (paren_string_no_spaces(i)\
    \ == '(') {\n                paren_count += 1\n                paren_group +=\
    \ \"(\"\n            } else {\n                paren_count -= 1\n            \
    \    paren_group += \")\"\n            }\n            if (paren_count == 0) {\n\
    \                paren_groups = paren_group :: paren_groups\n                paren_group\
    \ = \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current_group = \"\"\n        var current_depth\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          current_depth += 1\n                current_group += c\n          \
    \  } else if (c == ')') {\n                current_depth -= 1\n              \
    \  current_group += c\n                if (current_depth == 0) {\n           \
    \         result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        result", "    \
    \    val paren_groups = ListBuffer[String]()\n        var current_group = \"\"\
    \n        var open_parens = 0\n        for (c <- paren_string) {\n           \
    \ if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        paren_groups.toList",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups = current_group :: paren_groups\n          \
    \          current_group = \"\"\n                }\n            }\n        }\n\
    \        paren_groups", "        var result = List[String]()\n        var cur\
    \ = \"\"\n        var stack = Stack[Char]()\n        for (c <- paren_string) {\n\
    \            if (c == ' ') {\n                if (stack.isEmpty) {\n         \
    \           result = result :+ cur\n                    cur = \"\"\n         \
    \       }\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                cur += c\n            } else if (c == ')') {\n              \
    \  stack.pop\n                cur += c\n            }\n        }\n        if (cur\
    \ != \"\") result = result :+ cur\n        return result", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += \"(\"\n            } else if (c == ')') {\n\
    \                open -= 1\n                current += \")\"\n            }\n\
    \            if (open == 0 && current != \"\") {\n                result = current\
    \ :: result\n                current = \"\"\n            }\n        }\n      \
    \  result.reverse", "        var result = List[String]()\n        var current\
    \ = new StringBuilder\n        var open = 0\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                open += 1\n                current.append(c)\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   current.append(c)\n                if (open == 0) {\n                    result\
    \ = result :+ current.toString\n                    current = new StringBuilder\n\
    \                }\n            }\n        }\n        result", "        val paren_stack\
    \ = new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n     \
    \   var current_paren_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \          current_paren_group.append(c)\n            } else if (c == ')') {\n\
    \                if (paren_stack.isEmpty) {\n                    throw new Exception(\"\
    Unbalanced parentheses\")\n                }\n                paren_stack.pop\n\
    \                current_paren_group.append(c)\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_paren_group.toString\n      \
    \              current_paren_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        if (!paren_stack.isEmpty) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        paren_groups.toList",
  "        var groups = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \            } else if (c == ' ') {\n                if (open == 0) {\n      \
    \              groups = groups :+ current.toString\n                    current\
    \ = new StringBuilder()\n                }\n            }\n        }\n       \
    \ groups = groups :+ current.toString\n        return groups", "        var result\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            }\n        }\n        result", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var paren_stack\
    \ = Stack[Char]()\n        for (c <- paren_string) {\n            if (c == ' ')\
    \ {\n                // Ignore spaces\n            } else if (c == '(') {\n  \
    \              paren_stack.push(c)\n                current_group += c\n     \
    \       } else if (c == ')') {\n                if (paren_stack.isEmpty) {\n \
    \                   throw new Exception(\"Unbalanced parentheses\")\n        \
    \        }\n                paren_stack.pop\n                current_group +=\
    \ c\n                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character in parentheses string\")\n            }\n        }\n       \
    \ if (!paren_stack.isEmpty) {\n            throw new Exception(\"Unbalanced parentheses\"\
    )\n        }\n        return paren_groups", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var current_open_parens = 0\n     \
    \   for (c <- paren_string) {\n            if (c == '(') {\n                current_open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                current_open_parens -= 1\n                current_group += c\n\
    \                if (current_open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            }\n        }\n        return groups", "        val paren_groups\
    \ = new ListBuffer[String]\n        var current_group = new StringBuilder\n  \
    \      var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group.toString\n                \
    \    current_group = new StringBuilder\n                }\n            }\n   \
    \     }\n        paren_groups.toList", "        val stack = new Stack[Char]\n\
    \        val groups = new ListBuffer[String]\n        var group = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // ignore\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                group += c\n            } else if (c == ')') {\n            \
    \    if (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\")\n                }\n                stack.pop\n             \
    \   group += c\n                if (stack.isEmpty) {\n                    groups\
    \ += group.toString\n                    group = new StringBuilder\n         \
    \       }\n            } else {\n                throw new Exception(\"Invalid\
    \ character\")\n            }\n        }\n        if (!stack.isEmpty) {\n    \
    \        throw new Exception(\"Unbalanced parentheses\")\n        }\n        groups.toList",
  "        var stack = new Stack[Char]\n        var result = new ListBuffer[String]\n\
    \        var current = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == ' ') {\n                // Ignore spaces\n            }\
    \ else if (c == '(') {\n                stack.push(c)\n                current.append(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       }\n                stack.pop\n                current.append(c)\n    \
    \            if (stack.isEmpty) {\n                    result += current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    } else {\n                throw new Exception(\"Invalid character\")\n  \
    \          }\n        }\n        if (!stack.isEmpty) {\n            throw new\
    \ Exception(\"Unbalanced parentheses\")\n        }\n        result.toList", " \
    \       var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var count = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                count += 1\n                current.append(c)\n    \
    \        } else if (c == ')') {\n                count -= 1\n                current.append(c)\n\
    \            }\n            if (count == 0) {\n                result = current.toString\
    \ :: result\n                current = new StringBuilder()\n            }\n  \
    \      }\n        result", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_count = 0\n        for (c <- paren_string) {\n    \
    \        if (c == '(') {\n                open_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_count -= 1\n\
    \                current_group += c\n                if (open_count == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = new StringBuilder\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    }\n        }\n        result", "        var result = List[String]()\n   \
    \     var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var result\
    \ = List[String]()\n        var current_group = \"\"\n        var current_depth\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          current_depth += 1\n                current_group += c\n          \
    \  } else if (c == ')') {\n                current_depth -= 1\n              \
    \  current_group += c\n                if (current_depth == 0) {\n           \
    \         result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        return result",
  "        var groups = List[String]()\n        var curr_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                curr_group += c\n     \
    \       } else if (c == ')') {\n                open_parens -= 1\n           \
    \     curr_group += c\n                if (open_parens == 0) {\n             \
    \       groups = groups :+ curr_group\n                    curr_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                curr_group\
    \ += c\n            }\n        }\n        groups", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val paren_groups\
    \ = ListBuffer[String]()\n        var current_group = new StringBuilder()\n  \
    \      var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group.toString\n                \
    \    current_group = new StringBuilder()\n                }\n            }\n \
    \       }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val parens\
    \ = paren_string.filter(_ != ' ')\n        var result = List[String]()\n     \
    \   var current = new StringBuilder()\n        var open = 0\n        for (c <-\
    \ parens) {\n            if (c == '(') {\n                open += 1\n        \
    \        current += c\n            } else {\n                open -= 1\n     \
    \           current += c\n                if (open == 0) {\n                 \
    \   result = current.toString :: result\n                    current = new StringBuilder()\n\
    \                }\n            }\n        }\n        result.reverse", "     \
    \   var result = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character \" + c)\n            }\n        }\n\
    \        if (open_parens != 0) {\n            throw new Exception(\"Unbalanced\
    \ parentheses\")\n        }\n        result.reverse", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current = new StringBuilder()\n        var open = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open += 1\n\
    \                current.append(c)\n            } else if (c == ')') {\n     \
    \           open -= 1\n                current.append(c)\n                if (open\
    \ == 0) {\n                    result = result :+ current.toString\n         \
    \           current = new StringBuilder()\n                }\n            }\n\
    \        }\n        result", "        var groups = List[String]()\n        var\
    \ current_group = new StringBuilder()\n        var open_parens = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group.append(c)\n            } else if (c == ')')\
    \ {\n                open_parens -= 1\n                current_group.append(c)\n\
    \                if (open_parens == 0) {\n                    groups = groups\
    \ :+ current_group.toString\n                    current_group = new StringBuilder()\n\
    \                }\n            }\n        }\n        groups", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var stack = Stack[Char]()\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // Ignore spaces\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                current += c\n            } else if (c == ')') {\n          \
    \      if (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\")\n                }\n                stack.pop\n             \
    \   current += c\n                if (stack.isEmpty) {\n                    result\
    \ = current :: result\n                    current = \"\"\n                }\n\
    \            } else {\n                throw new Exception(\"Invalid character\"\
    )\n            }\n        }\n        if (!stack.isEmpty) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        result.reverse",
  "        var result = List[String]()\n        var stack = Stack[Char]()\n      \
    \  var current_group = \"\"\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                stack.push(c)\n                current_group +=\
    \ c\n            } else if (c == ')') {\n                if (stack.isEmpty) return\
    \ List[String]()\n                stack.pop\n                current_group +=\
    \ c\n                if (stack.isEmpty) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         }\n        }\n        if (!stack.isEmpty) return List[String]()\n  \
    \      result.reverse", "        var result = List[String]()\n        var paren_stack\
    \ = Stack[Char]()\n        var current_string = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \          current_string += c\n            } else if (c == ')') {\n         \
    \       paren_stack.pop\n                current_string += c\n               \
    \ if (paren_stack.isEmpty) {\n                    result = current_string :: result\n\
    \                    current_string = \"\"\n                }\n            }\n\
    \        }\n        result", "        var paren_groups = List[String]()\n    \
    \    var current_group = \"\"\n        var paren_stack = Stack[Char]()\n     \
    \   for (c <- paren_string) {\n            if (c == '(') {\n                paren_stack.push(c)\n\
    \                current_group += c\n            } else if (c == ')') {\n    \
    \            paren_stack.pop\n                current_group += c\n           \
    \     if (paren_stack.isEmpty) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        val paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_index\
    \ = 0\n        var paren_string_no_spaces_list_index_last = 0\n        var paren_string_no_spaces_list_index_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last = 0\n    \
    \    var paren_string_no_spaces_list_index_last_last_last_last = 0\n        var\
    \ paren_string_no_spaces_list_index_last_last_last_last_last = 0\n        var\
    \ paren_string_no_spaces_list_index_last_last_last_last_last_last = 0\n      \
    \  var paren_string_no_spaces_list_index_last_last_last_last_last_last_last =\
    \ 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last_last_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last_last_last_last_last\
    \ = 0\n        var paren_string_no_spaces_list_index_last_last_last_last_last_last_last_last_last_last_last_last_",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_groups = new ListBuffer[String]\n        var current_group = new\
    \ StringBuilder\n        var open_parens = 0\n        for (paren <- paren_string_no_spaces)\
    \ {\n            if (paren == '(') {\n                open_parens += 1\n     \
    \           current_group.append(paren)\n            } else if (paren == ')')\
    \ {\n                open_parens -= 1\n                current_group.append(paren)\n\
    \                if (open_parens == 0) {\n                    paren_groups +=\
    \ current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            }\n        }\n        paren_groups.toList", " \
    \       // TODO: Implement\n        return List()", "        val paren_stack =\
    \ new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n       \
    \ var current_group = new StringBuilder\n        for (ch <- paren_string) {\n\
    \            if (ch == '(') {\n                paren_stack.push(ch)\n        \
    \        current_group.append(ch)\n            } else if (ch == ')') {\n     \
    \           if (paren_stack.isEmpty) {\n                    throw new IllegalArgumentException(\"\
    Unbalanced parentheses\")\n                }\n                paren_stack.pop\n\
    \                current_group.append(ch)\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString\n            \
    \        current_group = new StringBuilder\n                }\n            }\n\
    \        }\n        if (!paren_stack.isEmpty) {\n            throw new IllegalArgumentException(\"\
    Unbalanced parentheses\")\n        }\n        paren_groups.toList", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_groups\
    \ = ListBuffer[String]()\n        var paren_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                paren_group += c\n    \
    \        } else if (c == ')') {\n                open_parens -= 1\n          \
    \      paren_group += c\n                if (open_parens == 0) {\n           \
    \         paren_groups += paren_group\n                    paren_group = \"\"\n\
    \                }\n            }\n        }\n        paren_groups.toList", " \
    \       val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n  \
    \      val paren_string_no_spaces_length = paren_string_no_spaces.length\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_index_stack\
    \ = new Stack[Int]\n        var paren_string_no_spaces_list_index_stack_top =\
    \ -1\n        var paren_string_no_spaces_list_index_stack_top_value = ' '\n  \
    \      var paren_string_no_spaces_list_index_stack_top_value_index = -1\n    \
    \    var paren_string_no_spaces_list_index_stack_top_value_index_stack = new Stack[Int]\n\
    \        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value_index\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value_index_stack\
    \ = new Stack[Int]\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value_index_stack_top\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value_index_stack_top_value\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index_stack_top_value_index_stack_top_value_index\
    \ = -1\n        var paren_string_no_spaces_list_index_stack_top_value_index",
  "        var result = List[String]()\n        var current = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current += c\n            } else if (c ==\
    \ ')') {\n                open -= 1\n                current += c\n          \
    \      if (open == 0) {\n                    result = current :: result\n    \
    \                current = \"\"\n                }\n            }\n        }\n\
    \        result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses\")\n     \
    \   }\n        result.reverse", "        var result = List[String]()\n       \
    \ var current = new StringBuilder()\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current.append(c)\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   current.append(c)\n                if (open == 0) {\n                    result\
    \ = result :+ current.toString\n                    current = new StringBuilder()\n\
    \                }\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Char]\n        var result = new ListBuffer[String]\n        var\
    \ current = new StringBuilder\n        for (c <- paren_string) {\n           \
    \ if (c == '(') {\n                stack.push(c)\n            } else if (c ==\
    \ ')') {\n                if (stack.isEmpty) {\n                    throw new\
    \ Exception(\"Invalid input\")\n                }\n                stack.pop\n\
    \                if (stack.isEmpty) {\n                    result += current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    } else if (c != ' ') {\n                current += c\n            }\n   \
    \     }\n        if (!stack.isEmpty) {\n            throw new Exception(\"Invalid\
    \ input\")\n        }\n        result.toList", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                throw new Exception(\"Invalid character in\
    \ input string\")\n            }\n        }\n        if (open_parens != 0) {\n\
    \            throw new Exception(\"Invalid input string\")\n        }\n      \
    \  return groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_length = paren_string_no_spaces.length\n\
    \        var paren_groups = List[String]()\n        var current_paren_group =\
    \ \"\"\n        var open_paren_count = 0\n        var close_paren_count = 0\n\
    \        for (i <- 0 until paren_string_no_spaces_length) {\n            val current_char\
    \ = paren_string_no_spaces(i)\n            if (current_char == '(') {\n      \
    \          open_paren_count += 1\n            } else if (current_char == ')')\
    \ {\n                close_paren_count += 1\n            }\n            current_paren_group\
    \ += current_char\n            if (open_paren_count == close_paren_count) {\n\
    \                paren_groups = current_paren_group :: paren_groups\n        \
    \        current_paren_group = \"\"\n                open_paren_count = 0\n  \
    \              close_paren_count = 0\n            }\n        }\n        paren_groups.reverse",
  "        val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n    \
    \    var paren_groups = List[String]()\n        var paren_group = \"\"\n     \
    \   var paren_count = 0\n        for (c <- paren_string_no_space) {\n        \
    \    if (c == '(') {\n                paren_count += 1\n            } else if\
    \ (c == ')') {\n                paren_count -= 1\n            }\n            paren_group\
    \ += c\n            if (paren_count == 0) {\n                paren_groups = paren_groups\
    \ :+ paren_group\n                paren_group = \"\"\n            }\n        }\n\
    \        paren_groups", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ result = List[String]()\n        var current = new StringBuilder()\n       \
    \ var open = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n\
    \                open += 1\n                current.append(c)\n            } else\
    \ if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        var result = List[String]()\n \
    \       var current = new StringBuilder\n        var open = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open += 1\n\
    \                current.append(c)\n            } else if (c == ')') {\n     \
    \           open -= 1\n                current.append(c)\n                if (open\
    \ == 0) {\n                    result = result :+ current.toString\n         \
    \           current = new StringBuilder\n                }\n            }\n  \
    \      }\n        result", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current.append(c)\n            } else if (c == ')') {\n                count\
    \ -= 1\n                current.append(c)\n            }\n            if (count\
    \ == 0) {\n                result = current.toString :: result\n             \
    \   current = new StringBuilder()\n            }\n        }\n        result",
  "        val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n    \
    \    val paren_string_no_space_length = paren_string_no_space.length\n       \
    \ var paren_string_no_space_index = 0\n        var paren_string_no_space_buffer\
    \ = new StringBuilder\n        var paren_string_no_space_result = new ListBuffer[String]\n\
    \        while (paren_string_no_space_index < paren_string_no_space_length) {\n\
    \            val current_char = paren_string_no_space.charAt(paren_string_no_space_index)\n\
    \            if (current_char == '(') {\n                paren_string_no_space_buffer.append(current_char)\n\
    \            } else if (current_char == ')') {\n                paren_string_no_space_buffer.append(current_char)\n\
    \                paren_string_no_space_result += paren_string_no_space_buffer.toString\n\
    \                paren_string_no_space_buffer.clear\n            }\n         \
    \   paren_string_no_space_index += 1\n        }\n        paren_string_no_space_result.toList",
  "        var paren_stack = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \          current_group.append(c)\n            } else if (c == ')') {\n     \
    \           paren_stack.pop\n                current_group.append(c)\n       \
    \         if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = ListBuffer[String]()\n\
    \        var current_paren_group = \"\"\n        var current_paren_count = 0\n\
    \        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n  \
    \              current_paren_count += 1\n            } else if (c == ')') {\n\
    \                current_paren_count -= 1\n            }\n            current_paren_group\
    \ += c\n            if (current_paren_count == 0) {\n                paren_groups\
    \ += current_paren_group\n                current_paren_group = \"\"\n       \
    \     }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            }\n        }\n        paren_groups", "       \
    \ val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val\
    \ paren_groups = new ListBuffer[String]\n        var current_paren_group = \"\"\
    \n        var open_parens = 0\n        for (c <- paren_string_no_spaces) {\n \
    \           if (c == '(') {\n                open_parens += 1\n              \
    \  current_paren_group += c\n            } else if (c == ')') {\n            \
    \    open_parens -= 1\n                current_paren_group += c\n            \
    \    if (open_parens == 0) {\n                    paren_groups += current_paren_group\n\
    \                    current_paren_group = \"\"\n                }\n         \
    \   }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var curr_paren_string = \"\"\n        var open_paren_count = 0\n    \
    \    for (c <- paren_string) {\n            if (c == '(') {\n                open_paren_count\
    \ += 1\n                curr_paren_string += c\n            } else if (c == ')')\
    \ {\n                open_paren_count -= 1\n                curr_paren_string\
    \ += c\n                if (open_paren_count == 0) {\n                    result\
    \ = curr_paren_string :: result\n                    curr_paren_string = \"\"\n\
    \                }\n            }\n        }\n        result", "        var result\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            }\n        }\n        result", "        val paren_stack\
    \ = new Stack[Char]\n        val paren_group_stack = new Stack[String]\n     \
    \   var paren_group = \"\"\n        for (c <- paren_string) {\n            if\
    \ (c == ' ') {\n                // ignore spaces\n            } else if (c ==\
    \ '(') {\n                paren_stack.push(c)\n            } else if (c == ')')\
    \ {\n                if (paren_stack.isEmpty) {\n                    throw new\
    \ Exception(\"Mismatched parentheses\")\n                } else {\n          \
    \          paren_stack.pop\n                    if (paren_stack.isEmpty) {\n \
    \                       paren_group_stack.push(paren_group)\n                \
    \        paren_group = \"\"\n                    }\n                }\n      \
    \      } else {\n                paren_group += c\n            }\n        }\n\
    \        if (!paren_stack.isEmpty) {\n            throw new Exception(\"Mismatched\
    \ parentheses\")\n        }\n        paren_group_stack.toList", "        // TODO:\
    \ Implement this function\n        List()", "        var result = List[String]()\n\
    \        var current_group = new StringBuilder()\n        var open_paren_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_paren_count += 1\n                current_group.append(c)\n  \
    \          } else if (c == ')') {\n                open_paren_count -= 1\n   \
    \             current_group.append(c)\n                if (open_paren_count ==\
    \ 0) {\n                    result = result :+ current_group.toString()\n    \
    \                current_group = new StringBuilder()\n                }\n    \
    \        }\n        }\n        result", "        val stack = new Stack[Char]\n\
    \        var result = new ListBuffer[String]\n        var current = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // do nothing\n            } else if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       } else {\n                    stack.pop\n                    if (stack.isEmpty)\
    \ {\n                        result += current.toString\n                    \
    \    current = new StringBuilder\n                    }\n                }\n \
    \           } else {\n                current += c\n            }\n        }\n\
    \        if (!stack.isEmpty) {\n            throw new Exception(\"Unbalanced parentheses\"\
    )\n        }\n        result.toList", "        var stack = new Stack[Char]\n \
    \       var result = new ListBuffer[String]\n        var current = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // ignore\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                current.append(c)\n            } else if (c == ')') {\n     \
    \           if (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\")\n                }\n                stack.pop\n             \
    \   current.append(c)\n                if (stack.isEmpty) {\n                \
    \    result += current.toString\n                    current = new StringBuilder\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character\")\n            }\n        }\n        if (!stack.isEmpty) {\n\
    \            throw new Exception(\"Unbalanced parentheses\")\n        }\n    \
    \    result.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups : List[String] = List()\n        var current_group\
    \ : String = \"\"\n        var open_parens : Int = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        paren_groups.reverse", "        def helper(paren_string :\
    \ String, acc : List[String]) : List[String] = {\n            if (paren_string.length\
    \ == 0) acc\n            else {\n                val (group, rest) = paren_string.span(_\
    \ != ' ')\n                helper(rest.dropWhile(_ == ' '), acc :+ group)\n  \
    \          }\n        }\n        helper(paren_string, List())", "        val paren_groups\
    \ = ListBuffer[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ += current_group\n                    current_group = \"\"\n               \
    \ }\n            }\n        }\n        paren_groups.toList", "        var result\
    \ = List[String]()\n        var current = new StringBuilder()\n        var open_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_count += 1\n                current.append(c)\n            } else\
    \ if (c == ')') {\n                open_count -= 1\n                current.append(c)\n\
    \                if (open_count == 0) {\n                    result = result :+\
    \ current.toString\n                    current = new StringBuilder()\n      \
    \          }\n            }\n        }\n        result", "        val stack =\
    \ new Stack[Char]\n        val result = new ListBuffer[String]\n        var current_string\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             stack.push(c)\n            } else if (c == ')') {\n            \
    \    stack.pop\n                if (stack.isEmpty) {\n                    result\
    \ += current_string\n                    current_string = \"\"\n             \
    \   }\n            } else if (c != ' ') {\n                current_string += c\n\
    \            }\n        }\n        result.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var start_index = 0\n        var end_index = 0\n        var open_paren_count\
    \ = 0\n        var close_paren_count = 0\n        for (i <- 0 until paren_string_no_spaces.length)\
    \ {\n            if (paren_string_no_spaces(i) == '(') {\n                if (open_paren_count\
    \ == 0) {\n                    start_index = i\n                }\n          \
    \      open_paren_count += 1\n            } else if (paren_string_no_spaces(i)\
    \ == ')') {\n                close_paren_count += 1\n                if (open_paren_count\
    \ == close_paren_count) {\n                    end_index = i\n               \
    \     paren_groups = paren_groups :+ paren_string_no_spaces.substring(start_index,\
    \ end_index + 1)\n                    open_paren_count = 0\n                 \
    \   close_paren_count = 0\n                }\n            }\n        }\n     \
    \   paren_groups", "        val stack = new Stack[Char]\n        val result =\
    \ new ListBuffer[String]\n        var current = new StringBuilder\n        for\
    \ (c <- paren_string) {\n            if (c == ' ') {\n                // ignore\n\
    \            } else if (c == '(') {\n                stack.push(c)\n         \
    \   } else if (c == ')') {\n                if (stack.isEmpty) {\n           \
    \         throw new Exception(\"Unbalanced parentheses\")\n                }\n\
    \                stack.pop\n                if (stack.isEmpty) {\n           \
    \         result += current.toString\n                    current = new StringBuilder\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character\")\n            }\n        }\n        if (!stack.isEmpty) {\n\
    \            throw new Exception(\"Unbalanced parentheses\")\n        }\n    \
    \    result.toList", "        var result = List[String]()\n        var current\
    \ = \"\"\n        var open = 0\n        for (c <- paren_string) {\n          \
    \  if (c == '(') {\n                open += 1\n                current += c\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   current += c\n                if (open == 0) {\n                    result\
    \ = current :: result\n                    current = \"\"\n                }\n\
    \            }\n        }\n        result.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            }\n        }\n        paren_groups.reverse", "        var stack =\
    \ new Stack[Char]\n        var groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                stack.push(c)\n            } else if (c == ')') {\n\
    \                if (stack.isEmpty) {\n                    throw new Exception(\"\
    Unbalanced parentheses\")\n                }\n                stack.pop\n    \
    \            if (stack.isEmpty) {\n                    groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        if (!stack.isEmpty) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        groups.toList", "        var result\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            }\n        }\n        result", "        var paren_stack\
    \ = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n     \
    \   var current_group = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                paren_stack.push(c)\n          \
    \      current_group.append(c)\n            } else if (c == ')') {\n         \
    \       paren_stack.pop\n                current_group.append(c)\n           \
    \     if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            }\n        }\n        paren_groups", "       \
    \ val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val\
    \ paren_stack = new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n            current_group += c\n        }\n        paren_groups.toList",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string: \" + c)\n      \
    \      }\n        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parens\")\n        }\n        groups", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) throw new Exception(\"Unbalanced parentheses\")\n        result.reverse",
  "        var stack = new Stack[Char]\n        var result = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            }\
    \ else if (c == ')') {\n                if (stack.isEmpty) {\n               \
    \     throw new IllegalArgumentException(\"Unbalanced parentheses\")\n       \
    \         }\n                stack.pop\n                if (stack.isEmpty) {\n\
    \                    result += current_group.toString\n                    current_group\
    \ = new StringBuilder\n                }\n            } else if (c != ' ') {\n\
    \                current_group += c\n            }\n        }\n        if (!stack.isEmpty)\
    \ {\n            throw new IllegalArgumentException(\"Unbalanced parentheses\"\
    )\n        }\n        result.toList", "        var result = List[String]()\n \
    \       var current = new StringBuilder\n        var count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                count += 1\n\
    \                current.append(c)\n            } else if (c == ')') {\n     \
    \           count -= 1\n                current.append(c)\n            }\n   \
    \         if (count == 0) {\n                result = current.toString :: result\n\
    \                current = new StringBuilder\n            }\n        }\n     \
    \   result", "        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var paren_stack = Stack[Char]()\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \          current_group += c\n            } else if (c == ')') {\n          \
    \      paren_stack.pop\n                current_group += c\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups = current_group ::\
    \ paren_groups\n                    current_group = \"\"\n                }\n\
    \            }\n        }\n        paren_groups", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in paren string\")\n            }\n        }\n        return\
    \ groups", "        var result = List[String]()\n        var current = new StringBuilder\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    }\n        }\n        result", "        var groups = List[String]()\n   \
    \     var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                throw new Exception(\"Invalid character in\
    \ paren string\")\n            }\n        }\n        if (open_parens != 0) {\n\
    \            throw new Exception(\"Unbalanced paren string\")\n        }\n   \
    \     return groups", "        var result = List[String]()\n        var current\
    \ = \"\"\n        var depth = 0\n        for (c <- paren_string) {\n         \
    \   if (c == '(') {\n                depth += 1\n                current += c\n\
    \            } else if (c == ')') {\n                depth -= 1\n            \
    \    current += c\n                if (depth == 0) {\n                    result\
    \ = current :: result\n                    current = \"\"\n                }\n\
    \            }\n        }\n        result", "        // TODO: Implement this function\n\
    \        return List()", "        var result = List[String]()\n        var stack\
    \ = Stack[Char]()\n        var current_group = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            \
    \    current_group += c\n            } else if (c == ')') {\n                if\
    \ (stack.isEmpty) {\n                    throw new Exception(\"Invalid paren string\"\
    )\n                }\n                stack.pop\n                current_group\
    \ += c\n                if (stack.isEmpty) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         }\n        }\n        if (!stack.isEmpty) {\n            throw new Exception(\"\
    Invalid paren string\")\n        }\n        result", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val stack\
    \ = new Stack[Char]\n        val result = new ListBuffer[String]\n        var\
    \ current_string = \"\"\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n\
    \                stack.pop\n                if (stack.isEmpty) {\n           \
    \         result += current_string\n                    current_string = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_string\
    \ += c\n            }\n        }\n        result.toList", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var count = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                count += 1\n                current.append(c)\n    \
    \        } else if (c == ')') {\n                count -= 1\n                current.append(c)\n\
    \            }\n            if (count == 0) {\n                result = current.toString\
    \ :: result\n                current = new StringBuilder()\n            }\n  \
    \      }\n        result", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current.append(c)\n            } else if (c == ')') {\n                count\
    \ -= 1\n                current.append(c)\n            }\n            if (count\
    \ == 0) {\n                result = current.toString :: result\n             \
    \   current = new StringBuilder()\n            }\n        }\n        result",
  "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                throw new Exception(\"Invalid character\
    \ \" + c)\n            }\n        }\n        if (open != 0) throw new Exception(\"\
    Unbalanced parentheses\")\n        result", "        var result = List[String]()\n\
    \        var current = new StringBuilder()\n        var count = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                count +=\
    \ 1\n                current.append(c)\n            } else if (c == ')') {\n \
    \               count -= 1\n                current.append(c)\n            }\n\
    \            if (count == 0) {\n                result = current.toString :: result\n\
    \                current = new StringBuilder()\n            }\n        }\n   \
    \     result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_length = paren_string_no_spaces.length\n\
    \        var paren_groups = List[String]()\n        var paren_group = \"\"\n \
    \       var paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_length)\
    \ {\n            val c = paren_string_no_spaces(i)\n            if (c == '(')\
    \ {\n                paren_count += 1\n            } else if (c == ')') {\n  \
    \              paren_count -= 1\n            }\n            paren_group += c\n\
    \            if (paren_count == 0) {\n                paren_groups = paren_group\
    \ :: paren_groups\n                paren_group = \"\"\n            }\n       \
    \ }\n        paren_groups.reverse", "        var result = List[String]()\n   \
    \     var current = \"\"\n        var open_count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_count += 1\n          \
    \      current += c\n            } else if (c == ')') {\n                open_count\
    \ -= 1\n                current += c\n                if (open_count == 0) {\n\
    \                    result = current :: result\n                    current =\
    \ \"\"\n                }\n            }\n        }\n        result", "      \
    \  // TODO: Implement this function\n        return List()", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = \"\"\n        var stack\
    \ = new Stack[Char]()\n        for (c <- paren_string) {\n            if (c ==\
    \ ' ') {\n                // ignore\n            } else if (c == '(') {\n    \
    \            stack.push(c)\n                current += c\n            } else if\
    \ (c == ')') {\n                if (stack.isEmpty) {\n                    throw\
    \ new Exception(\"Invalid input\")\n                }\n                stack.pop\n\
    \                current += c\n                if (stack.isEmpty) {\n        \
    \            result = current :: result\n                    current = \"\"\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid input\")\n            }\n        }\n        if (!stack.isEmpty) {\n  \
    \          throw new Exception(\"Invalid input\")\n        }\n        result.reverse",
  "        // TODO: Implement this function\n        return List()", "        var\
    \ result = List[String]()\n        var current = \"\"\n        var open = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open += 1\n                current += c\n            } else if (c == ')')\
    \ {\n                open -= 1\n                current += c\n               \
    \ if (open == 0) {\n                    result = current :: result\n         \
    \           current = \"\"\n                }\n            }\n        }\n    \
    \    result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        val paren_string_no_spaces_list_length = paren_string_no_spaces_list.length\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_current_char\
    \ = paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n        var\
    \ paren_string_no_spaces_list_current_char_as_string = paren_string_no_spaces_list_current_char.toString\n\
    \        var paren_string_no_spaces_list_current_char_as_string_is_open_paren\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_close_paren\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_open_paren_or_close_paren\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_not_open_paren_or_close_paren\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_open_paren_or_close_paren_or_space\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_not_open_paren_or_close_paren_or_space\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_open_paren_or_close_paren_or_space_or_newline\
    \ = false\n        var paren_string_no_spaces_list_current_char_as_string_is_not_open_paren_or_close_paren_or_space_or_newline\
    \ = false\n        var paren_string_no_spaces_list_current_char_as", "       \
    \ val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val\
    \ paren_groups = new ListBuffer[String]\n        var current_group = new StringBuilder\n\
    \        var open_parens = 0\n        for (c <- paren_string_no_spaces) {\n  \
    \          if (c == '(') {\n                open_parens += 1\n               \
    \ current_group.append(c)\n            } else if (c == ')') {\n              \
    \  open_parens -= 1\n                current_group.append(c)\n               \
    \ if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var current_depth = 0\n\
    \        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n  \
    \              current_depth += 1\n                current_group += c\n      \
    \      } else if (c == ')') {\n                current_depth -= 1\n          \
    \      current_group += c\n                if (current_depth == 0) {\n       \
    \             paren_groups += current_group.toString\n                    current_group\
    \ = new StringBuilder\n                }\n            }\n        }\n        paren_groups.toList",
  "        val stack = Stack[Char]()\n        var result = List[String]()\n      \
    \  var current = \"\"\n        for (c <- paren_string) {\n            if (c ==\
    \ ' ') {\n                // Do nothing\n            } else if (c == '(') {\n\
    \                stack.push(c)\n            } else if (c == ')') {\n         \
    \       if (stack.isEmpty) {\n                    throw new Exception(\"Invalid\
    \ paren string\")\n                }\n                stack.pop\n            \
    \    if (stack.isEmpty) {\n                    result = current :: result\n  \
    \                  current = \"\"\n                }\n            } else {\n \
    \               throw new Exception(\"Invalid paren string\")\n            }\n\
    \        }\n        if (!stack.isEmpty) {\n            throw new Exception(\"\
    Invalid paren string\")\n        }\n        result", "        var stack = new\
    \ Stack[Char]\n        var groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                stack.push(c)\n            } else if (c == ')') {\n\
    \                stack.pop\n                if (stack.isEmpty) {\n           \
    \         groups += current_group.toString\n                    current_group\
    \ = new StringBuilder\n                }\n            } else if (c != ' ') {\n\
    \                current_group += c\n            }\n        }\n        groups.toList",
  "        val stack = new Stack[Char]\n        val groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            }\
    \ else if (c == ')') {\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    groups += current_group.toString\n                  \
    \  current_group = new StringBuilder\n                }\n            } else if\
    \ (c != ' ') {\n                current_group += c\n            }\n        }\n\
    \        groups.toList", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current.append(c)\n            } else if (c == ')') {\n                count\
    \ -= 1\n                current.append(c)\n            }\n            if (count\
    \ == 0) {\n                result = current.toString :: result\n             \
    \   current = new StringBuilder()\n            }\n        }\n        result",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     var paren_groups = List[String]()\n        var current_paren_group = \"\"\
    \n        var open_parens = 0\n        for (c <- paren_string_no_spaces) {\n \
    \           if (c == '(') {\n                open_parens += 1\n              \
    \  current_paren_group += c\n            } else if (c == ')') {\n            \
    \    open_parens -= 1\n                current_paren_group += c\n            \
    \    if (open_parens == 0) {\n                    paren_groups = current_paren_group\
    \ :: paren_groups\n                    current_paren_group = \"\"\n          \
    \      }\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current = \"\"\n        var open = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open += 1\n                current += c\n            } else if (c == ')')\
    \ {\n                open -= 1\n                current += c\n               \
    \ if (open == 0) {\n                    result = current :: result\n         \
    \           current = \"\"\n                }\n            }\n        }\n    \
    \    result.reverse", "        var result = List[String]()\n        var current\
    \ = \"\"\n        var depth = 0\n        for (c <- paren_string) {\n         \
    \   if (c == '(') {\n                depth += 1\n                current += c\n\
    \            } else if (c == ')') {\n                depth -= 1\n            \
    \    current += c\n                if (depth == 0) {\n                    result\
    \ = current :: result\n                    current = \"\"\n                }\n\
    \            }\n        }\n        result", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val paren_stack\
    \ = new Stack[Char]\n        val result = new ListBuffer[String]\n        var\
    \ current_group = new StringBuilder\n        for (c <- paren_string) {\n     \
    \       if (c == '(') {\n                paren_stack.push(c)\n               \
    \ current_group += c\n            } else if (c == ')') {\n                if (paren_stack.isEmpty)\
    \ {\n                    throw new Exception(\"Unbalanced parentheses\")\n   \
    \             }\n                paren_stack.pop\n                current_group\
    \ += c\n                if (paren_stack.isEmpty) {\n                    result\
    \ += current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            }\n        }\n        if (!paren_stack.isEmpty)\
    \ {\n            throw new Exception(\"Unbalanced parentheses\")\n        }\n\
    \        result.toList", "        var groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Invalid paren string\")\n        }\n        return groups", "        var result\
    \ = List[String]()\n        var current = new StringBuilder()\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current.append(c)\n            } else if\
    \ (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        var result = List[String]()\n \
    \       var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parens\")\n        }\n\
    \        return groups", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current.append(c)\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   current.append(c)\n                if (open == 0) {\n                    result\
    \ = result :+ current.toString\n                    current = new StringBuilder()\n\
    \                }\n            }\n        }\n        result", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n    \
    \    var paren_groups = List[String]()\n        var paren_group = \"\"\n     \
    \   var open_paren_count = 0\n        for (c <- paren_string_no_space) {\n   \
    \         if (c == '(') {\n                open_paren_count += 1\n           \
    \ } else if (c == ')') {\n                open_paren_count -= 1\n            }\n\
    \            paren_group += c\n            if (open_paren_count == 0) {\n    \
    \            paren_groups = paren_group :: paren_groups\n                paren_group\
    \ = \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ groups = List[String]()\n        var current_group = new StringBuilder()\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group.toString\n             \
    \       current_group = new StringBuilder()\n                }\n            }\n\
    \        }\n        groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        return paren_groups", "        var result = List[String]()\n\
    \        var stack = Stack[Char]()\n        var current = \"\"\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                stack.pop()\n           \
    \     if (stack.isEmpty) {\n                    result = result :+ current\n \
    \                   current = \"\"\n                }\n            } else if (c\
    \ != ' ') {\n                current += c\n            }\n        }\n        result",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        result", "    \
    \    var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        var result = List[String]()\n \
    \       var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_paren_count = 0\n        var\
    \ close_paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_length)\
    \ {\n            val c = paren_string_no_spaces(i)\n            if (c == '(')\
    \ {\n                open_paren_count += 1\n            } else if (c == ')') {\n\
    \                close_paren_count += 1\n            }\n            paren_group\
    \ += c\n            if (open_paren_count == close_paren_count) {\n           \
    \     paren_groups = paren_group :: paren_groups\n                paren_group\
    \ = \"\"\n                open_paren_count = 0\n                close_paren_count\
    \ = 0\n            }\n        }\n        paren_groups.reverse", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var stack = Stack[Char]()\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // ignore\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                current += c\n            } else if (c == ')') {\n          \
    \      stack.pop\n                current += c\n                if (stack.isEmpty)\
    \ {\n                    result = current :: result\n                    current\
    \ = \"\"\n                }\n            }\n        }\n        result", "    \
    \    var result = List[String]()\n        var current = \"\"\n        var count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          count += 1\n                current += c\n            } else if (c\
    \ == ')') {\n                count -= 1\n                current += c\n      \
    \      }\n            if (count == 0 && current != \"\") {\n                result\
    \ = current :: result\n                current = \"\"\n            }\n       \
    \ }\n        result", "        var result = List[String]()\n        var current\
    \ = \"\"\n        var stack = Stack[Char]()\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                stack.push(c)\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty) {\n                    throw\
    \ new Exception(\"Unbalanced parentheses\")\n                }\n             \
    \   stack.pop\n                if (stack.isEmpty) {\n                    result\
    \ = current :: result\n                    current = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                current += c\n          \
    \  }\n        }\n        if (!stack.isEmpty) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        result.reverse", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current += c\n            } else if (c ==\
    \ ')') {\n                open -= 1\n                current += c\n          \
    \      if (open == 0) {\n                    result = current :: result\n    \
    \                current = \"\"\n                }\n            }\n        }\n\
    \        result.reverse", "        val stack = new Stack[Char]\n        var result\
    \ = new ListBuffer[String]\n        var current = new StringBuilder\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                stack.pop\n             \
    \   if (stack.isEmpty) {\n                    result += current.toString\n   \
    \                 current = new StringBuilder\n                }\n           \
    \ } else if (c != ' ') {\n                current += c\n            }\n      \
    \  }\n        result.toList", "        var groups = List[String]()\n        var\
    \ current_group = new StringBuilder\n        var open_parens = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group.append(c)\n            } else if (c == ')')\
    \ {\n                open_parens -= 1\n                current_group.append(c)\n\
    \                if (open_parens == 0) {\n                    groups = groups\
    \ :+ current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            }\n        }\n        groups", "        var result\
    \ = List[String]()\n        var stack = Stack[Char]()\n        var current = new\
    \ StringBuilder()\n        for (c <- paren_string) {\n            if (c == ' ')\
    \ {\n                // ignore\n            } else if (c == '(') {\n         \
    \       stack.push(c)\n            } else if (c == ')') {\n                if\
    \ (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced parentheses\"\
    )\n                }\n                stack.pop()\n                if (stack.isEmpty)\
    \ {\n                    result = current.toString :: result\n               \
    \     current = new StringBuilder()\n                }\n            } else {\n\
    \                throw new Exception(\"Invalid character\")\n            }\n \
    \       }\n        if (!stack.isEmpty) {\n            throw new Exception(\"Unbalanced\
    \ parentheses\")\n        }\n        result", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val stack\
    \ = new Stack[Char]\n        val groups = new ListBuffer[String]\n        var\
    \ current_group = new StringBuilder\n        for (c <- paren_string) {\n     \
    \       if (c == ' ') {\n                // Ignore spaces\n            } else\
    \ if (c == '(') {\n                stack.push(c)\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       }\n                stack.pop\n                current_group.append(c)\n\
    \                if (stack.isEmpty) {\n                    groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else {\n                throw new Exception(\"Invalid character\"\
    )\n            }\n        }\n        if (!stack.isEmpty) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        groups.toList",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_buffer\
    \ = new ListBuffer[Char]\n        var paren_string_no_spaces_list_buffer_list\
    \ = new ListBuffer[ListBuffer[Char]]\n        while (paren_string_no_spaces_list_index\
    \ < paren_string_no_spaces_list_length) {\n            if (paren_string_no_spaces_list(paren_string_no_spaces_list_index)\
    \ == '(') {\n                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_index += 1\n                while\
    \ (paren_string_no_spaces_list(paren_string_no_spaces_list_index) != ')') {\n\
    \                    paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                    paren_string_no_spaces_list_index += 1\n                }\n\
    \                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_buffer_list += paren_string_no_spaces_list_buffer\n\
    \                paren_string_no_spaces_list_buffer = new ListBuffer[Char]\n \
    \           }\n            paren_string_no_spaces_list_index += 1\n        }\n\
    \        paren_string_no_spaces_list_buffer_list.map(x => x.mkString).to", " \
    \       var result = new ListBuffer[String]\n        var current_group = new StringBuilder\n\
    \        var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    result += current_group.toString\n                    current_group\
    \ = new StringBuilder\n                }\n            } else if (c != ' ') {\n\
    \                throw new Exception(\"Invalid character in input string\")\n\
    \            }\n        }\n        if (open_parens != 0) throw new Exception(\"\
    Invalid input string\")\n        result.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        val paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_index\
    \ = 0\n        var paren_string_no_spaces_list_index_end = 0\n        var paren_string_no_spaces_list_index_start\
    \ = 0\n        var paren_string_no_spaces_list_index_start_temp = 0\n        var\
    \ paren_string_no_spaces_list_index_end_temp = 0\n        var paren_string_no_spaces_list_index_end_temp_2\
    \ = 0\n        var paren_string_no_spaces_list_index_start_temp_2 = 0\n      \
    \  var paren_string_no_spaces_list_index_end_temp_3 = 0\n        var paren_string_no_spaces_list_index_start_temp_3\
    \ = 0\n        var paren_string_no_spaces_list_index_end_temp_4 = 0\n        var\
    \ paren_string_no_spaces_list_index_start_temp_4 = 0\n        var paren_string_no_spaces_list_index_end_temp_5\
    \ = 0\n        var paren_string_no_spaces_list_index_start_temp_5 = 0\n      \
    \  var paren_string_no_spaces_list_index_end_temp_6 = 0\n        var paren_string_no_spaces_list_index_start_temp_6\
    \ = 0\n        var paren_string_no_spaces_list_index_end_temp_7 = 0\n        var\
    \ paren_string_no_spaces_list_index_start_temp_7 = 0\n        var paren_string_no_spaces_list_index_end_temp_8\
    \ = 0\n        var paren_string_no_spaces_list_index_", "        var result =\
    \ List[String]()\n        var current = \"\"\n        var open = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open +=\
    \ 1\n                current += c\n            } else if (c == ')') {\n      \
    \          open -= 1\n                current += c\n                if (open ==\
    \ 0) {\n                    result = current :: result\n                    current\
    \ = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        val stack = new Stack[Char]\n        val result = new ListBuffer[String]\n\
    \        var current = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == ' ') {\n                // do nothing\n            } else\
    \ if (c == '(') {\n                stack.push(c)\n                current.append(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Invalid input string\")\n           \
    \     }\n                stack.pop\n                current.append(c)\n      \
    \          if (stack.isEmpty) {\n                    result += current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    } else {\n                throw new Exception(\"Invalid input string\")\n\
    \            }\n        }\n        if (!stack.isEmpty) {\n            throw new\
    \ Exception(\"Invalid input string\")\n        }\n        result.toList", "  \
    \      var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      }\n        }\n        result", "        // TODO: Implement this function\n\
    \        return List()", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        //\
    \ TODO: Implement this function\n        return List()", "        var result =\
    \ List[String]()\n        var current_string = \"\"\n        var paren_count =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        paren_count += 1\n                current_string += c\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n                current_string\
    \ += c\n                if (paren_count == 0) {\n                    result =\
    \ current_string :: result\n                    current_string = \"\"\n      \
    \          }\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var groups = List[String]()\n\
    \        var group = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       group += c\n            } else if (c == ')') {\n                open_parens\
    \ -= 1\n                group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ group\n                    group = \"\"\
    \n                }\n            }\n        }\n        groups", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var depth = 0\n      \
    \  for (c <- paren_string) {\n            if (c == '(') {\n                depth\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             depth -= 1\n                current += c\n                if (depth\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        // Your code here\n        return List()", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var result\
    \ = List[String]()\n        var current = new StringBuilder()\n        var balance\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          balance += 1\n                current.append(c)\n            } else\
    \ if (c == ')') {\n                balance -= 1\n                current.append(c)\n\
    \            } else if (c == ' ') {\n                if (balance == 0) {\n   \
    \                 result = result :+ current.toString\n                    current\
    \ = new StringBuilder()\n                }\n            }\n        }\n       \
    \ if (current.length > 0) result = result :+ current.toString\n        result",
  "        // TODO: Implement this function\n        List()", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Invalid paren string\")\n       \
    \ }\n        return groups", "        val paren_groups = ListBuffer[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups += current_group\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val parens\
    \ = paren_string.filter(_ != ' ')\n        var groups = List[String]()\n     \
    \   var group = \"\"\n        var count = 0\n        for (c <- parens) {\n   \
    \         if (c == '(') {\n                count += 1\n            } else {\n\
    \                count -= 1\n            }\n            group += c\n         \
    \   if (count == 0) {\n                groups = group :: groups\n            \
    \    group = \"\"\n            }\n        }\n        groups.reverse", "      \
    \  val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n       \
    \ val paren_stack = new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n            current_group += c\n        }\n        paren_groups.toList",
  "        var result = List[String]()\n        var stack = Stack[Char]()\n      \
    \  var current = \"\"\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                stack.push(c)\n            } else if (c == ')') {\n\
    \                if (stack.isEmpty) {\n                    throw new Exception(\"\
    Invalid input\")\n                }\n                stack.pop\n             \
    \   if (stack.isEmpty) {\n                    result = current :: result\n   \
    \                 current = \"\"\n                }\n            } else if (c\
    \ != ' ') {\n                current += c\n            }\n        }\n        if\
    \ (!stack.isEmpty) {\n            throw new Exception(\"Invalid input\")\n   \
    \     }\n        result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            current_paren_group += c\n            if (c == '(') open_paren_count\
    \ += 1\n            else if (c == ')') open_paren_count -= 1\n            if (open_paren_count\
    \ == 0) {\n                paren_groups = current_paren_group :: paren_groups\n\
    \                current_paren_group = \"\"\n            }\n        }\n      \
    \  paren_groups.reverse", "        var result = List[String]()\n        var current_group\
    \ = new StringBuilder()\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    result = result :+ current_group.toString\n\
    \                    current_group = new StringBuilder()\n                }\n\
    \            }\n        }\n        result", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        val paren_groups\
    \ = new ListBuffer[String]\n        var current_group = new StringBuilder\n  \
    \      var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group.toString\n                \
    \    current_group = new StringBuilder\n                }\n            }\n   \
    \     }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current = \"\"\n        var count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                count += 1\n               \
    \ current += c\n            } else if (c == ')') {\n                count -= 1\n\
    \                current += c\n            }\n            if (count == 0 && current\
    \ != \"\") {\n                result = current :: result\n                current\
    \ = \"\"\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var stack = new Stack[Char]\n\
    \        var start = 0\n        var end = 0\n        var result = List[String]()\n\
    \        for (i <- 0 until paren_string_no_spaces.length) {\n            if (paren_string_no_spaces(i)\
    \ == '(') {\n                stack.push('(')\n                if (stack.size ==\
    \ 1) start = i\n            }\n            else if (paren_string_no_spaces(i)\
    \ == ')') {\n                stack.pop\n                if (stack.size == 0) {\n\
    \                    end = i\n                    result = result :+ paren_string_no_spaces.substring(start,\
    \ end + 1)\n                }\n            }\n        }\n        result", "  \
    \      val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_length = paren_string_no_spaces.length\n    \
    \    var paren_groups = List[String]()\n        var i = 0\n        while (i <\
    \ paren_string_no_spaces_length) {\n            var open_paren_count = 0\n   \
    \         var close_paren_count = 0\n            var j = i\n            while\
    \ (j < paren_string_no_spaces_length) {\n                if (paren_string_no_spaces(j)\
    \ == '(') open_paren_count += 1\n                else if (paren_string_no_spaces(j)\
    \ == ')') close_paren_count += 1\n                if (open_paren_count == close_paren_count)\
    \ {\n                    paren_groups = paren_groups :+ paren_string_no_spaces.substring(i,\
    \ j + 1)\n                    i = j + 1\n                    j = paren_string_no_spaces_length\n\
    \                }\n                j += 1\n            }\n        }\n       \
    \ paren_groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_group = \"\"\n\
    \        var open_parens = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length)\
    \ {\n            val c = paren_string_no_spaces_chars(i)\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               paren_groups = current_group :: paren_groups\n               \
    \     current_group = \"\"\n                }\n            }\n        }\n    \
    \    paren_groups.reverse", "        var groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        return groups", "        val paren_stack\
    \ = new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n     \
    \   var current_group = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                paren_stack.push(c)\n          \
    \      current_group.append(c)\n            } else if (c == ')') {\n         \
    \       paren_stack.pop\n                current_group.append(c)\n           \
    \     if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string: \" + c)\n            }\n        }\n        if (!paren_stack.isEmpty)\
    \ throw new Exception(\"Unbalanced paren string\")\n        paren_groups.toList",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_stack = new Stack[Char]\n        val result = new ListBuffer[String]\n\
    \        var current_string = \"\"\n        for (i <- 0 until paren_string_no_spaces.length)\
    \ {\n            val c = paren_string_no_spaces(i)\n            if (c == '(')\
    \ {\n                paren_stack.push(c)\n            } else if (c == ')') {\n\
    \                if (paren_stack.isEmpty) {\n                    throw new Exception(\"\
    Invalid paren string\")\n                }\n                paren_stack.pop\n\
    \                if (paren_stack.isEmpty) {\n                    result += current_string\n\
    \                    current_string = \"\"\n                }\n            }\n\
    \            current_string += c\n        }\n        if (!paren_stack.isEmpty)\
    \ {\n            throw new Exception(\"Invalid paren string\")\n        }\n  \
    \      result.toList", "        var groups = List[String]()\n        var current_group\
    \ = \"\"\n        var paren_count = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                paren_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \                current_group += c\n                if (paren_count == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        groups", "    \
    \    var result = List[String]()\n        var current = \"\"\n        var count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          count += 1\n                current += c\n            } else if (c\
    \ == ')') {\n                count -= 1\n                current += c\n      \
    \      }\n            if (count == 0 && current != \"\") {\n                result\
    \ = current :: result\n                current = \"\"\n            }\n       \
    \ }\n        result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_length = paren_string_no_spaces.length\n\
    \        var paren_groups = List[String]()\n        var paren_group = \"\"\n \
    \       var paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_length)\
    \ {\n            val c = paren_string_no_spaces(i)\n            if (c == '(')\
    \ {\n                paren_count += 1\n            } else if (c == ')') {\n  \
    \              paren_count -= 1\n            }\n            paren_group += c\n\
    \            if (paren_count == 0) {\n                paren_groups = paren_group\
    \ :: paren_groups\n                paren_group = \"\"\n            }\n       \
    \ }\n        paren_groups.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       paren_group += c\n            } else if (c == ')') {\n               \
    \ open_parens -= 1\n                paren_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = paren_group :: paren_groups\n  \
    \                  paren_group = \"\"\n                }\n            }\n    \
    \    }\n        paren_groups.reverse"]
stop_tokens:
- "\n    }\n"
