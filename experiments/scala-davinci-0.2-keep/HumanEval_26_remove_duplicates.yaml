name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n    // [1, 3, 4]\n    def removeDuplicates(numbers : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val numbersSet = numbers.toSet\n        numbersSet.toList",
  "        val set = new HashSet[Long]\n        numbers.filter(x => {\n          \
    \  if (set.contains(x)) false\n            else {\n                set += x\n\
    \                true\n            }\n        })", "        val set = new HashSet[Long]\n\
    \        val list = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             list += number\n            }\n        }\n        list.toList",
  "        val map = new HashMap[Long, Long]\n        for (number <- numbers) {\n\
    \            if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n \
    \       for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        numbers.foreach(n => map(n) = map.getOrElse(n, 0) + 1)\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val result =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val numbersSet = numbers.toSet\n\
    \        numbersSet.toList", "        val map = new HashMap[Long, Int]\n     \
    \   for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, Int]()\n        for (number <- numbers) {\n            if\
    \ (map.contains(number)) {\n                map(number) += 1\n            } else\
    \ {\n                map(number) = 1\n            }\n        }\n        val result\
    \ = new ListBuffer[Long]()\n        for (number <- numbers) {\n            if\
    \ (map(number) == 1) {\n                result += number\n            }\n    \
    \    }\n        result.toList", "        val set = HashSet[Long]()\n        val\
    \ result = ListBuffer[Long]()\n        for (number <- numbers) {\n           \
    \ if (!set.contains(number)) {\n                set += number\n              \
    \  result += number\n            }\n        }\n        result.toList", "     \
    \   val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n \
    \       for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val counts = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (counts.contains(number))\
    \ counts(number) += 1\n            else counts(number) = 1\n        }\n      \
    \  numbers.filter(number => counts(number) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val set = HashSet[Long]()\n        val result = ListBuffer[Long]()\n     \
    \   for (number <- numbers) {\n            if (!set.contains(number)) {\n    \
    \            set += number\n                result += number\n            }\n\
    \        }\n        result.toList", "        val set = new HashSet[Long]\n   \
    \     val result = new ListBuffer[Long]\n        for (number <- numbers) {\n \
    \           if (!set.contains(number)) {\n                set += number\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val numbersSet = numbers.toSet\n        numbersSet.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           map.put(number, map.getOrElse(number, 0) + 1)\n        }\n       \
    \ numbers.filter(number => map.get(number).get == 1)", "        val map = new\
    \ HashMap[Long, Long]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ {\n                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]()\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, Int]()\n        for (number <- numbers) {\n            if\
    \ (map.contains(number)) map.put(number, map(number) + 1)\n            else map.put(number,\
    \ 1)\n        }\n        val result = new ListBuffer[Long]()\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = HashMap[Long, Int]()\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        val result = ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result +=\
    \ number\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val numbersSet = numbers.toSet\n        val numbersMap = numbers.groupBy(identity).mapValues(_.size)\n\
    \        numbers.filter(numbersMap(_) == 1)", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (n <- numbers) {\n            if (!set.contains(n))\
    \ {\n                set += n\n                result += n\n            }\n  \
    \      }\n        result.toList", "        val set = new HashSet[Long]\n     \
    \   val result = new ListBuffer[Long]\n        for (number <- numbers) {\n   \
    \         if (!set.contains(number)) {\n                set += number\n      \
    \          result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        var map = Map[Long, Int]()\n        for (n <- numbers) {\n            if\
    \ (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n    \
    \    var result = List[Long]()\n        for (n <- numbers) {\n            if (map(n)\
    \ == 1) result = n :: result\n        }\n        result.reverse", "        val\
    \ set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n       \
    \ for (number <- numbers) {\n            if (!set.contains(number)) {\n      \
    \          set += number\n                result += number\n            }\n  \
    \      }\n        result.toList", "        val map = new HashMap[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) {\n\
    \                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) {\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n    \
    \        if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val list\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                list += number\n         \
    \   }\n        }\n        list.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result +=\
    \ number\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, Int]\n        for (number <- numbers) {\n            if\
    \ (map.contains(number)) map(number) += 1\n            else map(number) = 1\n\
    \        }\n        val result = new ListBuffer[Long]\n        for (number <-\
    \ numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var set =\
    \ Set[Long]()\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                result = result :+ number\n                set += number\n\
    \            }\n        }\n        result", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val set\
    \ = new HashSet[Long]\n        val result = new ListBuffer[Long]\n        for\
    \ (number <- numbers) {\n            if (!set.contains(number)) {\n          \
    \      set += number\n                result += number\n            }\n      \
    \  }\n        result.toList", "        val map = new HashMap[Long, Int]\n    \
    \    for (number <- numbers) {\n            if (map.contains(number)) {\n    \
    \            map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var result = List[Long]()\n        var seen = Set[Long]()\n\
    \        for (number <- numbers) {\n            if (!seen.contains(number)) {\n\
    \                result = result :+ number\n                seen = seen + number\n\
    \            }\n        }\n        result", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(map(_) == 1)", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = new HashSet[Long]\n        numbers.filter(x => {\n\
    \            if (set.contains(x)) false\n            else {\n                set\
    \ += x\n                true\n            }\n        })", "        val set = new\
    \ HashSet[Long]\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result += number\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var result = List[Long]()\n        var seen = Set[Long]()\n\
    \        for (number <- numbers) {\n            if (!seen.contains(number)) {\n\
    \                result = result :+ number\n                seen = seen + number\n\
    \            }\n        }\n        result", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = new HashSet[Long]\n        numbers.filter(x => {\n\
    \            if (set.contains(x)) false\n            else {\n                set\
    \ += x\n                true\n            }\n        })", "        val set = new\
    \ HashSet[Long]\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result += number\n            }\n        }\n    \
    \    result.toList", '        numbers.foldLeft(List[Long]())((acc, x) => if (acc.contains(x))
    acc else acc :+ x)', "        val set = new HashSet[Long]\n        val list =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                list += number\n         \
    \   }\n        }\n        list.toList", "        var map = Map[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result =\
    \ number :: result\n        }\n        result.reverse", "        val map = new\
    \ HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val map = new HashMap[Long, Int]\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "        val\
    \ map = new HashMap[Long, Int]\n        for (number <- numbers) {\n          \
    \  if (map.contains(number)) map(number) += 1\n            else map(number) =\
    \ 1\n        }\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        val numbersSet = numbers.toSet\n        numbersSet.toList",
  '        numbers.distinct', "        val map = new HashMap[Long, Int]\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "   \
    \     val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n  \
    \          if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var set =\
    \ Set[Long]()\n        for (n <- numbers) {\n            if (!set.contains(n))\
    \ {\n                result = result :+ n\n                set += n\n        \
    \    }\n        }\n        result", "        val set = HashSet[Long]()\n     \
    \   val result = ListBuffer[Long]()\n        for (number <- numbers) {\n     \
    \       if (!set.contains(number)) {\n                set += number\n        \
    \        result += number\n            }\n        }\n        result.toList", " \
    \       var uniqueNumbers = new ListBuffer[Long]()\n        for (number <- numbers)\
    \ {\n            if (!uniqueNumbers.contains(number)) {\n                uniqueNumbers\
    \ += number\n            }\n        }\n        uniqueNumbers.toList", "      \
    \  val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n     \
    \       if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   var result = List[Long]()\n        var set = Set[Long]()\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                result\
    \ = result :+ number\n                set += number\n            }\n        }\n\
    \        result", "        val set = new HashSet[Long]\n        val result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val uniqueNumbers = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!uniqueNumbers.contains(number))\
    \ {\n                uniqueNumbers += number\n            }\n        }\n     \
    \   uniqueNumbers.toList", "        val map = new HashMap[Long, Int]\n       \
    \ for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]()\n       \
    \ for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(map(_)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (number <- numbers)\
    \ {\n            if (map.contains(number)) map(number) += 1\n            else\
    \ map(number) = 1\n        }\n        var result = new ListBuffer[Long]\n    \
    \    for (number <- numbers) {\n            if (map(number) == 1) result += number\n\
    \        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) {\n\
    \                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (number <- numbers)\
    \ {\n            if (map.contains(number)) map(number) += 1\n            else\
    \ map(number) = 1\n        }\n        val result = new ListBuffer[Long]\n    \
    \    for (number <- numbers) {\n            if (map(number) == 1) result += number\n\
    \        }\n        result.toList", "        val numbersSet = numbers.toSet\n\
    \        val numbersMap = numbers.groupBy(identity).mapValues(_.size)\n      \
    \  numbersSet.filter(numbersMap(_) == 1).toList", "        val counts = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (counts.contains(number))\
    \ counts(number) += 1\n            else counts(number) = 1\n        }\n      \
    \  numbers.filter(number => counts(number) == 1)", "        val set = new HashSet[Long]\n\
    \        numbers.filter(x => {\n            if (set.contains(x)) false\n     \
    \       else {\n                set += x\n                true\n            }\n\
    \        })", "        var set = Set[Long]()\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result = number :: result\n  \
    \          }\n        }\n        result.reverse", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           map(number) = map.getOrElse(number, 0) + 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Long]\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) {\n                map(n)\
    \ += 1\n            } else {\n                map(n) = 1\n            }\n    \
    \    }\n        val result = new ListBuffer[Long]\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) {\n                result += n\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Boolean]()\n        for (number <- numbers)\
    \ {\n            if (map.contains(number)) map(number) = true\n            else\
    \ map(number) = false\n        }\n        for (number <- numbers) {\n        \
    \    if (map(number)) map.remove(number)\n        }\n        map.keys.toList",
  "        val map = new HashMap[Long, Int]()\n        for (number <- numbers) {\n\
    \            if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n    \
    \        if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(map(_)\
    \ == 1)", "        val counts = new HashMap[Long, Int]\n        for (number <-\
    \ numbers) {\n            if (counts.contains(number)) counts(number) += 1\n \
    \           else counts(number) = 1\n        }\n        numbers.filter(number\
    \ => counts(number) == 1)", "        val set = new HashSet[Long]\n        val\
    \ result = new ListBuffer[Long]\n        for (number <- numbers) {\n         \
    \   if (!set.contains(number)) {\n                set += number\n            \
    \    result += number\n            }\n        }\n        result.toList", "   \
    \     val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n \
    \       for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Long]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var result = List[Long]()\n        var map =\
    \ Map[Long, Int]()\n        for (i <- numbers) {\n            if (map.contains(i))\
    \ {\n                map(i) += 1\n            } else {\n                map(i)\
    \ = 1\n            }\n        }\n        for (i <- numbers) {\n            if\
    \ (map(i) == 1) {\n                result = result :+ i\n            }\n     \
    \   }\n        result", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (number <- numbers)\
    \ {\n            if (map.contains(number)) map(number) += 1\n            else\
    \ map(number) = 1\n        }\n        numbers.filter(map(_) == 1)", '        numbers.groupBy(identity).map(_._2.head).toList',
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                result += n\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                result = result :+ number\n                set = set + number\n\
    \            }\n        }\n        result", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        numbers.filter(x => {\n            if (set.contains(x)) false\n     \
    \       else {\n                set += x\n                true\n            }\n\
    \        })", "        var set = Set[Long]()\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result = number :: result\n  \
    \          }\n        }\n        result.reverse", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]()\n       \
    \ for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]()\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val set\
    \ = new HashSet[Long]\n        val result = new ListBuffer[Long]\n        for\
    \ (number <- numbers) {\n            if (!set.contains(number)) {\n          \
    \      set += number\n                result += number\n            }\n      \
    \  }\n        result.toList", "        val map = new HashMap[Long, Int]\n    \
    \    for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        var result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val set\
    \ = new HashSet[Long]\n        val result = new ListBuffer[Long]\n        for\
    \ (number <- numbers) {\n            if (!set.contains(number)) {\n          \
    \      set += number\n                result += number\n            }\n      \
    \  }\n        result.toList", "        val map = new HashMap[Long, Int]\n    \
    \    for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n    \
    \        else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        numbers.foreach(n => {\n    \
    \        if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n     \
    \   })\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  '        numbers.distinct', "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]()\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val map = new HashMap[Long, Long]\n        for (n <- numbers)\
    \ {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n\
    \        }\n        val result = new ListBuffer[Long]\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) result += n\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        numbers.filter(x => {\n          \
    \  if (set.contains(x)) false\n            else {\n                set += x\n\
    \                true\n            }\n        })", "        val map = new HashMap[Long,\
    \ Boolean]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) = true\n            else map(number) = false\n        }\n      \
    \  val result = new ListBuffer[Long]\n        for (number <- numbers) {\n    \
    \        if (!map(number)) result += number\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n    \
    \        if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(map(_) == 1)", "        val set = new\
    \ HashSet[Long]\n        numbers.filter(n => {\n            if (set.contains(n))\
    \ false\n            else {\n                set += n\n                true\n\
    \            }\n        })", "        val map = new HashMap[Long, Int]()\n   \
    \     for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) {\n           \
    \     map(number) += 1\n            } else {\n                map(number) = 1\n\
    \            }\n        }\n        val result = new ListBuffer[Long]\n       \
    \ for (number <- numbers) {\n            if (map(number) == 1) {\n           \
    \     result += number\n            }\n        }\n        result.toList", "  \
    \      val map = new HashMap[Long, Int]\n        numbers.foreach(n => {\n    \
    \        if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n     \
    \   })\n        numbers.filter(n => map(n) == 1)", "        val counts = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (counts.contains(number))\
    \ {\n                counts(number) += 1\n            } else {\n             \
    \   counts(number) = 1\n            }\n        }\n        numbers.filter(number\
    \ => counts(number) == 1)", "        val map = new HashMap[Long, Int]\n      \
    \  for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", '        numbers.distinct',
  "        val numbersSet = numbers.toSet\n        val numbersMap = numbers.groupBy(identity).mapValues(_.size)\n\
    \        numbers.filter(numbersMap(_) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) {\n                map(n) += 1\n            } else\
    \ {\n                map(n) = 1\n            }\n        }\n        numbers.filter(map(_)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]()\n\
    \        for (i <- numbers) {\n            if (map.contains(i)) map(i) += 1\n\
    \            else map(i) = 1\n        }\n        numbers.filter(map(_) == 1)",
  "        val set = new HashSet[Long]\n        numbers.filter(x => if (set.contains(x))\
    \ false else { set += x; true })", "        val set = new HashSet[Long]\n    \
    \    val result = new ListBuffer[Long]\n        for (number <- numbers) {\n  \
    \          if (!set.contains(number)) {\n                set += number\n     \
    \           result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(map(_) == 1)", "        var map = Map[Long,\
    \ Int]()\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        var result\
    \ = List[Long]()\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result = number :: result\n        }\n        result.reverse", "     \
    \   val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n    \
    \        if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val map = new HashMap[Long, Int]()\n        for (number <- numbers) {\n  \
    \          if (map.contains(number)) {\n                map(number) += 1\n   \
    \         } else {\n                map(number) = 1\n            }\n        }\n\
    \        val result = new ListBuffer[Long]()\n        for (number <- numbers)\
    \ {\n            if (map(number) == 1) {\n                result += number\n \
    \           }\n        }\n        result.toList", "        var map = new HashMap[Long,\
    \ Int]()\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ {\n                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        var result = new ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) {\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) {\n\
    \                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val numbersSet = numbers.toSet\n\
    \        numbersSet.toList", "        val map = new HashMap[Long, Int]\n     \
    \   for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(map(_)\
    \ == 1)", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                result = result :+ number\n                set += number\n  \
    \          }\n        }\n        result", '        numbers.foldLeft(List[Long]())((acc,
    x) => if (acc.contains(x)) acc else acc :+ x)', "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        for (number <- numbers) {\n            if (map(number)\
    \ > 1) map.remove(number)\n        }\n        map.keys.toList", "        val map\
    \ = new HashMap[Long, Int]()\n        for (number <- numbers) {\n            if\
    \ (map.contains(number)) {\n                map(number) += 1\n            } else\
    \ {\n                map(number) = 1\n            }\n        }\n        val result\
    \ = new ListBuffer[Long]()\n        for (number <- numbers) {\n            if\
    \ (map(number) == 1) {\n                result += number\n            }\n    \
    \    }\n        result.toList", "        var result = List[Long]()\n        var\
    \ seen = Set[Long]()\n        for (number <- numbers) {\n            if (!seen.contains(number))\
    \ {\n                result = result :+ number\n                seen += number\n\
    \            }\n        }\n        result", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val numbersSet = numbers.toSet\n        val\
    \ numbersSetMap = numbersSet.map(x => (x, numbers.count(_ == x)))\n        numbersSetMap.filter(x\
    \ => x._2 == 1).keys.toList", "        val map = new HashMap[Long, Int]\n    \
    \    for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val counts\
    \ = HashMap[Long, Int]()\n        for (number <- numbers) {\n            if (counts.contains(number))\
    \ {\n                counts(number) += 1\n            } else {\n             \
    \   counts(number) = 1\n            }\n        }\n        numbers.filter(counts(_)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (number <- numbers)\
    \ {\n            if (map.contains(number)) map(number) += 1\n            else\
    \ map(number) = 1\n        }\n        val result = new ListBuffer[Long]\n    \
    \    for (number <- numbers) {\n            if (map(number) == 1) result += number\n\
    \        }\n        result.toList", "        val set = new HashSet[Long]\n   \
    \     val result = new ListBuffer[Long]\n        for (number <- numbers) {\n \
    \           if (!set.contains(number)) {\n                set += number\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) {\n                map(number) += 1\n  \
    \          } else {\n                map(number) = 1\n            }\n        }\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (map(number) == 1) {\n                result += number\n     \
    \       }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(map(_)\
    \ == 1)", '        return numbers.distinct', "        val map = new HashMap[Long,\
    \ Int]()\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ {\n                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) {\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(map(_) == 1)", "        var result =\
    \ List[Long]()\n        var set = Set[Long]()\n        for (number <- numbers)\
    \ {\n            if (!set.contains(number)) {\n                result = result\
    \ :+ number\n                set += number\n            }\n        }\n       \
    \ result"]
stop_tokens:
- "\n    }\n"
