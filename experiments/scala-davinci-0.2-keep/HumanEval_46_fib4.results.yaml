language: scala
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            val e = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = e\n        }\n        return d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define other functions as you wish\n        0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1swz02xr.scala:23)\n\tat Problem.main(tmp1swz02xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var e = 0L\n        for\
    \ (i <- 4 to n.toInt) {\n            e = a + b + c + d\n            a = b\n  \
    \          b = c\n            c = d\n            d = e\n        }\n        e\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val temp = a + b + c + d\n                a = b\n                b\
    \ = c\n                c = d\n                d = temp\n            }\n      \
    \      a + b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4wa06nw.scala:38)\n\tat Problem.main(tmpp4wa06nw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val temp = a + b + c + d\n                a = b\n                b\
    \ = c\n                c = d\n                d = temp\n            }\n      \
    \      a + b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4wa06nw.scala:38)\n\tat Problem.main(tmpp4wa06nw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_3_fze4i.scala:31)\n\tat Problem.main(tmp_3_fze4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        def fib4_aux(n : Long, a : Long, b : Long, c : Long, d : Long) : Long\
    \ = {\n            if (n == 0) a\n            else if (n == 1) b\n           \
    \ else if (n == 2) c\n            else if (n == 3) d\n            else fib4_aux(n\
    \ - 1, b, c, d, a + b + c + d)\n        }\n        fib4_aux(n, 0, 0, 2, 0)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        return d\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1b9jozc.scala:33)\n\tat Problem.main(tmpa1b9jozc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            var temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3g5l1zvn.scala:36)\n\tat Problem.main(tmp3g5l1zvn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n < 0) throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        if (n == 0) return 0\n        if (n == 1) return\
    \ 0\n        if (n == 2) return 2\n        if (n == 3) return 0\n        var a\
    \ = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n        for\
    \ (i <- 4L to n) {\n            val e = a + b + c + d\n            a = b\n   \
    \         b = c\n            c = d\n            d = e\n        }\n        return\
    \ d\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjnks0gu.scala:23)\n\tat Problem.main(tmpgjnks0gu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val temp = a + b + c + d\n                a = b\n                b\
    \ = c\n                c = d\n                d = temp\n            }\n      \
    \      a + b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4wa06nw.scala:38)\n\tat Problem.main(tmpp4wa06nw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val a = ArrayBuffer.fill(4)(0L)\n\
    \        a(2) = 2\n        for (i <- 4 to n.toInt) {\n            a(0) = a(1)\n\
    \            a(1) = a(2)\n            a(2) = a(3)\n            a(3) = a(0) + a(1)\
    \ + a(2)\n        }\n        a(3)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn17cm1_y.scala:30)\n\tat Problem.main(tmpn17cm1_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n < 4) return 0\n   \
    \     var a = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n\
    \        for (i <- 4 to n) {\n            d = a + b + c\n            a = b\n \
    \           b = c\n            c = d\n        }\n        return d\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpio0koqil.scala:23:23\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m4\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        a + b + c + d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxahqmy5.scala:36)\n\tat Problem.main(tmpmxahqmy5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    var a = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n\
    \        var e = 0L\n        for (i <- 4 to n.toInt) {\n            e = a + b\
    \ + c + d\n            a = b\n            b = c\n            c = d\n         \
    \   d = e\n        }\n        return e\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppct1ua4x.scala:31)\n\tat Problem.main(tmppct1ua4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var a = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n   \
    \     if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n\
    \            return 0\n        }\n        if (n == 2) {\n            return 2\n\
    \        }\n        if (n == 3) {\n            return 0\n        }\n        for\
    \ (i <- 4L to n) {\n            d = a + b + c\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv400abe7.scala:46)\n\tat Problem.main(tmpv400abe7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt)\
    \ {\n            d = a + b + c + d\n            a = b\n            b = c\n   \
    \         c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qaqtdol.scala:31)\n\tat Problem.main(tmp5qaqtdol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n < 0) throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        var a = 0L\n        var b = 0L\n        var\
    \ c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt) {\n            d\
    \ = a + b + c\n            a = b\n            b = c\n            c = d\n     \
    \   }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpir51gahm.scala:32)\n\tat Problem.main(tmpir51gahm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4L to n) {\n            val e = a + b + c +\
    \ d\n            a = b\n            b = c\n            c = d\n            d =\
    \ e\n        }\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val temp = a + b + c + d\n                a = b\n                b\
    \ = c\n                c = d\n                d = temp\n            }\n      \
    \      a + b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4wa06nw.scala:38)\n\tat Problem.main(tmpp4wa06nw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val t = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = t\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    def fib4Helper(n : Long, a : Long, b : Long, c : Long, d : Long) : Long =\
    \ {\n            if (n == 0) a\n            else if (n == 1) b\n            else\
    \ if (n == 2) c\n            else if (n == 3) d\n            else fib4Helper(n\
    \ - 1, b, c, d, a + b + c + d)\n        }\n        fib4Helper(n, 0, 0, 2, 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4L to n) {\n           \
    \     val e = a + b + c + d\n                a = b\n                b = c\n  \
    \              c = d\n                d = e\n            }\n            a + b\
    \ + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph61dobw_.scala:38)\n\tat Problem.main(tmph61dobw_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val a = ArrayBuffer.fill(4)(0L)\n\
    \        a(2) = 2\n        for (i <- 4 to n.toInt) {\n            a(0) = a(1)\n\
    \            a(1) = a(2)\n            a(2) = a(3)\n            a(3) = a(0) + a(1)\
    \ + a(2)\n        }\n        a(3)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn17cm1_y.scala:30)\n\tat Problem.main(tmpn17cm1_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_3_fze4i.scala:31)\n\tat Problem.main(tmp_3_fze4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvyoz1qn.scala:23)\n\tat Problem.main(tmpsvyoz1qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n < 0) throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        if (n == 0) return 0\n        if (n == 1) return\
    \ 0\n        if (n == 2) return 2\n        if (n == 3) return 0\n        var a\
    \ = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n        for\
    \ (i <- 4 to n.toInt) {\n            val e = a + b + c + d\n            a = b\n\
    \            b = c\n            c = d\n            d = e\n        }\n        return\
    \ d\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = d\n\
    \            d = a + b + c + d\n            a = b\n            b = c\n       \
    \     c = temp\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var e = 0L\n        for\
    \ (i <- 4 to n.toInt) {\n            e = a + b + c + d\n            a = b\n  \
    \          b = c\n            c = d\n            d = e\n        }\n        e\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val a = Array.fill(4)(0L)\n\
    \        a(2) = 2\n        for (i <- 4 to n.toInt) {\n            val temp = a(3)\n\
    \            a(3) = a(0) + a(1) + a(2) + a(3)\n            a(0) = a(1)\n     \
    \       a(1) = a(2)\n            a(2) = temp\n        }\n        a(3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 3 to n.toInt)\
    \ {\n            d = a + b + c + d\n            a = b\n            b = c\n   \
    \         c = d\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1zus5kc.scala:31)\n\tat Problem.main(tmpx1zus5kc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            d\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val a = 0L\n        val b\
    \ = 0L\n        val c = 2L\n        val d = 0L\n        if (n == 0) return a\n\
    \        if (n == 1) return b\n        if (n == 2) return c\n        if (n ==\
    \ 3) return d\n        var i = 4L\n        var e = 0L\n        var f = 0L\n  \
    \      var g = 0L\n        var h = 0L\n        while (i <= n) {\n            e\
    \ = a + b + c + d\n            f = e\n            g = f\n            h = g\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \           i += 1\n        }\n        return e\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoa43w76r.scala:36:14 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            a = b\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpoa43w76r.scala:37:14 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            b = c\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpoa43w76r.scala:38:14 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            c = d\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpoa43w76r.scala:39:14 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            d = e\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val d\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjnks0gu.scala:23)\n\tat Problem.main(tmpgjnks0gu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val e = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = e\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n < 0) throw new IllegalArgumentException\n\
    \        var a = 0L\n        var b = 0L\n        var c = 2L\n        var d = 0L\n\
    \        for (i <- 3 to n.toInt) {\n            d = a + b + c\n            a =\
    \ b\n            b = c\n            c = d\n        }\n        d\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppt2i9wg_.scala:32)\n\tat Problem.main(tmppt2i9wg_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        def fib4_aux(n : Long, a : Long, b : Long, c : Long, d : Long) : Long\
    \ = {\n            if (n == 0) a\n            else if (n == 1) b\n           \
    \ else if (n == 2) c\n            else if (n == 3) d\n            else fib4_aux(n\
    \ - 1, b, c, d, a + b + c + d)\n        }\n        fib4_aux(n, 0, 0, 2, 0)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4 to n.toInt) {\n            val temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        }\n        return a + b + c + d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3n58k7.scala:36)\n\tat Problem.main(tmp0c3n58k7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjnks0gu.scala:23)\n\tat Problem.main(tmpgjnks0gu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var e = 0L\n        for\
    \ (i <- 4 to n.toInt) {\n            e = a + b + c + d\n            a = b\n  \
    \          b = c\n            c = d\n            d = e\n        }\n        return\
    \ e\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        d\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8sjn6z.scala:33)\n\tat Problem.main(tmpcj8sjn6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) return 0\n  \
    \      if (n == 1) return 0\n        if (n == 2) return 2\n        if (n == 3)\
    \ return 0\n        var a = 0L\n        var b = 0L\n        var c = 2L\n     \
    \   var d = 0L\n        for (i <- 4L to n) {\n            val e = a + b + c +\
    \ d\n            a = b\n            b = c\n            c = d\n            d =\
    \ e\n        }\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val a = ArrayBuffer[Long](0,\
    \ 0, 2, 0)\n        for (i <- 4 to n.toInt) {\n            a += a(i - 1) + a(i\
    \ - 2) + a(i - 3) + a(i - 4)\n        }\n        a(n.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you need\n    \
    \    def fib4_aux(n : Long, a : Long, b : Long, c : Long, d : Long) : Long = {\n\
    \            if (n == 0) a\n            else if (n == 1) b\n            else if\
    \ (n == 2) c\n            else if (n == 3) d\n            else fib4_aux(n - 1,\
    \ b, c, d, a + b + c + d)\n        }\n        fib4_aux(n, 0, 0, 2, 0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        // Fill up this function\
    \ body\n        // You may also define any auxiliary functions you may need\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e1s5odg.scala:23)\n\tat Problem.main(tmp5e1s5odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 0\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else {\n            var a = 0L\n            var b = 0L\n            var c\
    \ = 2L\n            var d = 0L\n            for (i <- 4 to n.toInt) {\n      \
    \          val e = a + b + c + d\n                a = b\n                b = c\n\
    \                c = d\n                d = e\n            }\n            a +\
    \ b + c + d\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjlfeki6n.scala:38)\n\tat Problem.main(tmpjlfeki6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        var i = 3L\n        while\
    \ (i <= n) {\n            d = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            i += 1\n        }\n        return d\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1b9jozc.scala:33)\n\tat Problem.main(tmpa1b9jozc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        return d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe76_2msj.scala:32)\n\tat Problem.main(tmpe76_2msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var a = 0L\n        var b\
    \ = 0L\n        var c = 2L\n        var d = 0L\n        for (i <- 4 to n.toInt)\
    \ {\n            d = a + b + c\n            a = b\n            b = c\n       \
    \     c = d\n        }\n        d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwj03q2n.scala:32)\n\tat Problem.main(tmpxwj03q2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797449
