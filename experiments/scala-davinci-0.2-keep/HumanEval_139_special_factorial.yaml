name: HumanEval_139_special_factorial
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) =\
  \ n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n   \
  \ // >>> special_factorial(4)\n    // 288\n    // The function will receive an integer\
  \ as input and should return the special\n    // factorial of this integer.\n  \
  \  def specialFactorial(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
  \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
  \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"
completions: ["        var result = 1L\n        for (i <- 1 to n.toInt) {\n      \
    \      result *= i\n            result *= factorial(i - 1)\n        }\n      \
    \  result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n    \
    \        result *= factorial(i)\n        }\n        result", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else factorial(n) * specialFactorial(n\
    \ - 1)", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n       \
    \     result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result\
    \ *= i - 1\n        }\n        result", "        var result = 1L\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= i\n            for (j <- 1 to i\
    \ - 1) result *= j\n        }\n        result", "        var result = 1L\n   \
    \     for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- n to 1 by -1) {\n\
    \            result *= i\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= i\n            result\
    \ *= factorial(i - 1)\n        }\n        result", "        if (n == 0) 1\n  \
    \      else n * specialFactorial(n - 1)", "        var result = 1L\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= i\n            result *= i - 1\n\
    \        }\n        result", "        var factorial = 1L\n        for (i <- 1\
    \ to n.toInt) {\n            factorial *= i\n        }\n        var result = factorial\n\
    \        for (i <- 1 to n.toInt - 1) {\n            result *= factorial\n    \
    \    }\n        result", "        def factorial(n : Long) : Long = {\n       \
    \     if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n      \
    \  def specialFactorial(n : Long, acc : Long) : Long = {\n            if (n ==\
    \ 0) acc\n            else specialFactorial(n - 1, acc * factorial(n))\n     \
    \   }\n        specialFactorial(n, 1)", "        var result = 1L\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n     \
    \   result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n   \
    \         result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1L to\
    \ n) {\n            result *= i\n            result *= i - 1\n        }\n    \
    \    result", "        var result = 1L\n        for (i <- n to 1 by -1) {\n  \
    \          result *= i\n        }\n        for (i <- n - 1 to 1 by -1) {\n   \
    \         result *= i\n        }\n        result", "        if (n == 0) return\
    \ 1\n        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        return result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        var result = 1L\n        for (i <- 1L to n) {\n\
    \            result *= i\n            result *= (i - 1)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= i\n            result *=\
    \ factorial(i - 1)\n        }\n        result", "        var result = 1L\n   \
    \     for (i <- 1L to n) {\n            result *= factorial(i)\n        }\n  \
    \      result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= factorial(i)\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= factorial(i - 1)\n        }\n        result", " \
    \       var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= specialFactorial(i - 1)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            for (j <- 1 to i - 1) result *= j\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to 1 by -1)\
    \ result *= i\n        result", "        var result = 1L\n        for (i <- 1\
    \ to n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1L to n) {\n            result *= i\n            result *= i -\
    \ 1\n        }\n        result", "        var result = 1L\n        for (i <- 1\
    \ to n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= factorial(i - 1)\n        }\n        result", " \
    \       var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= factorial(i - 1)\n        }\n        result", " \
    \       var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n\
    \            result *= i - 1\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   for (j <- 1 to i - 1) result *= j\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= factorial(i - 1)\n        }\n        result", " \
    \       var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n\
    \            result *= i - 1\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= i\n            result *= factorial(i - 1)\n\
    \        }\n        result", "        def factorial(n : Long) : Long = {\n   \
    \         if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n  \
    \      if (n == 0) 1\n        else n * specialFactorial(n - 1)", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1L to\
    \ n) {\n            result *= factorial(i)\n        }\n        result", "    \
    \    var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ i\n            result *= factorial(i - 1)\n        }\n        result", "   \
    \     def factorial(n : Long) : Long = {\n            if (n == 0) 1\n        \
    \    else n * factorial(n - 1)\n        }\n        def specialFactorial(n : Long,\
    \ acc : Long) : Long = {\n            if (n == 0) acc\n            else specialFactorial(n\
    \ - 1, acc * factorial(n))\n        }\n        specialFactorial(n, 1)", "    \
    \    var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ factorial(i)\n        }\n        result", "        var result = 1L\n       \
    \ for (i <- 1L to n) {\n            result *= i\n        }\n        for (i <-\
    \ 1L to n - 1) {\n            result *= i\n        }\n        result", "     \
    \   var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ i\n            for (j <- 1 to i - 1) result *= j\n        }\n        result",
  "        if (n == 0) 1\n        else n * specialFactorial(n - 1)", "        if (n\
    \ == 0) 1\n        else n * specialFactorial(n - 1)", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= i\n            result\
    \ *= factorial(i - 1)\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) result *= factorial(i)\n        result", "  \
    \      def factorial(n : Long) : Long = {\n            if (n == 0) 1\n       \
    \     else n * factorial(n - 1)\n        }\n        def specialFactorial(n : Long,\
    \ acc : Long) : Long = {\n            if (n == 0) acc\n            else specialFactorial(n\
    \ - 1, acc * factorial(n))\n        }\n        specialFactorial(n, 1)", "    \
    \    var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ i\n            for (j <- 1 to i - 1) result *= j\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) result *= i\n        for\
    \ (i <- 1 to n.toInt - 1) result *= i\n        result", "        var result =\
    \ 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n           \
    \ result *= i\n        }\n        result", "        var result = 1L\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n     \
    \   result", "        var result = 1L\n        for (i <- n to 1 by -1) {\n   \
    \         result *= i\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= factorial(i)\n        }\n        result", "       \
    \ var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n\
    \            result *= factorial(i - 1)\n        }\n        result", "       \
    \ var result = 1L\n        for (i <- 1L to n) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1L to\
    \ n) {\n            result *= i\n            result *= i - 1\n        }\n    \
    \    result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n  \
    \          result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= (i - 1)\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        def factorial(n : Long) : Long = if (n == 0)\
    \ 1 else n * factorial(n - 1)\n        def specialFactorial(n : Long, acc : Long)\
    \ : Long = if (n == 0) acc else specialFactorial(n - 1, acc * factorial(n))\n\
    \        specialFactorial(n, 1)", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= specialFactorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            for (j <- 1 to i - 1)\
    \ result *= j\n        }\n        result", "        var result = 1L\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n     \
    \   result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n   \
    \         result *= i\n            result *= factorial(i - 1)\n        }\n   \
    \     result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- n to 1 by -1) {\n\
    \            result *= i\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= i\n            result\
    \ *= factorial(i - 1)\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        def factorial(n : Long) : Long = {\n        \
    \    if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n       \
    \ if (n == 0) 1\n        else factorial(n) * specialFactorial(n - 1)", "     \
    \   def factorial(n : Long) : Long = {\n            if (n == 0) 1\n          \
    \  else n * factorial(n - 1)\n        }\n        if (n == 0) 1\n        else factorial(n)\
    \ * specialFactorial(n - 1)", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= i\n            for (j <- 1 to i - 1) result\
    \ *= j\n        }\n        result", "        var product = 1L\n        for (i\
    \ <- 1 to n.toInt) {\n            product *= i\n            product *= factorial(i\
    \ - 1)\n        }\n        product", "        def factorial(n : Long) : Long =\
    \ {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n      \
    \  }\n        if (n == 0) 1\n        else factorial(n) * specialFactorial(n -\
    \ 1)", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n         \
    \   result *= factorial(i)\n        }\n        result", "        if (n == 0) 1\n\
    \        else n * specialFactorial(n - 1)", "        var f = 1L\n        for (i\
    \ <- 1 to n.toInt) f *= i\n        for (i <- 1 to n.toInt - 1) f *= i\n      \
    \  for (i <- 1 to n.toInt - 2) f *= i\n        f", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        def factorial(n : Long) : Long = {\n        \
    \    if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n       \
    \ if (n == 0) 1\n        else factorial(n) * specialFactorial(n - 1)", "     \
    \   var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ i\n            result *= i - 1\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result\
    \ *= specialFactorial(i - 1)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= i\n            result *= factorial(i - 1)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= i\n            result *= factorial(i - 1)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= i - 1\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var factorials = new Array[Long](n.toInt\
    \ + 1)\n        factorials(0) = 1\n        for (i <- 1 to n.toInt) factorials(i)\
    \ = factorials(i - 1) * i\n        factorials.reduceLeft(_ * _)", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n  \
    \          result *= factorial(i - 1)\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- n to\
    \ 1 by -1) {\n            result *= i\n        }\n        result", "        if\
    \ (n == 0) 1\n        else n * specialFactorial(n - 1)", "        var result =\
    \ 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n           \
    \ result *= i - 1\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            for (j <- 1 to i - 1) result *= j\n    \
    \    }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= i\n            result *= factorial(i - 1)\n       \
    \ }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= i\n            result *= factorial(i - 1)\n       \
    \ }\n        result", '        if (n == 0) 1 else n * specialFactorial(n - 1)',
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            for (j <- 1 to i - 1) result *= j\n        }\n        result",
  "        if (n == 0) 1\n        else n * specialFactorial(n - 1)", "        if (n\
    \ == 0) 1\n        else n * specialFactorial(n - 1)", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= i\n            for (j\
    \ <- 1 to i - 1) result *= j\n        }\n        result", '        if (n == 0)
    1 else n * specialFactorial(n - 1)', "        var result = 1L\n        for (i\
    \ <- 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        if (n == 0) return 1\n        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= i\n        }\n\
    \        result", "        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)", "        def factorial(n : Long) : Long = {\n            if (n == 0)\
    \ 1\n            else n * factorial(n - 1)\n        }\n        if (n == 0) 1\n\
    \        else n * specialFactorial(n - 1)", "        var result = 1L\n       \
    \ for (i <- 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var res = 1L\n        for (i <- 1\
    \ to n.toInt) {\n            res *= i\n            res *= factorial(i - 1)\n \
    \       }\n        res", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= factorial(i)\n        }\n        result", "       \
    \ val factorials = new Array[Long](n.toInt + 1)\n        factorials(0) = 1\n \
    \       for (i <- 1 to n.toInt) factorials(i) = factorials(i - 1) * i\n      \
    \  var result = 1L\n        for (i <- 0 to n.toInt) result *= factorials(i)\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= i - 1\n        }\n        result",
  "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n\
    \            result *= i - 1\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def specialFactorial(n\
    \ : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else\
    \ specialFactorial(n - 1, acc * factorial(n))\n        }\n        specialFactorial(n,\
    \ 1)", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n         \
    \   result *= factorial(i)\n        }\n        result", "        var result =\
    \ 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n           \
    \ for (j <- 1 to i - 1) result *= j\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= i\n            result *= i\n        }\n  \
    \      result", "        var result = 1L\n        for (i <- n to 1 by -1) {\n\
    \            result *= i\n        }\n        for (i <- n - 1 to 1 by -1) {\n \
    \           result *= i\n        }\n        result", "        var result = 1L\n\
    \        for (i <- n to 1 by -1) {\n            result *= i\n        }\n     \
    \   for (i <- n - 1 to 1 by -1) {\n            result *= i\n        }\n      \
    \  result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n    \
    \        result *= factorial(i)\n        }\n        result", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) return 1\n            return n *\
    \ factorial(n - 1)\n        }\n        def specialFactorial(n : Long, acc : Long)\
    \ : Long = {\n            if (n == 0) return acc\n            return specialFactorial(n\
    \ - 1, acc * factorial(n))\n        }\n        return specialFactorial(n, 1)",
  "        var result = 1L\n        for (i <- 1 to n.toInt) result *= factorial(i)\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= specialFactorial(i - 1)\n    \
    \    }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= i\n            result *= factorial(i - 1)\n       \
    \ }\n        result", "        def factorial(n : Long) : Long = {\n          \
    \  if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        if\
    \ (n == 0) 1\n        else factorial(n) * specialFactorial(n - 1)", "        var\
    \ result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= i\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   for (j <- 1 to i - 1) result *= j\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- n to 1 by -1) {\n            result *= i\n  \
    \      }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= factorial(i)\n        }\n        result", "       \
    \ var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n\
    \            result *= specialFactorial(i - 1)\n        }\n        result", " \
    \       var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result",
  "        def factorial(n : Long) : Long = if (n == 0) 1 else n * factorial(n - 1)\n\
    \        (1 to n.toInt).map(factorial(_)).product", "        var result = 1L\n\
    \        for (i <- 1L to n) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var product = 1L\n        for (i <- 1L to n) {\n  \
    \          product *= i\n        }\n        var result = product\n        for\
    \ (i <- 1L to n - 1) {\n            result *= product\n            product /=\
    \ i\n        }\n        result", "        var result = 1L\n        for (i <- 1\
    \ to n.toInt) {\n            result *= i\n            result *= factorial(i -\
    \ 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1L\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= i\n            result *= i - 1\n    \
    \    }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= i\n            for (j <- 1 to i - 1) result *= j\n\
    \        }\n        result", "        var result = 1L\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1L\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= specialFactorial(i - 1)\n    \
    \    }\n        result", "        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n       \
    \     result *= factorial(i)\n        }\n        result", "        if (n == 0)\
    \ return 1\n        var result = 1L\n        for (i <- 1L to n) {\n          \
    \  result *= i\n            result *= specialFactorial(i - 1)\n        }\n   \
    \     result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           result *= factorial(i)\n        }\n        result", "        def factorial(n\
    \ : Long) : Long = if (n == 0) 1 else n * factorial(n - 1)\n        (1 to n.toInt).map(factorial(_)).reduce(_\
    \ * _)", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n       \
    \     result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)", "        var result = 1L\n        for (i <- 1L to n) {\n            result\
    \ *= i\n            result *= i - 1\n        }\n        result", "        var\
    \ result = 1L\n        for (i <- 1L to n) {\n            result *= i\n       \
    \     result *= i - 1\n        }\n        result", "        var result = 1L\n\
    \        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n     \
    \   }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= i\n            result *= i\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            for (j <- 1 to i - 1) result *= j\n        }\n        result",
  "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= i\n        }\n        result", "        var result\
    \ = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)", "        if (n\
    \ == 0) 1\n        else n * specialFactorial(n - 1)", "        var result = 1L\n\
    \        for (i <- n to 1 by -1) {\n            result *= i\n        }\n     \
    \   for (i <- n - 1 to 1 by -1) {\n            result *= i\n        }\n      \
    \  result", "        var result = 1L\n        for (i <- 1 to n.toInt) {\n    \
    \        result *= factorial(i)\n        }\n        result", "        if (n ==\
    \ 0) return 1\n        var result = 1L\n        for (i <- 1 to n.toInt) {\n  \
    \          result *= i\n            result *= specialFactorial(i - 1)\n      \
    \  }\n        result", "        var result = 1L\n        for (i <- 1 to n.toInt)\
    \ {\n            result *= factorial(i)\n        }\n        result"]
stop_tokens:
- "\n    }\n"
