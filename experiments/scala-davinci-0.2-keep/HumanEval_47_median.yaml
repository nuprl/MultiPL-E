name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median([3, 1, 2, 4,\
  \ 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n   \
  \ def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val sorted = l.sorted\n        val len = sorted.length\n  \
    \      if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n /\
    \ 2)", "        val sorted = l.sorted\n        val n = sorted.length\n       \
    \ if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val n = l.length\n        val sorted = l.sorted\n        if\
    \ (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n   \
    \     if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length\
    \ / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val n = l.length\n        val m = n / 2\n        if (n % 2\
    \ == 0) (l(m - 1) + l(m)) / 2.0f\n        else l(m).toFloat", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val n = l.length\n    \
    \    val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) (sorted(length / 2) + sorted(length\
    \ / 2 - 1)) / 2.0f\n        else sorted(length / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) +\
    \ sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n       \
    \ } else {\n            sorted(len / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n \
    \           (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) {\n \
    \           (sorted(size / 2) + sorted(size / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(size / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) +\
    \ sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)", "        val sorted\
    \ = l.sorted\n        val length = sorted.length\n        if (length % 2 == 0)\
    \ {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n \
    \       } else {\n            sorted(length / 2).toFloat\n        }", "      \
    \  val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n   \
    \         (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val len = sorted.length\n  \
    \      if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n    \
    \    else sorted(len / 2)", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) (sorted(length / 2) + sorted(length\
    \ / 2 - 1)) / 2.0f\n        else sorted(length / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        if (sorted.length %\
    \ 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2\
    \ - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val n = l.length\n        val m = n / 2\n        if (n % 2\
    \ == 0) (l(m - 1) + l(m)) / 2.0f\n        else l(m).toFloat", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n       \
    \ } else {\n            sorted(len / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val length = sorted.length\n        if (length % 2 == 0)\
    \ {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n \
    \       } else {\n            sorted(length / 2).toFloat\n        }", "      \
    \  val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val n = l.length\n        if (n % 2 == 0)\
    \ {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n        \
    \    l(n / 2)\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val n = l.length\n        val sorted = l.sorted\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sortedList = l.sorted\n        val len = sortedList.length\n\
    \        if (len % 2 == 0) {\n            (sortedList(len / 2) + sortedList(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val size = sorted.size\n\
    \        if (size % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2\
    \ - 1)).toFloat / 2\n        } else {\n            sorted(size / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n  \
    \      else sorted(len / 2)", "        val sorted = l.sorted\n        val n =\
    \ sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) /\
    \ 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n        val\
    \ len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len /\
    \ 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 -\
    \ 1)) / 2.0f\n        else sorted(len / 2)", "        val sorted = l.sorted\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        if (sorted.length % 2 ==\
    \ 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n     \
    \   }", "        val sorted = l.sorted\n        val len = sorted.length\n    \
    \    if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n        \
    \    (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val n = l.length\n        val s = l.sorted\n        if (n % 2 == 0) (s(n\
    \ / 2) + s(n / 2 - 1)) / 2.0f\n        else s(n / 2)", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) +\
    \ sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val length = sorted.length\n        if (length %\
    \ 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n /\
    \ 2)", "        val sorted = l.sorted\n        val len = sorted.length\n     \
    \   if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n       \
    \ else sorted(len / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n          \
    \  (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n \
    \       } else {\n            sorted(sorted.length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length\
    \ / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val size = sorted.size\n        if (size\
    \ % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat /\
    \ 2\n        } else {\n            sorted(size / 2).toFloat\n        }", "   \
    \     val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val len = sorted.length\n  \
    \      if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        val size = sorted.size\n        if (size\
    \ % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat /\
    \ 2\n        } else {\n            sorted(size / 2).toFloat\n        }", "   \
    \     val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val length = sorted.length\n        if (length %\
    \ 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val length = sorted.length\n        if\
    \ (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n /\
    \ 2)", "        val sorted = l.sorted\n        val len = sorted.length\n     \
    \   if (len % 2 == 0) {\n            val a = sorted(len / 2 - 1)\n           \
    \ val b = sorted(len / 2)\n            (a + b).toFloat / 2\n        } else {\n\
    \            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n        \
    \    (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len\
    \ / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len\
    \ / 2)", "        val sorted = l.sorted\n        val size = sorted.size\n    \
    \    if (size % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(size / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length\
    \ / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n   \
    \     if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) (sorted(length / 2) + sorted(length / 2 - 1)) / 2.0f\n        else\
    \ sorted(length / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val size = sorted.size\n   \
    \     if (size % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(size / 2).toFloat\n  \
    \      }", "        val sorted = l.sorted\n        val n = sorted.length\n   \
    \     if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) (sorted(length / 2) + sorted(length / 2 - 1)) / 2.0f\n        else\
    \ sorted(length / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val len = sorted.length\n  \
    \      if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n    \
    \    else sorted(len / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n  \
    \      else sorted(len / 2)", "        val sorted = l.sorted\n        val n =\
    \ sorted.length\n        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n       \
    \ } else {\n            sorted(len / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n \
    \           (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val size =\
    \ sorted.size\n        if (size % 2 == 0) {\n            (sorted(size / 2) + sorted(size\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(size / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sortedList = l.sorted\n        val length = sortedList.length\n\
    \        if (length % 2 == 0) {\n            (sortedList(length / 2) + sortedList(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val size = sorted.size\n        if (size %\
    \ 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(size / 2).toFloat\n        }", "       \
    \ val sorted = l.sorted\n        val size = sorted.size\n        if (size % 2\
    \ == 0) {\n            val mid = size / 2\n            (sorted(mid - 1) + sorted(mid))\
    \ / 2.0f\n        } else {\n            sorted(size / 2)\n        }", "      \
    \  val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val size = sorted.size\n        if (size\
    \ % 2 == 0) {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat /\
    \ 2\n        } else {\n            sorted(size / 2).toFloat\n        }", "   \
    \     val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n        \
    \    (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) (sorted(length / 2) + sorted(length / 2 - 1)) / 2.0f\n        else\
    \ sorted(length / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) +\
    \ sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0)\
    \ {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(size / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) (sorted(size\
    \ / 2) + sorted(size / 2 - 1)) / 2.0f\n        else sorted(size / 2)", "     \
    \   val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len\
    \ / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n   \
    \     if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(len / 2).toFloat\n        }", "  \
    \      val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n       \
    \ } else {\n            sorted(len / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2) + sorted(length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            (sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ (sorted(len / 2) + sorted(len / 2 - 1)) / 2.0f\n        else sorted(len / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val n = l.length\n        if (n % 2 == 0) {\n            (l(n / 2 - 1)\
    \ + l(n / 2)) / 2.0f\n        } else {\n            l(n / 2)\n        }", "  \
    \      val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0)\
    \ {\n            (sorted(size / 2) + sorted(size / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(size / 2).toFloat\n        }"]
stop_tokens:
- "\n    }\n"
