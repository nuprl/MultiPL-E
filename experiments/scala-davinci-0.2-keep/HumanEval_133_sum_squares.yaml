name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3] the output should\
  \ be 14\n    // For lst = [1,4,9] the output should be 98\n    // For lst = [1,3,5,7]\
  \ the output should be 84\n    // For lst = [1.4,4.2,0] the output should be 29\n\
  \    // For lst = [-2.4,1,1] the output should be 6\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        // your code here\n        return 0", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       return sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        var sum = 0L\n        for (i <- lst) {\n            sum\
    \ += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code here\n        var sum = 0L\n        for (i <- lst) {\n  \
    \          sum += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', "        // your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        val lst2 = lst.map(x => ceil(x).toLong)\n\
    \        lst2.map(x => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        var sum = 0L\n        for (i <- lst) {\n            sum\
    \ += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       return sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n\
    \        for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n\
    \        }\n        return sum", "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // your code goes here\n   \
    \     var result : Long = 0\n        for (i <- lst) {\n            result += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return result", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // your code here\n        return 0", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       return sum", "        var sum = 0L\n        for (x <- lst) {\n       \
    \     sum += ceil(x).toLong * ceil(x).toLong\n        }\n        return sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        return lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x => x * x).sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       var sum = 0.0\n        for (i <- lst) {\n            sum += ceil(i) *\
    \ ceil(i)\n        }\n        return sum.toLong", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        var sum = 0L\n        for (i <- lst) {\n            sum\
    \ += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       return sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', "        // your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code goes here\n        return 0", "        // your code goes\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // your code here\n        return 0", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        return lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", "        // your code goes\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x => x * x).sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        return lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        var sum = 0L\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       return sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        val lst2 = lst.map(x => ceil(x).toLong)\n        lst2.map(x => x * x).sum",
  '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       var sum = 0L\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        var sum = 0L\n        for (i <- lst) {\n            sum\
    \ += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum", "      \
    \  var sum = 0L\n        for (i <- lst) sum += ceil(i).toLong * ceil(i).toLong\n\
    \        return sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code goes here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum']
stop_tokens:
- "\n    }\n"
