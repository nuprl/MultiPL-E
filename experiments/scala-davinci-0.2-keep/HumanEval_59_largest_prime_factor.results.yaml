language: scala
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i * i <= n) {\n            if (n % i\
    \ == 0) {\n                max = i\n                while (n % i == 0) n /= i\n\
    \            }\n            i += 1\n        }\n        if (n > 1) max = n\n  \
    \      max\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpceoctllp.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var m = n\n        while (m != 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i * i <= x) {\n            while (x % i ==\
    \ 0) {\n                x /= i\n            }\n            i += 1\n        }\n\
    \        x\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm9c8oav0.scala:22)\n\tat Problem.main(tmpm9c8oav0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= sqrt(m)) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m % p == 0) {\n            m /= p\n      \
    \  }\n        p = 3L\n        while (m > 1) {\n            while (m % p == 0)\
    \ {\n                m /= p\n            }\n            p += 2\n        }\n  \
    \      p -= 2\n        return p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i * i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                while (nn % i == 0) nn /= i\n\
    \            }\n            i += 1\n        }\n        if (nn == 1) i else nn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q2_l1tn.scala:23)\n\tat Problem.main(tmp1q2_l1tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var n2 = n\n        while (i <= n2) {\n            if (n2 % i == 0) {\n\
    \                n2 /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var largest = 1L\n        while (i * i <= n) {\n            if (n % i\
    \ == 0) {\n                largest = i\n                while (n % i == 0) n /=\
    \ i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpziks0esg.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n\
    \ % i == 0) {\n                largest = i\n                while (n % i == 0)\
    \ n /= i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphhi4qlpz.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var m = n\n        while (m % p == 0) {\n            m /= p\n       \
    \ }\n        p += 1\n        while (p * p <= m) {\n            while (m % p ==\
    \ 0) {\n                m /= p\n            }\n            p += 2\n        }\n\
    \        if (m == 1) p - 2 else m\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            }\n  \
    \          else i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl8qzmuio.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrwht2sl.scala:23)\n\tat Problem.main(tmptrwht2sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var factor = 2L\n        while (m > 1) {\n            while (m % factor\
    \ == 0) {\n                m /= factor\n            }\n            factor += 1\n\
    \        }\n        factor - 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                i -= 1\n            }\n         \
    \   i += 1\n        }\n        m\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i * i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                while (nn % i == 0) nn /= i\n\
    \            }\n            i += 1\n        }\n        if (nn == 1) i else nn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q2_l1tn.scala:23)\n\tat Problem.main(tmp1q2_l1tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsj8lp7yt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var result = 1L\n        while (p * p <= n) {\n            if (n % p\
    \ == 0) {\n                result = p\n                while (n % p == 0) n /=\
    \ p\n            }\n            p += 1\n        }\n        if (n > 1) result =\
    \ n\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmk2plae.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % p == \e[31m0\e\
    [0m) n /= p\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                if (m == 1) return i\n            }\n\
    \            else i += 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var result = n\n        while (factor <= result) {\n         \
    \   if (result % factor == 0) {\n                result /= factor\n          \
    \      while (result % factor == 0) result /= factor\n            }\n        \
    \    factor += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppy9dg95e.scala:22)\n\tat Problem.main(tmppy9dg95e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var m = n\n        while (m != 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8arh855b.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var n2 = n\n        while (n2 > 1) {\n            if (n2 % factor\
    \ == 0) {\n                n2 /= factor\n                while (n2 % factor ==\
    \ 0) n2 /= factor\n            }\n            factor += 1\n        }\n       \
    \ factor\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsbut_m3h.scala:22)\n\tat Problem.main(tmpsbut_m3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5an4ixcm.scala:23)\n\tat Problem.main(tmp5an4ixcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1frkkst.scala:19)\n\tat Problem.main(tmpg1frkkst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, factor : Long) : Long = {\n            if (n == 1) factor\n        \
    \    else if (n % factor == 0) largestPrimeFactor(n / factor, factor)\n      \
    \      else largestPrimeFactor(n, factor + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                if (isPrime(i)) max = i\n                if (isPrime(n\
    \ / i)) max = n / i\n            }\n            i += 1\n        }\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42gldcst.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isPrime(i)) max = i\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp42gldcst.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                \e[33mif\e[0m (isPrime(n / i)) max = n / i\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= sqrt(m)) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsj8lp7yt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i * i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                while (nn % i == 0) nn /= i\n\
    \            }\n            i += 1\n        }\n        if (nn == 1) i else nn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q2_l1tn.scala:23)\n\tat Problem.main(tmp1q2_l1tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            }\n  \
    \          else i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl8qzmuio.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 1L\n        var i = 2L\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i\n                while (n % i == 0) n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wbigi96.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n == 1) p\n            else if\
    \ (n % p == 0) largestPrimeFactor(n / p, p)\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8arh855b.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkg1q6vh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                if (isPrime(i)) max = i\n                if (isPrime(n\
    \ / i)) return n / i\n            }\n            i += 1\n        }\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfbxpycw.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isPrime(i)) max = i\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjfbxpycw.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                \e[33mif\e[0m (isPrime(n / i)) \e[33mreturn\e[0m n / i\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i\n                while (n % i == 0) n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4y1m5a9z.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n\
    \ % i == 0) {\n                largest = i\n                while (n % i == 0)\
    \ n /= i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphhi4qlpz.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1frkkst.scala:19)\n\tat Problem.main(tmpg1frkkst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5an4ixcm.scala:23)\n\tat Problem.main(tmp5an4ixcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            }\n  \
    \          else i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl8qzmuio.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var num = n\n        while (num % factor == 0) {\n           \
    \ num /= factor\n        }\n        factor = 3L\n        while (num > 1) {\n \
    \           while (num % factor == 0) {\n                num /= factor\n     \
    \       }\n            factor += 2\n        }\n        factor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcmcvtib.scala:25)\n\tat Problem.main(tmpbcmcvtib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        var n1 = n\n        while (i <= n1) {\n  \
    \          if (n1 % i == 0) {\n                largest = i\n                n1\
    \ /= i\n                while (n1 % i == 0) n1 /= i\n            }\n         \
    \   i += 1\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= sqrt(nn)) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                i -= 1\n            }\n     \
    \       i += 1\n        }\n        nn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                if (m == 1) return i\n            }\n\
    \            else i += 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var k = 2L\n        while (m > 1) {\n            if (m % k == 0) {\n\
    \                m /= k\n            } else {\n                k += 1\n      \
    \      }\n        }\n        k\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1frkkst.scala:19)\n\tat Problem.main(tmpg1frkkst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var m = n\n        var i = 2L\n        while (i <= m) {\n    \
    \        if (m % i == 0) {\n                result = i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i\n                n /= i\n           \
    \ }\n            else i += 1\n        }\n        if (n > 1) largest = n\n    \
    \    largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbwgcw6bf.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i\n                while (n % i == 0) n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) largest\
    \ = n\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4y1m5a9z.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mwhile\e[0m (n % i == \e[31m0\e\
    [0m) n /= i\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                   value /= is not a member of Long - did you mean\
    \ n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= sqrt(m)) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                while (m % i == 0) m /= i\n  \
    \          }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_cijr2wa.scala:23)\n\tat Problem.main(tmp_cijr2wa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                i -= 1\n            }\n         \
    \   i += 1\n        }\n        m\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 1L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n\
    \ % i == 0) {\n                if (isPrime(i)) largest = i\n                if\
    \ (isPrime(n / i)) return n / i\n            }\n            i += 1\n        }\n\
    \        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6raxf8x.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isPrime(i)) largest =\
    \ i\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp6raxf8x.scala:15:20 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (isPrime(n / i)) \e[33mreturn\e\
    [0m n / i\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsj8lp7yt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ -1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                max = i\n                n /= i\n            }\n     \
    \       else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdq5qq5f3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i <= sqrt(nn)) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                i -= 1\n            }\n     \
    \       i += 1\n        }\n        nn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i * i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                while (nn % i == 0) nn /= i\n\
    \            }\n            i += 1\n        }\n        nn\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6661up5.scala:23)\n\tat Problem.main(tmpd6661up5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactorRec(n\
    \ : Long, i : Long) : Long = {\n            if (i > sqrt(n)) n\n            else\
    \ if (n % i == 0) largestPrimeFactorRec(n / i, i)\n            else largestPrimeFactorRec(n,\
    \ i + 1)\n        }\n        largestPrimeFactorRec(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkg1q6vh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrwht2sl.scala:23)\n\tat Problem.main(tmptrwht2sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                if (isPrime(i)) max = i\n                if (isPrime(n\
    \ / i)) max = n / i\n            }\n            i += 1\n        }\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42gldcst.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isPrime(i)) max = i\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp42gldcst.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                \e[33mif\e[0m (isPrime(n / i)) max = n / i\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8arh855b.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var d = 2\n        while (d <= x) {\n            if (x % d == 0) {\n\
    \                x /= d\n            } else {\n                d += 1\n      \
    \      }\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var x = n\n        var i = 2L\n        while (i <= x) {\n      \
    \      if (x % i == 0) {\n                max = i\n                x /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  max\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= sqrt(x)) {\n            if (x % i ==\
    \ 0) {\n                x /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var p = 2L\n        while (m % p == 0) {\n            m /= p\n      \
    \  }\n        p += 1\n        while (m > 1) {\n            while (m % p == 0)\
    \ {\n                m /= p\n            }\n            p += 2\n        }\n  \
    \      p - 2\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var nn = n\n        while (nn % factor == 0) {\n            nn\
    \ /= factor\n        }\n        factor = 3L\n        while (nn > 1) {\n      \
    \      while (nn % factor == 0) {\n                nn /= factor\n            }\n\
    \            factor += 2\n        }\n        factor -= 2\n        factor\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsj8lp7yt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrwht2sl.scala:23)\n\tat Problem.main(tmptrwht2sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var nn = n\n        while (nn % p == 0) {\n            nn /= p\n    \
    \    }\n        p += 1\n        while (p * p <= nn) {\n            while (nn %\
    \ p == 0) {\n                nn /= p\n            }\n            p += 2\n    \
    \    }\n        if (nn == 1) p - 2 else nn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var nn = n\n        while (nn > 1) {\n            if (nn % factor\
    \ == 0) {\n                nn /= factor\n                while (nn % factor ==\
    \ 0) {\n                    nn /= factor\n                }\n            }\n \
    \           factor += 1\n        }\n        factor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdbgrd01.scala:24)\n\tat Problem.main(tmptdbgrd01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 1L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsj8lp7yt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var factor\
    \ = 2L\n        var nn = n\n        while (nn > 1) {\n            if (nn % factor\
    \ == 0) {\n                nn /= factor\n                while (nn % factor ==\
    \ 0) nn /= factor\n            }\n            factor += 1\n        }\n       \
    \ factor\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4dpkii9.scala:22)\n\tat Problem.main(tmpw4dpkii9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0)\
    \ {\n                if (isPrime(i)) largest = i\n                if (isPrime(n\
    \ / i)) largest = n / i\n            }\n        }\n        largest\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnw2k3al.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m (isPrime(i)) largest =\
    \ i\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxnw2k3al.scala:14:20 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isPrime(n / i)) largest = n\
    \ / i\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                i -= 1\n            }\n         \
    \   i += 1\n        }\n        m\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                x /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkg1q6vh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var nn = n\n        while (i * i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                while (nn % i == 0) nn /= i\n\
    \            }\n            i += 1\n        }\n        if (nn == 1) i else nn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q2_l1tn.scala:23)\n\tat Problem.main(tmp1q2_l1tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var max =\
    \ 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyib7fgp5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var i = 2L\n        var nn = n\n        while (i <= nn) {\n  \
    \          if (nn % i == 0) {\n                result = i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrwht2sl.scala:23)\n\tat Problem.main(tmptrwht2sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val primes\
    \ = new PrimeSieve(sqrt(n).toInt).getPrimes\n        var largest = 0L\n      \
    \  for (p <- primes) {\n            if (n % p == 0) largest = p\n        }\n \
    \       largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaldasnz7.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeSieve\e[0m(sqrt(n).toInt).getPrimes\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: type PrimeSieve\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var i = 2L\n\
    \        var m = n\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                while (m % i == 0) m /= i\n     \
    \       }\n            i += 1\n        }\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5an4ixcm.scala:23)\n\tat Problem.main(tmp5an4ixcm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                i -= 1\n            }\n         \
    \   i += 1\n        }\n        m\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2L\n\
    \        var m = n\n        while (m > 1) {\n            if (m % p == 0) {\n \
    \               m /= p\n            } else {\n                p += 1\n       \
    \     }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        val primes\
    \ = new PrimeGenerator()\n        var p = primes.next\n        var m = n\n   \
    \     while (p * p <= m) {\n            while (m % p == 0) m /= p\n          \
    \  p = primes.next\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7vlmdblq.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeGenerator\e[0m()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: type\
    \ PrimeGenerator\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var x = n\n\
    \        var i = 2L\n        while (i * i <= x) {\n            while (x % i ==\
    \ 0) {\n                x /= i\n            }\n            i += 1\n        }\n\
    \        return x\n    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3_vbe71i.scala:22)\n\tat Problem.main(tmp3_vbe71i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var m = n\n\
    \        var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var largest\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq10nyeb3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        var result\
    \ = 0L\n        var i = 2L\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l)) ==\
    \ (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkg1q6vh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
    \    // 2\n    def largestPrimeFactor(n : Long) : Long = {\n        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1frkkst.scala:19)\n\tat Problem.main(tmpg1frkkst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805600
