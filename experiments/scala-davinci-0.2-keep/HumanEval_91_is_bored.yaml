name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue.\
  \ The sun is shining. I love this weather\")\n    // 1\n    def isBored(S : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     var count = 0L\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                var j = i\n                while (j < S.length &&\
    \ S(j) != '.' && S(j) != '?' && S(j) != '!') j += 1\n                if (j < S.length)\
    \ {\n                    count += 1\n                    i = j\n             \
    \   }\n            }\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val words = S.split(\"[.?!]\")\n        words.map(w => if\
    \ (w.startsWith(\"I\")) 1 else 0).sum", "        val words = S.split(\"[.?!]\"\
    )\n        words.count(_.startsWith(\"I\"))", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) {\n                count += 1\n            }\n        }\n        return count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(x => x.trim().startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(x\
    \ => x.startsWith(\"I\")).length", "        val sentences = S.split(\"[.?!]\"\
    )\n        var boredoms = 0\n        for (sentence <- sentences) {\n         \
    \   if (sentence.trim.startsWith(\"I\")) {\n                boredoms += 1\n  \
    \          }\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.map(s => s.trim).filter(s => s.startsWith(\"I\")).size",
  "        var count = 0\n        var i = 0\n        while (i < S.length) {\n    \
    \        if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        sentences.filter(s => s.startsWith(\"I\")).size",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        var count = 0\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", "        val words\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (word <- words) {\n\
    \            if (word.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var boredoms\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        var count = 0\n  \
    \      var words = S.split(\" \")\n        for (word <- words) {\n           \
    \ if (word.equals(\"I\")) count += 1\n        }\n        return count", "    \
    \    var count = 0\n        var i = 0\n        while (i < S.length) {\n      \
    \      if (S(i) == 'I') {\n                count += 1\n                while (i\
    \ < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n          \
    \  }\n            i += 1\n        }\n        count", "        val sentences =\
    \ S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim().startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.count(s => s.trim.startsWith(\"I\"))", "        var boredoms\
    \ = 0\n        var i = 0\n        while (i < S.length) {\n            if (S(i)\
    \ == 'I') {\n                boredoms += 1\n                while (i < S.length\
    \ && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n      \
    \      i += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        var boredoms = 0\n        var i\
    \ = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n      \
    \          boredoms += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        boredoms", "        var count = 0\n        var i = 0\n       \
    \ while (i < S.length) {\n            if (S(i) == 'I') {\n                count\
    \ += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var boredoms\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n\
    \        }\n        count", "        var count = 0\n        var i = 0\n      \
    \  while (i < S.length) {\n            if (S(i) == 'I') {\n                count\
    \ += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"\
    I\"))", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n \
    \       for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.count(s => s.trim.startsWith(\"I\"))", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"\
    I\"))", "        var count = 0\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val words = S.split(\"[.?!]\")\n        words.filter(word\
    \ => word.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       var count = 0\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                count += 1\n                while (i < S.length &&\
    \ S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        var boredoms = 0\n        var i\
    \ = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n      \
    \          boredoms += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        boredoms", "        val sentences = S.split(\"[.?!]\")\n     \
    \   var boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim().startsWith(\"I\")) boredoms += 1\n        }\n \
    \       boredoms", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim().startsWith(\"I\")) {\n                boredoms\
    \ += 1\n            }\n        }\n        boredoms", "        val sentences =\
    \ S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        var count = 0\n        var i = 0\n        while (i < S.length) {\n    \
    \        if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) count += 1\n        }\n     \
    \   count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.count(s => s.trim.startsWith(\"I\"))", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"\
    I\"))", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n \
    \       for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       var count = 0\n        var i = 0\n        while (i < S.length) {\n   \
    \         if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            else i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"I\"))", "     \
    \   val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n    \
    \            count += 1\n            }\n        }\n        return count", "  \
    \      val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(_.startsWith(\"I\")).size", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(_.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        val boredoms\
    \ = sentences.filter(s => s.trim().startsWith(\"I\"))\n        boredoms.length",
  "        var count = 0\n        var i = 0\n        while (i < S.length) {\n    \
    \        if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) count += 1\n        }\n     \
    \   count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => if (s.startsWith(\"I\")) 1 else 0).sum", "        var count = 0\n       \
    \ var i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n\
    \                count += 1\n                while (i < S.length && S(i) != '.'\
    \ && S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n \
    \       }\n        count", "        val sentences = S.split(\"[.?!]\")\n     \
    \   var boredoms = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"\
    I\"))", "        val words = S.split(\"[.?!]\")\n        words.filter(w => w.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        sentences.count(_.startsWith(\"\
    I\"))", "        val s = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (s(i).startsWith(\"I\")) count +=\
    \ 1\n        }\n        count", "        val words = S.split(\"[.?!]\")\n    \
    \    var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.map(s => if (s.trim.startsWith(\"I\")) 1 else 0).sum",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val words = S.split(\"[.?!]\")\n        words.filter(x =>\
    \ x.startsWith(\"I\")).size", "        val words = S.split(\"[.?!]\")\n      \
    \  words.map(x => if (x.trim().startsWith(\"I\")) 1 else 0).sum", "        val\
    \ sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n    \
    \            boredoms += 1\n            }\n        }\n        boredoms", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) boredoms\
    \ += 1\n        }\n        boredoms", "        var count = 0\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var cnt = 0L\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            cnt += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        cnt", "        val words = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (word <- words) {\n            if (word.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        var count = 0\n        var i = 0\n\
    \        while (i < S.length) {\n            if (S(i) == 'I') {\n            \
    \    count += 1\n                while (i < S.length && S(i) != '.' && S(i) !=\
    \ '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n \
    \       count", "        val words = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (word <- words) {\n            if (word.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.startsWith(\"I\")) count += 1\n        }\n        count", "      \
    \  val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val words = S.split(\"[.?!]\")\n\
    \        words.map(x => if (x.startsWith(\"I\")) 1 else 0).sum", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var count =\
    \ 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        var count = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n       \
    \ for (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) boredoms\
    \ += 1\n        }\n        boredoms", "        val s = S.split(\"[.?!]\")\n  \
    \      var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i).trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        var count = 0\n        var i = 0\n        while (i < S.length) {\n    \
    \        if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        var count = 0\n\
    \        var i = 0\n        while (i < S.length) {\n            if (S(i) == 'I')\
    \ {\n                count += 1\n                while (i < S.length && S(i) !=\
    \ '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n\
    \        }\n        count", "        val sentences = S.split(\"[.?!]\")\n    \
    \    var count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => s.trim).filter(s => s.startsWith(\"I\")).size", "        val sentences =\
    \ S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        var count = 0\n        for (s <- S.split(\"\
    \\\\.|\\\\?|\\\\!\")) {\n            if (s.trim.startsWith(\"I\")) count += 1\n\
    \        }\n        count", "        var count = 0\n        var i = 0\n      \
    \  while (i < S.length) {\n            if (S(i) == 'I') {\n                count\
    \ += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        var count = 0\n        for\
    \ (i <- 0 until S.length) {\n            if (S(i) == 'I') {\n                count\
    \ += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        val boredoms = sentences.filter(s => s.trim.startsWith(\"\
    I\"))\n        boredoms.length", "        var count = 0\n        var i = 0\n \
    \       while (i < S.length) {\n            if (S(i) == 'I') {\n             \
    \   count += 1\n                while (i < S.length && S(i) != '.' && S(i) !=\
    \ '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n \
    \       count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"\
    I\"))", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n \
    \       for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim().startsWith(\"I\")) boredoms += 1\n        }\n \
    \       boredoms", "        val sentences = S.split(\"[.?!]\")\n        sentences.map(s\
    \ => s.trim).filter(s => s.startsWith(\"I\")).size", "        val sentences =\
    \ S.split(\"[.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) boredoms += 1\n        }\n\
    \        boredoms", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        var count = 0\n        var isStart\
    \ = false\n        for (i <- 0 until S.length) {\n            if (S(i) == '.'\
    \ || S(i) == '?' || S(i) == '!') {\n                isStart = false\n        \
    \    } else if (S(i) == 'I') {\n                isStart = true\n            }\
    \ else if (isStart && S(i) == ' ') {\n                count += 1\n           \
    \     isStart = false\n            }\n        }\n        count", "        val\
    \ arr = S.split(\"[.?!]\")\n        var count = 0\n        for (s <- arr) {\n\
    \            if (s.trim().startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        var boredoms = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            boredoms += 1\n                while (i < S.length && S(i) != '.'\
    \ && S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n \
    \       }\n        boredoms", "        var count = 0\n        var i = 0\n    \
    \    while (i < S.length) {\n            if (S(i) == 'I') {\n                count\
    \ += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i)\
    \ != '!') i += 1\n            }\n            i += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.map(x => x.trim()).filter(x\
    \ => x.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\")\n\
    \        sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) count += 1\n        }\n     \
    \   count", "        val pattern = \"I\".r\n        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (pattern.findFirstIn(sentence) != None) count += 1\n        }\n   \
    \     count", "        var count = 0\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.startsWith(\"\
    I\")).size", "        var count = 0\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) {\n                boredoms\
    \ += 1\n            }\n        }\n        boredoms", "        val sentences =\
    \ S.split(\"[.?!]\")\n        var count = 0\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        var boredoms =\
    \ 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.map(s => if (s.startsWith(\"I\")) 1 else 0).sum",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var count =\
    \ 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0L\n       \
    \ val words = S.split(\"[.?!]\")\n        for (word <- words) {\n            if\
    \ (word.startsWith(\"I\")) count += 1\n        }\n        count", "        val\
    \ words = S.split(\"[.?!]\")\n        words.filter(x => x.startsWith(\"I\")).size",
  "        val words = S.split(\"[.?!]\")\n        words.filter(x => x.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var boredoms\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.startsWith(\"I\")).size", "        var\
    \ count = 0\n        val words = S.split(\"[.?!]\")\n        for (word <- words)\
    \ {\n            if (word.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val words = S.split(\"[.?!]\")\n \
    \       words.count(x => x.startsWith(\"I\"))", "        val words = S.split(\"\
    [.?!]\")\n        words.filter(x => x.startsWith(\"I\")).size", "        val sentences\
    \ = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\"\
    )).size", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        words.filter(x => x.trim().startsWith(\"I\")).size", "        var count\
    \ = 0L\n        var i = 0\n        while (i < S.length) {\n            if (S(i)\
    \ == 'I') {\n                count += 1\n                while (i < S.length &&\
    \ S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n         \
    \   i += 1\n        }\n        count", "        var count = 0\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size"]
stop_tokens:
- "\n    }\n"
