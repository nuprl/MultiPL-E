name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var collatz = List[Long]()\n        var cur = n\n        while\
    \ (cur != 1) {\n            collatz = cur :: collatz\n            if (cur % 2\
    \ == 0) cur /= 2\n            else cur = 3 * cur + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted", "        var\
    \ result = List[Long]()\n        var m = n\n        while (m != 1) {\n       \
    \     if (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m\
    \ / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        def getOddCollatzHelper(n : Long, acc : List[Long]) : List[Long] = {\n\
    \            if (n == 1) acc\n            else if (n % 2 == 0) getOddCollatzHelper(n\
    \ / 2, acc)\n            else getOddCollatzHelper(3 * n + 1, n :: acc)\n     \
    \   }\n        getOddCollatzHelper(n, List()).sorted", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var oddCollatz =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            if (m\
    \ % 2 == 1) oddCollatz = m :: oddCollatz\n            m = if (m % 2 == 0) m /\
    \ 2 else 3 * m + 1\n        }\n        oddCollatz = 1 :: oddCollatz\n        oddCollatz.sorted",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current != 1)\
    \ {\n            if (current % 2 == 1) result = current :: result\n          \
    \  current = if (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n\
    \        result = 1 :: result\n        result.reverse", "        var result =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            if (m\
    \ % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        result = 1 :: result\n        result", "       \
    \ var result = List[Long]()\n        var current = n\n        while (current !=\
    \ 1) {\n            if (current % 2 == 1) result = current :: result\n       \
    \     current = if (current % 2 == 0) current / 2 else current * 3 + 1\n     \
    \   }\n        result = 1 :: result\n        result.reverse", "        var collatz\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) collatz = m :: collatz\n            m = if (m % 2 == 0) m / 2 else\
    \ 3 * m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.reverse",
  "        var collatz = new ListBuffer[Long]\n        var x = n\n        while (x\
    \ != 1) {\n            collatz += x\n            if (x % 2 == 0) x /= 2\n    \
    \        else x = 3 * x + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        var result = List[Long]()\n        var x = n\n \
    \       while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n \
    \           x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        def getOddCollatzHelper(n : Long, lst\
    \ : List[Long]) : List[Long] = {\n            if (n == 1) lst\n            else\
    \ if (n % 2 == 0) getOddCollatzHelper(n / 2, lst)\n            else getOddCollatzHelper(3\
    \ * n + 1, n :: lst)\n        }\n        getOddCollatzHelper(n, List()).sorted",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else m * 3 + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current /= 2\n            else current = 3 * current + 1\n        }\n\
    \        result = 1 :: result\n        result.filter(x => x % 2 == 1).sorted",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", " \
    \       var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var collatz = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            collatz = m :: collatz\n            if (m % 2 == 0) m /= 2\n    \
    \        else m = 3 * m + 1\n        }\n        collatz = 1 :: collatz\n     \
    \   collatz.filter(x => x % 2 == 1)", "        def getOddCollatz(n : Long, acc\
    \ : List[Long]) : List[Long] = {\n            if (n == 1) acc\n            else\
    \ if (n % 2 == 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3\
    \ * n + 1, n :: acc)\n        }\n        getOddCollatz(n, List()).reverse"]
stop_tokens:
- "\n    }\n"
