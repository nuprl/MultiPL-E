name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
  ]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
  \    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello\
  \ world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\n    def selectWords(s : String, n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val vowels = List('a', 'e', 'i', 'o', 'u')\n        s.split(\"\
    \ \").filter(w => w.filter(c => !vowels.contains(c)).length == n).toList", " \
    \       // Fill in the code here\n        return List()", "        // Write your\
    \ code here\n        val consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z')\n        val words\
    \ = s.split(\" \").toList\n        words.filter(w => w.filter(consonants.contains(_)).length\
    \ == n)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.split(\"\
    \ \").filter(x => x.filter(!vowels.contains(_)).length == n).toList", "      \
    \  val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \"\
    ).toList\n        words.filter(word => word.filter(c => !vowels.contains(c)).length\
    \ == n)", "        // Fill in the code here\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   if (countConsonants(word) == n) {\n                result = result :+ word\n\
    \            }\n        }\n        result", "        // Fill in the code here\n\
    \        null", "        // Fill in the code here\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   var count = 0\n            for (c <- word) {\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') count += 1\n            }\n\
    \            if (count == n) result = word :: result\n        }\n        result",
  "        // Fill in the code here\n        var result = List[String]()\n       \
    \ var words = s.split(\" \")\n        for (word <- words) {\n            var count\
    \ = 0\n            for (char <- word) {\n                if (char != 'a' && char\
    \ != 'e' && char != 'i' && char != 'o' && char != 'u') count += 1\n          \
    \  }\n            if (count == n) result = word :: result\n        }\n       \
    \ result", "        // Fill in the code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        words.filter(word\
    \ => word.count(c => !vowels.contains(c)) == n).toList", "        // Fill in the\
    \ code here\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words\
    \ = s.split(\" \")\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var count = 0\n            for (c <- word) {\n    \
    \            if (!vowels.contains(c)) count += 1\n            }\n            if\
    \ (count == n) result += word\n        }\n        result.toList", "        //\
    \ Write your code here\n        var result = List[String]()\n        for (word\
    \ <- s.split(\" \")) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') count += 1\n            }\n            if (count == n) result = word ::\
    \ result\n        }\n        result", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        s.split(\" \").filter(x => x.filter(!vowels.contains(_)).length\
    \ == n).toList", "        // Fill in the code here\n        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n        words.filter(w\
    \ => w.count(c => !vowels.contains(c)) == n).toList", "        // Fill in the\
    \ code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words\
    \ = s.split(\" \")\n        val result = words.filter(w => w.filter(c => !vowels.contains(c)).length\
    \ == n)\n        result.toList", "        // Fill in the code here\n        var\
    \ result = List[String]()\n        var words = s.split(\" \")\n        for (word\
    \ <- words) {\n            if (word.count(x => x.isLetter && !x.isVowel) == n)\
    \ {\n                result = result :+ word\n            }\n        }\n     \
    \   result", "        // Write your code here\n        return List()", "     \
    \   val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \").toList\n        words.filter(w => w.filter(c => !vowels.contains(c)).length\
    \ == n)", "        // Write your code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (!vowels.contains(c)) count += 1\n          \
    \  }\n            if (count == n) result = word :: result\n        }\n       \
    \ result", "        // Fill in the code here\n        val vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val words = s.split(\" \")\n        val\
    \ result = new ListBuffer[String]\n        for (word <- words) {\n           \
    \ var count = 0\n            for (char <- word) {\n                if (!vowels.contains(char.toString))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList"]
stop_tokens:
- "\n    }\n"
