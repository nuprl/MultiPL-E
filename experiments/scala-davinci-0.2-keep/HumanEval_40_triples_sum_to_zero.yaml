name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n\
  \    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\
  \    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n\
    \            var j = i + 1\n            var k = s.length - 1\n            while\
    \ (j < k) {\n                val sum = s(i) + s(j) + s(k)\n                if\
    \ (sum == 0) return true\n                else if (sum < 0) j += 1\n         \
    \       else k -= 1\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n     \
    \           if (s.contains(-i - j)) return true\n            }\n        }\n  \
    \      return false", "        if (l.length < 3) return false\n        val s =\
    \ l.sorted\n        for (i <- 0 until s.length - 2) {\n            var j = i +\
    \ 1\n            var k = s.length - 1\n            while (j < k) {\n         \
    \       if (s(i) + s(j) + s(k) == 0) return true\n                else if (s(i)\
    \ + s(j) + s(k) < 0) j += 1\n                else k -= 1\n            }\n    \
    \    }\n        return false", "        val s = l.sorted\n        for (i <- 0\
    \ until s.length - 2) {\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            for (j\
    \ <- s) {\n                if (s.contains(-i - j)) return true\n            }\n\
    \        }\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                if (s.contains(-i - j)) return\
    \ true\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n     \
    \           for (k <- s) {\n                    if (i + j + k == 0) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n      \
    \          if (s.contains(-i - j)) return true\n            }\n        }\n   \
    \     return false", "        val s = l.toSet\n        for (i <- s) {\n      \
    \      for (j <- s) {\n                if (s.contains(-i - j)) return true\n \
    \           }\n        }\n        return false", "        var map = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (map.contains(i)) map(i) += 1\n\
    \            else map += (i -> 1)\n        }\n        for (i <- l) {\n       \
    \     for (j <- l) {\n                if (i != j) {\n                    if (map.contains(-i\
    \ - j)) {\n                        if (i == -i - j && map(i) < 2) return false\n\
    \                        if (j == -i - j && map(j) < 2) return false\n       \
    \                 return true\n                    }\n                }\n    \
    \        }\n        }\n        return false", "        val n = l.length\n    \
    \    if (n < 3) return false\n        val s = l.sorted\n        for (i <- 0 until\
    \ n - 2) {\n            var j = i + 1\n            var k = n - 1\n           \
    \ while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n            \
    \    if (sum == 0) return true\n                else if (sum < 0) j += 1\n   \
    \             else k -= 1\n            }\n        }\n        return false", " \
    \       val h = l.toSet\n        for (i <- h; j <- h; k <- h) {\n            if\
    \ (i != j && j != k && i != k && i + j + k == 0) return true\n        }\n    \
    \    return false", "        val s = l.toSet\n        for (i <- s) {\n       \
    \     for (j <- s) {\n                if (s.contains(-i - j)) return true\n  \
    \          }\n        }\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false", "      \
    \  val h = new HashMap[Long, Int]\n        for (i <- l) {\n            if (h.contains(i))\
    \ h(i) += 1\n            else h(i) = 1\n        }\n        for (i <- l) {\n  \
    \          for (j <- l) {\n                if (i != j) {\n                   \
    \ val k = -i - j\n                    if (h.contains(k) && (k != i || h(i) > 1)\
    \ && (k != j || h(j) > 1)) return true\n                }\n            }\n   \
    \     }\n        return false", "        val s = l.toSet\n        for (i <- s)\
    \ {\n            for (j <- s) {\n                if (i != j && s.contains(-i -\
    \ j)) return true\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n          \
    \      if (s.contains(-i - j)) return true\n            }\n        }\n       \
    \ return false", "        var s = Set[Long]()\n        for (i <- l) {\n      \
    \      if (s.contains(-i)) return true\n            for (j <- s) {\n         \
    \       if (s.contains(i - j)) return true\n            }\n            s += i\n\
    \        }\n        return false", "        val s = l.sorted\n        for (i <-\
    \ 0 until s.length - 2) {\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false"]
stop_tokens:
- "\n    }\n"
