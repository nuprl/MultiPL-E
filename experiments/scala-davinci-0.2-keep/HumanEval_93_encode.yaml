name: HumanEval_93_encode
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a message, and encodes in such a \n    // way\
  \ that it swaps case of all letters, replaces all vowels in \n    // the message\
  \ with the letter that appears 2 places ahead of that \n    // vowel in the english\
  \ alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode('test')\n\
  \    // 'TGST'\n    // >>> encode('This is a message')\n    // 'tHKS KS C MGSSCGG'\n\
  \    def encode(message : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
  )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n\
  \    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is\
  \ a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw\
  \ WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val alphabet\
    \ = 'a' to 'z'\n        val alphabetMap = alphabet.zip(alphabet.tail :+ 'a').toMap\n\
    \        val messageMap = message.map(c => if (vowels.contains(c.toLower)) alphabetMap(c.toLower)\
    \ else c)\n        messageMap.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val alphabet2 = alphabet + alphabet\n        var result = \"\"\n   \
    \     for (i <- 0 until message.length) {\n            val c = message(i)\n  \
    \          if (vowels.contains(c.toLower)) {\n                result += alphabet2(alphabet.indexOf(c.toLower)\
    \ + 2)\n            } else {\n                result += c\n            }\n   \
    \     }\n        result", "        val vowels = \"aeiou\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetUpperMap\
    \ = alphabetUpper.zipWithIndex.toMap\n        val vowelsMap = vowels.zipWithIndex.toMap\n\
    \        val vowelsUpperMap = vowels.toUpperCase.zipWithIndex.toMap\n        val\
    \ result = new StringBuilder\n        for (c <- message) {\n            if (vowels.contains(c))\
    \ {\n                val index = vowelsMap(c)\n                val newIndex =\
    \ (index + 2) % vowels.length\n                result += vowels(newIndex)\n  \
    \          } else if (vowels.toUpperCase.contains(c)) {\n                val index\
    \ = vowelsUpperMap(c)\n                val newIndex = (index + 2) % vowels.length\n\
    \                result += vowels.toUpperCase()(newIndex)\n            } else\
    \ if (alphabet.contains(c)) {\n                val index = alphabetMap(c)\n  \
    \              val newIndex = (index + 2) % alphabet.length\n                result\
    \ += alphabet(newIndex)\n            } else if (alphabetUpper.contains(c)) {\n\
    \                val index = alphabetUpperMap(c)\n                val newIndex\
    \ = (index + 2) % alphabetUpper.length\n                result += alphabetUpper(newIndex)\n\
    \            } else {\n                result += c\n            }\n        }\n\
    \        result.toString", "        val vowels = \"aeiou\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val map = Map[Char, Char]()\n    \
    \    for (i <- 0 until alphabet.length) {\n            val c = alphabet(i)\n \
    \           val c2 = if (i == alphabet.length - 1) alphabet(0) else alphabet(i\
    \ + 1)\n            val c3 = if (i == alphabet.length - 2) alphabet(0) else if\
    \ (i == alphabet.length - 1) alphabet(1) else alphabet(i + 2)\n            map(c)\
    \ = if (vowels.contains(c)) c3 else c2\n        }\n        message.map(c => if\
    \ (c.isUpper) map(c.toLower).toUpper else map(c)).mkString", "        val vowels\
    \ = \"aeiou\"\n        val encoded = message.map(c => {\n            if (vowels.contains(c.toLower))\
    \ {\n                val index = vowels.indexOf(c.toLower)\n                val\
    \ next = (index + 2) % vowels.length\n                vowels(next).toUpper\n \
    \           } else {\n                c.toUpper\n            }\n        })\n \
    \       encoded.mkString", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val alphabet = 'a' to 'z'\n        val alphabetMap = alphabet.zip(alphabet.tail\
    \ :+ 'a').toMap\n        message.map(c => if (vowels.contains(c.toLower)) alphabetMap(c.toLower)\
    \ else c)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val alphabet\
    \ = ('a' to 'z').toList\n        val alphabetMap = alphabet.zipWithIndex.toMap\n\
    \        def encodeChar(c : Char) : Char = {\n            if (vowels.contains(c))\
    \ {\n                val index = alphabetMap(c)\n                alphabet((index\
    \ + 2) % alphabet.length)\n            } else {\n                if (c.isUpper)\
    \ c.toLower else c.toUpper\n            }\n        }\n        message.map(encodeChar)",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val encodeMap = Map('a'\
    \ -> 'c', 'e' -> 'g', 'i' -> 'k', 'o' -> 'q', 'u' -> 'y')\n        message.map(c\
    \ => if (vowels.contains(c.toLower)) encodeMap(c.toLower) else c).map(c => if\
    \ (c.isLower) c.toUpper else c.toLower).mkString", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val alphabet = ('a' to 'z').toList\n        val\
    \ alphabetMap = alphabet.zipWithIndex.toMap\n        val alphabetMap2 = alphabet.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val encodedMessage = message.map(x => {\n  \
    \          if (vowels.contains(x.toLower)) {\n                val index = alphabetMap(x.toLower)\n\
    \                val index2 = (index + 2) % alphabet.length\n                alphabetMap2(index2).toUpper\n\
    \            } else {\n                x.toUpper\n            }\n        })\n\
    \        encodedMessage", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val alphabet = ('a' to 'z').toList\n        val alphabetMap = alphabet.zipWithIndex.toMap\n\
    \        val encodedAlphabet = alphabet.map(c => if (vowels.contains(c)) alphabet((alphabetMap(c)\
    \ + 2) % alphabet.size) else c)\n        val encodedAlphabetMap = alphabet.zip(encodedAlphabet).toMap\n\
    \        message.map(c => if (c.isUpper) encodedAlphabetMap(c.toLower).toUpper\
    \ else encodedAlphabetMap(c)).mkString", "        val vowels = \"aeiou\"\n   \
    \     val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val alphabetMap =\
    \ alphabet.zipWithIndex.toMap\n        val vowelsMap = vowels.zipWithIndex.toMap\n\
    \        val encoded = new StringBuilder\n        for (c <- message) {\n     \
    \       if (c.isLetter) {\n                val letter = c.toLower\n          \
    \      if (vowels.contains(letter)) {\n                    val index = (vowelsMap(letter)\
    \ + 2) % vowels.length\n                    encoded += vowels(index).toUpper\n\
    \                } else {\n                    val index = (alphabetMap(letter)\
    \ + 2) % alphabet.length\n                    encoded += alphabet(index).toUpper\n\
    \                }\n            } else {\n                encoded += c\n     \
    \       }\n        }\n        encoded.toString", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val alphabet = ('a' to 'z').toList\n        def\
    \ encodeChar(c : Char) : Char = {\n            val index = alphabet.indexOf(c.toLower)\n\
    \            if (index == -1) c\n            else if (vowels.contains(c.toLower))\
    \ alphabet((index + 2) % alphabet.length)\n            else alphabet((index +\
    \ alphabet.length) % alphabet.length)\n        }\n        message.map(encodeChar)",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val alphabet = ('a'\
    \ to 'z').toList\n        val shift = 2\n        val shiftedAlphabet = alphabet.drop(shift)\
    \ ++ alphabet.take(shift)\n        val shiftedVowels = vowels.map(v => shiftedAlphabet(alphabet.indexOf(v)))\n\
    \        val shiftedVowelsMap = vowels.zip(shiftedVowels).toMap\n        val shiftedAlphabetMap\
    \ = alphabet.zip(shiftedAlphabet).toMap\n        message.map(c => if (vowels.contains(c))\
    \ shiftedVowelsMap(c) else shiftedAlphabetMap(c)).map(c => if (c.isUpper) c.toLower\
    \ else c.toUpper).mkString", "        val vowels = \"aeiou\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val alphabetMap = alphabet.zipWithIndex.toMap\n\
    \        val vowelsMap = vowels.zipWithIndex.toMap\n        val encoded = message.map(c\
    \ => {\n            if (vowels.contains(c.toLower)) {\n                val index\
    \ = vowelsMap(c.toLower)\n                val newIndex = (index + 2) % vowels.length\n\
    \                vowels(newIndex).toUpper\n            } else {\n            \
    \    val index = alphabetMap(c.toLower)\n                val newIndex = (index\
    \ + 2) % alphabet.length\n                alphabet(newIndex).toUpper\n       \
    \     }\n        })\n        encoded", "        val vowels = \"aeiou\"\n     \
    \   val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val alphabetMap = alphabet.zipWithIndex.toMap\n\
    \        val vowelsMap = vowels.zipWithIndex.toMap\n        val alphabetMap2 =\
    \ alphabet.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val vowelsMap2 =\
    \ vowels.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val result = new StringBuilder\n\
    \        for (c <- message) {\n            if (vowels.contains(c.toLower)) {\n\
    \                val index = vowelsMap(c.toLower)\n                val newIndex\
    \ = (index + 2) % 5\n                result.append(vowelsMap2(newIndex).toUpper)\n\
    \            } else {\n                val index = alphabetMap(c.toLower)\n  \
    \              val newIndex = (index + 2) % 26\n                result.append(alphabetMap2(newIndex).toUpper)\n\
    \            }\n        }\n        result.toString", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val alphabet = ('a' to 'z').toList\n        def\
    \ encodeChar(c : Char) : Char = {\n            if (vowels.contains(c)) {\n   \
    \             val index = alphabet.indexOf(c)\n                val newIndex =\
    \ (index + 2) % alphabet.length\n                alphabet(newIndex)\n        \
    \    } else {\n                c\n            }\n        }\n        message.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).map(encodeChar)", "        val vowels\
    \ = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n       \
    \ val alphabet2 = alphabet + alphabet\n        val alphabet3 = alphabet2 + alphabet\n\
    \        val alphabet4 = alphabet3 + alphabet\n        val alphabet5 = alphabet4\
    \ + alphabet\n        val alphabet6 = alphabet5 + alphabet\n        val alphabet7\
    \ = alphabet6 + alphabet\n        val alphabet8 = alphabet7 + alphabet\n     \
    \   val alphabet9 = alphabet8 + alphabet\n        val alphabet10 = alphabet9 +\
    \ alphabet\n        val alphabet11 = alphabet10 + alphabet\n        val alphabet12\
    \ = alphabet11 + alphabet\n        val alphabet13 = alphabet12 + alphabet\n  \
    \      val alphabet14 = alphabet13 + alphabet\n        val alphabet15 = alphabet14\
    \ + alphabet\n        val alphabet16 = alphabet15 + alphabet\n        val alphabet17\
    \ = alphabet16 + alphabet\n        val alphabet18 = alphabet17 + alphabet\n  \
    \      val alphabet19 = alphabet18 + alphabet\n        val alphabet20 = alphabet19\
    \ + alphabet\n        val alphabet21 = alphabet20 + alphabet\n        val alphabet22\
    \ = alphabet21 + alphabet\n        val alphabet23 = alphabet22 + alphabet\n  \
    \      val alphabet24 = alphabet23 + alphabet\n        val alphabet25 = alphabet24\
    \ + alphabet\n        val alphabet26 = alphabet25 + alphabet\n        val alphabet27\
    \ = alphabet26 + alphabet\n        val alphabet28 = alphabet27 + alphabet\n  \
    \      val alphabet29 = alphabet28 + alphabet\n        val alphabet30 = alphabet29\
    \ + alphabet\n        val alphabet31 = alphabet30 + alphabet\n        val alphabet32\
    \ = alphabet31 + alphabet\n        val alphabet33 = alphabet32 + alphabet\n  \
    \      val alphabet34 = alphabet33 + alphabet\n        val alphabet35 = alphabet34\
    \ + alphabet\n        val alphabet36 = alphabet35 + alphabet\n        val alphabet37\
    \ = alphabet36 + alphabet\n        val alphabet38 = alphabet37 + alphabet\n  \
    \      val alphabet39 = alphabet38 + alphabet\n        val alphabet40 = alphabet39\
    \ + alphabet\n        val alphabet41 = alphabet40 + alphabet\n        val alphabet42\
    \ = alphabet41 + alphabet\n        val alphabet43 = alphabet42 + alphabet\n  \
    \      val alphabet44 = alphabet43 + alphabet\n        val alphabet45 = alphabet44\
    \ + alphabet\n        val alphabet46 = alphabet45 + alphabet\n        val alphabet47\
    \ = alphabet46 + alphabet\n        val alphabet48 = alphabet47 + alphabet\n  \
    \      val alphabet49 = alphabet48 + alphabet\n", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val alphabet = 'a' to 'z'\n        val alphabetMap\
    \ = alphabet.zip(alphabet.tail ++ List('a')).toMap\n        message.map(c => if\
    \ (vowels.contains(c.toLower)) alphabetMap(c.toLower) else c).map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val vowels2 = Set('c', 'f', 'j', 'n', 'r', 'v', 'z')\n  \
    \      val vowels3 = Set('b', 'd', 'g', 'h', 'k', 'l', 'm', 'p', 'q', 's', 't',\
    \ 'w', 'x', 'y')\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \
    \    val alphabet2 = \"cdefghijklmnopqrstuvwxyzab\"\n        val alphabet3 = \"\
    bcdefghijklmnopqrstuvwxyza\"\n        val alphabet4 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val alphabet5 = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\n        val alphabet6\
    \ = \"BCDEFGHIJKLMNOPQRSTUVWXYZAB\"\n        def encodeChar(c : Char) : Char =\
    \ {\n            if (vowels.contains(c)) alphabet2(alphabet.indexOf(c))\n    \
    \        else if (vowels2.contains(c)) alphabet3(alphabet.indexOf(c))\n      \
    \      else if (vowels3.contains(c)) alphabet(alphabet.indexOf(c))\n         \
    \   else if (vowels.contains(c.toLower)) alphabet5(alphabet4.indexOf(c))\n   \
    \         else if (vowels2.contains(c.toLower)) alphabet6(alphabet4.indexOf(c))\n\
    \            else if (vowels3.contains(c.toLower)) alphabet4(alphabet4.indexOf(c))\n\
    \            else c\n        }\n        message.map(encodeChar)", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val alphabetMap = alphabet.zipWithIndex.toMap\n        val vowelMap\
    \ = vowels.zipWithIndex.toMap\n        val encoded = message.map(c => {\n    \
    \        if (vowels.contains(c)) {\n                val index = vowelMap(c)\n\
    \                val newIndex = (index + 2) % vowels.length\n                vowels(newIndex)\n\
    \            } else if (alphabet.contains(c)) {\n                val index = alphabetMap(c)\n\
    \                val newIndex = (index + 2) % alphabet.length\n              \
    \  alphabet(newIndex)\n            } else {\n                c\n            }\n\
    \        })\n        encoded"]
stop_tokens:
- "\n    }\n"
