language: scala
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.zip(q.reverse).forall(x => x._1 == x._2)\n        sum <= w && isPalindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val firstHalf = q.slice(0, half)\n\
    \        val secondHalf = q.slice(half, q.length)\n        val reversedSecondHalf\
    \ = secondHalf.reverse\n        if (firstHalf == reversedSecondHalf) return true\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9k2yo0yg.scala:26)\n\tat Problem.main(tmp9k2yo0yg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val q_rev = q.reverse\n        for (i <- 0 until q.length) {\n\
    \            if (q(i) != q_rev(i)) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val max = w\n    \
    \    val isPalindrome = q.equals(q.reverse)\n        if (sum <= max && isPalindrome)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail\
    \ else right\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97cqzxou.scala:25)\n\tat Problem.main(tmp97cqzxou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        if (q.sum <= w) {\n            val\
    \ half = q.length / 2\n            val firstHalf = q.slice(0, half)\n        \
    \    val secondHalf = q.slice(half + 1, q.length)\n            if (firstHalf ==\
    \ secondHalf.reverse) return true\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        sum <= w && q == q.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        if (q.sum <= w) {\n            val\
    \ half = q.length / 2\n            val firstHalf = q.slice(0, half)\n        \
    \    val secondHalf = q.slice(half + 1, q.length)\n            if (firstHalf ==\
    \ secondHalf.reverse) return true\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        var sum = 0L\n        for (i <- q) sum += i\n\
    \        if (sum > w) return false\n        var s = q.size\n        for (i <-\
    \ 0 until s / 2) if (q(i) != q(s - i - 1)) return false\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val n = q.length\n        for (i <- 0 until n / 2) {\n      \
    \      if (q(i) != q(n - 1 - i)) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail\
    \ else right\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97cqzxou.scala:25)\n\tat Problem.main(tmp97cqzxou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) true\n        else if (q.length\
    \ % 2 == 0) false\n        else {\n            val mid = q.length / 2\n      \
    \      val left = q.slice(0, mid)\n            val right = q.slice(mid + 1, q.length)\n\
    \            val sum = q.sum\n            if (sum <= w && left == right) true\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val n = q.length\n        for (i <- 0 until n / 2) {\n      \
    \      if (q(i) != q(n - 1 - i)) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val rev = q.reverse\n        if (q == rev) return true\n    \
    \    false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        val half = q.length / 2\n        val\
    \ left = q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n \
    \       val sum = q.sum\n        if (sum > w) return false\n        if (left ==\
    \ right.reverse) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        val half = q.length / 2\n        val\
    \ left = q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n \
    \       if (left.sum + right.sum > w) return false\n        for (i <- 0 until\
    \ half) {\n            if (left(i) != right(half - 1 - i)) return false\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n\
    \    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n\
    \    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val s = q.sorted\n        val n = s.length\n        for (i <-\
    \ 0 until n / 2) {\n            if (s(i) != s(n - 1 - i)) return false\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n\
    \    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n\
    \    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y76gbti.scala:26)\n\tat Problem.main(tmp4y76gbti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.take(half)\n  \
    \      val right = q.takeRight(half)\n        if (q.length % 2 == 1) right.tail\
    \ else right\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:664)\n\
    \tat scala.collection.immutable.Nil$.tail(List.scala:661)\n\tat Problem$.willItFly(tmpnkkrfor1.scala:21)\n\
    \tat Problem$.main(tmpnkkrfor1.scala:27)\n\tat Problem.main(tmpnkkrfor1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val n = q.length\n        for (i <- 0 until n / 2) {\n      \
    \      if (q(i) != q(n - 1 - i)) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        val sum = q.sum\n        if (sum >\
    \ w) return false\n        val mid = q.length / 2\n        val left = q.slice(0,\
    \ mid)\n        val right = q.slice(mid + 1, q.length)\n        val leftSum =\
    \ left.sum\n        val rightSum = right.sum\n        if (leftSum != rightSum)\
    \ return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length == 2) return false\n        if (q.sum > w) return false\n        if\
    \ (q.head != q.last) return false\n        willItFly(q.tail.init, w)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        sum <= w && q == q.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val firstHalf = q.slice(0, half)\n\
    \        val secondHalf = q.slice(half, q.length)\n        if (q.length % 2 ==\
    \ 1) secondHalf.tail else secondHalf\n        val reverse = secondHalf.reverse\n\
    \        firstHalf == reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) ==\
    \ (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) ==\
    \ (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9kz8ix_.scala:26)\n\tat Problem.main(tmpz9kz8ix_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val firstHalf = q.slice(0, half)\n\
    \        val secondHalf = q.slice(half, q.length)\n        if (q.length % 2 ==\
    \ 1) secondHalf.tail.reverse == firstHalf else secondHalf.reverse == firstHalf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) false\n\
    \        else {\n            val mid = q.length / 2\n            val left = q.slice(0,\
    \ mid)\n            val right = q.slice(mid + 1, q.length)\n            left ==\
    \ right.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n\
    \    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n\
    \    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val s = q.toString\n        return s == s.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mc_et_3.scala:22)\n\tat Problem.main(tmp1mc_et_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum > w) return false\n        if (q.length % 2 == 0) return false\n    \
    \    for (i <- 0 until q.length / 2) {\n            if (q(i) != q(q.length - 1\
    \ - i)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        val\
    \ sum = q.sum\n        if (sum > w) return false\n        val half = q.length\
    \ / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half,\
    \ q.length)\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdubpq1v1.scala:25)\n\tat Problem.main(tmpdubpq1v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail\
    \ else right\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97cqzxou.scala:25)\n\tat Problem.main(tmp97cqzxou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        var sum = 0L\n        for (i <- 0\
    \ until q.length) {\n            sum += q(i)\n        }\n        if (sum > w)\
    \ return false\n        for (i <- 0 until q.length / 2) {\n            if (q(i)\
    \ != q(q.length - 1 - i)) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        val sum = q.sum\n        if (sum >\
    \ w) return false\n        val mid = q.length / 2\n        val left = q.slice(0,\
    \ mid)\n        val right = q.slice(mid + 1, q.length)\n        if (left.sum !=\
    \ right.sum) return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.size == 1) return true\n        if (q.size\
    \ == 2) return false\n        if (q.sum > w) return false\n        if (q.head\
    \ != q.last) return false\n        return willItFly(q.slice(1, q.size - 1), w)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        val sum = q.sum\n        if (sum >\
    \ w) return false\n        val mid = q.length / 2\n        val left = q.slice(0,\
    \ mid)\n        val right = q.slice(mid + 1, q.length)\n        left == right.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val s = q.sorted\n        val n = s.length\n        for (i <-\
    \ 0 until n / 2) {\n            if (s(i) != s(n - 1 - i)) return false\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n\
    \    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n\
    \    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y76gbti.scala:26)\n\tat Problem.main(tmp4y76gbti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val mid = q.length / 2\n        val left = q.slice(0, mid)\n\
    \        val right = q.slice(mid + 1, q.length)\n        left == right.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        val\
    \ sum = q.sum\n        if (sum > w) return false\n        val half = q.length\
    \ / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half,\
    \ q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum != rightSum) return false\n        return true\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpno3t7i9s.scala:28)\n\tat Problem.main(tmpno3t7i9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.size / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.size)\n        if (q.size % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val mid = q.length / 2\n        val left = q.slice(0, mid)\n\
    \        val right = q.slice(mid + 1, q.length)\n        left == right.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.take(half)\n  \
    \      val right = q.takeRight(half)\n        left == right.reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.sum <= w && q == q.reverse) return true\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.isEmpty) return true\n        val sum\
    \ = q.sum\n        if (sum > w) return false\n        val q_rev = q.reverse\n\
    \        for (i <- 0 until q.length) {\n            if (q(i) != q_rev(i)) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        return isBalanced && sum <= w\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val n = q.length\n        for (i <- 0 until n / 2) {\n      \
    \      if (q(i) != q(n - 1 - i)) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val firstHalf = q.take(half)\n\
    \        val secondHalf = q.takeRight(half)\n        if (q.length % 2 == 1) secondHalf.tail.reverse\
    \ == firstHalf else secondHalf.reverse == firstHalf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsb1x9vxt.scala:24)\n\tat Problem.main(tmpsb1x9vxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val s = q.size\n        for (i <- 0 until s / 2) {\n        \
    \    if (q(i) != q(s - 1 - i)) return false\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isPalindrome =\
    \ q.reverse == q\n        sum <= w && isPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val balanced = q ==\
    \ q.reverse\n        sum <= w && balanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        var sum = 0L\n        for (i <- q) sum += i\n\
    \        if (sum > w) return false\n        var isPalindrome = true\n        for\
    \ (i <- 0 until q.length / 2) {\n            if (q(i) != q(q.length - 1 - i))\
    \ {\n                isPalindrome = false\n                break\n           \
    \ }\n        }\n        return isPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuat6o803.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val mid = q.length / 2\n        val left = q.slice(0, mid)\n\
    \        val right = q.slice(mid + 1, q.length)\n        left == right.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.length == 1) return true\n        if\
    \ (q.length % 2 == 0) return false\n        if (q.sum > w) return false\n    \
    \    val mid = q.length / 2\n        val left = q.slice(0, mid)\n        val right\
    \ = q.slice(mid + 1, q.length)\n        left == right.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val first = q.slice(0, half)\n\
    \        val second = q.slice(half, q.length)\n        if (q.length % 2 == 1)\
    \ second.tail.reverse == first else second.reverse == first\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail\
    \ else right\n        left == right.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97cqzxou.scala:25)\n\tat Problem.main(tmp97cqzxou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val firstHalf = q.take(half)\n\
    \        val secondHalf = q.takeRight(half)\n        if (q.length % 2 == 1) secondHalf.tail.reverse\
    \ == firstHalf else secondHalf.reverse == firstHalf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)),\
    \ (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsb1x9vxt.scala:24)\n\tat Problem.main(tmpsb1x9vxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val mid = q.length / 2\n        val left = q.slice(0, mid)\n\
    \        val right = q.slice(mid + q.length % 2, q.length)\n        left == right.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        sum <= w && q == q.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val s = q.sorted\n        val l = s.length\n        for (i <-\
    \ 0 until l / 2) {\n            if (s(i) != s(l - i - 1)) return false\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n\
    \    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n\
    \    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8e990wuh.scala:26)\n\tat Problem.main(tmp8e990wuh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) false\n\
    \        else {\n            val half = q.length / 2\n            val left = q.slice(0,\
    \ half)\n            val right = q.slice(half, q.length)\n            if (q.length\
    \ % 2 == 1) right.tail.reverse == left else right.reverse == left\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half, q.length)\n        if (q.length % 2 == 1) right.tail.reverse\
    \ == left else right.reverse == left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        var sum = 0L\n        for (i <- q) sum += i\n\
    \        if (sum > w) return false\n        var i = 0\n        var j = q.length\
    \ - 1\n        while (i < j) {\n            if (q(i) != q(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.foldLeft(0L)(_ + _)\n        val\
    \ palindrome = q.reverse == q\n        sum <= w && palindrome\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        if (sum > w) return\
    \ false\n        val half = q.length / 2\n        for (i <- 0 until half) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        if (q.sum <= w && q == q.reverse) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
    \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
    \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
    \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
    \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n    // The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n  \
    \  // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n \
    \   // will_it_fly([3, 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9)\
    \ \u279E True\n    // # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n    // will_it_fly([3], 5) \u279E True\n    // # 3 is less than the\
    \ maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long],\
    \ w : Long) : Boolean = {\n        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\
    \ == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\
    \ == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n\
    \    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) ==\
    \ (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800485
