name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n  \
  \  // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\"\
  ) == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n   \
  \ def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ["        val regex = \"\\\\s+\".r\n        regex.replaceAllIn(text,\
    \ \"_\")", '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var prev\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (prev == ' ') {\n                    sb.append('-')\n                }\
    \ else {\n                    sb.append('_')\n                }\n            }\
    \ else {\n                sb.append(c)\n            }\n            prev = c\n\
    \        }\n        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.trim.replaceAll(" +", "-")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        val sb = new StringBuilder\n        var prev = ' '\n      \
    \  for (c <- text) {\n            if (c == ' ') {\n                if (prev ==\
    \ ' ') {\n                    sb += '-'\n                } else {\n          \
    \          sb += '_'\n                }\n            } else {\n              \
    \  sb += c\n            }\n            prev = c\n        }\n        sb.toString",
  "        var result = new StringBuilder\n        var prev = ' '\n        for (c\
    \ <- text) {\n            if (c == ' ') {\n                if (prev == ' ') {\n\
    \                    result.append('-')\n                } else {\n          \
    \          result.append('_')\n                }\n            } else {\n     \
    \           result.append(c)\n            }\n            prev = c\n        }\n\
    \        result.toString", '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll(" +", "-")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', "     \
    \   var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', "        val sb = new StringBuilder\n        var\
    \ lastChar = ' '\n        for (c <- text) {\n            if (c == ' ') {\n   \
    \             if (lastChar == ' ') {\n                    sb.append('-')\n   \
    \             } else {\n                    sb.append('_')\n                }\n\
    \            } else {\n                sb.append(c)\n            }\n         \
    \   lastChar = c\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll(" +", "-").replaceAll(" ", "_")', "       \
    \ val sb = new StringBuilder\n        var lastChar = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (lastChar == ' ') {\n   \
    \                 sb.append('-')\n                } else {\n                 \
    \   sb.append('_')\n                }\n            } else {\n                sb.append(c)\n\
    \            }\n            lastChar = c\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll(" ", "_").replaceAll("_+",
    "-")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', "      \
    \  var result = \"\"\n        var i = 0\n        while (i < text.length) {\n \
    \           if (text(i) == ' ') {\n                result += \"_\"\n         \
    \       while (i < text.length && text(i) == ' ') {\n                    result\
    \ += \"-\"\n                    i += 1\n                }\n            } else\
    \ {\n                result += text(i)\n                i += 1\n            }\n\
    \        }\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = \"\"\n        var spaceCount\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  spaceCount += 1\n                if (spaceCount == 1) result += '_'\n     \
    \       } else {\n                if (spaceCount > 2) result += '-'\n        \
    \        else if (spaceCount == 2) result += '_'\n                result += c\n\
    \                spaceCount = 0\n            }\n        }\n        if (spaceCount\
    \ > 2) result += '-'\n        else if (spaceCount == 2) result += '_'\n      \
    \  result", '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = new StringBuilder\n        var\
    \ prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n       \
    \         if (prev == ' ') {\n                    result.append('-')\n       \
    \         } else {\n                    result.append('_')\n                }\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \       prev = c\n        }\n        result.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', "   \
    \     val sb = new StringBuilder\n        var lastChar = ' '\n        for (c <-\
    \ text) {\n            if (c == ' ') {\n                if (lastChar == ' ') {\n\
    \                    sb.append('-')\n                } else {\n              \
    \      sb.append('_')\n                }\n            } else {\n             \
    \   sb.append(c)\n            }\n            lastChar = c\n        }\n       \
    \ sb.toString", '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', " \
    \       var result = new StringBuilder\n        var consecutiveSpaces = 0\n  \
    \      for (c <- text) {\n            if (c == ' ') {\n                consecutiveSpaces\
    \ += 1\n                if (consecutiveSpaces == 1) result += '_'\n          \
    \      else if (consecutiveSpaces == 2) result += '-'\n            } else {\n\
    \                consecutiveSpaces = 0\n                result += c\n        \
    \    }\n        }\n        result.toString", '        text.replaceAll("\\s{2,}",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("-",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', " \
    \       var result = \"\"\n        var prev = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (prev == ' ') {\n           \
    \         result += '-'\n                } else {\n                    result\
    \ += '_'\n                }\n            } else {\n                result += c\n\
    \            }\n            prev = c\n        }\n        result", "        var\
    \ result = \"\"\n        var prev = ' '\n        for (c <- text) {\n         \
    \   if (c == ' ') {\n                if (prev == ' ') {\n                    result\
    \ += '-'\n                } else {\n                    result += '_'\n      \
    \          }\n            } else {\n                result += c\n            }\n\
    \            prev = c\n        }\n        result", "        val sb = new StringBuilder\n\
    \        var lastChar = ' '\n        for (c <- text) {\n            if (c == '\
    \ ') {\n                if (lastChar == ' ') {\n                    sb.append('-')\n\
    \                } else {\n                    sb.append('_')\n              \
    \  }\n            } else {\n                sb.append(c)\n            }\n    \
    \        lastChar = c\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        val sb = new StringBuilder\n        var prevChar = ' '\n  \
    \      for (c <- text) {\n            if (c == ' ') {\n                if (prevChar\
    \ == ' ') {\n                    sb.append('-')\n                } else {\n  \
    \                  sb.append('_')\n                }\n            } else {\n \
    \               sb.append(c)\n            }\n            prevChar = c\n      \
    \  }\n        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("
    {2,}", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var lastSpace\
    \ = false\n        for (c <- text) {\n            if (c == ' ') {\n          \
    \      if (lastSpace) {\n                    sb.append('-')\n                }\
    \ else {\n                    sb.append('_')\n                    lastSpace =\
    \ true\n                }\n            } else {\n                sb.append(c)\n\
    \                lastSpace = false\n            }\n        }\n        sb.toString",
  '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll(" +", "-")', '        text.replaceAll("\\s{2,}",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll(" +", "-")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', "        var s = text.replaceAll(\" \", \"_\")\n\
    \        s = s.replaceAll(\"_+\", \"-\")\n        return s", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var lastChar\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (lastChar == ' ') {\n                    sb.append('-')\n            \
    \    } else {\n                    sb.append('_')\n                }\n       \
    \     } else {\n                sb.append(c)\n            }\n            lastChar\
    \ = c\n        }\n        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', "   \
    \     var result = text.replaceAll(\"\\\\s+\", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result = result.replaceAll(\"^_\", \"\")\n        result",
  '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = \"\"\n        var lastChar = ' '\n        for\
    \ (c <- text) {\n            if (c == ' ') {\n                if (lastChar ==\
    \ ' ') {\n                    result += '-'\n                } else {\n      \
    \              result += '_'\n                }\n            } else {\n      \
    \          result += c\n            }\n            lastChar = c\n        }\n \
    \       result", '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")',
  "        val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ result = text.replaceAll(\"\\\\s+\", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', "        var result = new StringBuilder\n        var i = 0\n        while\
    \ (i < text.length) {\n            if (text(i) == ' ') {\n                result.append('_')\n\
    \                i += 1\n                while (i < text.length && text(i) ==\
    \ ' ') {\n                    result.append('-')\n                    i += 1\n\
    \                }\n            } else {\n                result.append(text(i))\n\
    \                i += 1\n            }\n        }\n        result.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        val sb = new StringBuilder\n        var prev = ' '\n      \
    \  for (c <- text) {\n            if (c == ' ') {\n                if (prev ==\
    \ ' ') {\n                    sb.append('-')\n                } else {\n     \
    \               sb.append('_')\n                }\n            } else {\n    \
    \            sb.append(c)\n            }\n            prev = c\n        }\n  \
    \      sb.toString", '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', "      \
    \  val pattern = \"\\\\s+\".r\n        val result = pattern.replaceAllIn(text,\
    \ \"_\")\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = \"\"\n        var count = 0\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) == ' ') {\n                count\
    \ += 1\n                if (count == 1) result += \"_\"\n                else\
    \ if (count == 2) result += \"-\"\n            } else {\n                result\
    \ += text(i)\n                count = 0\n            }\n        }\n        result",
  '        return text.replaceAll("\\s+", "-").replaceAll(" ", "_")', "        var\
    \ result = \"\"\n        var prev = ' '\n        for (c <- text) {\n         \
    \   if (c == ' ') {\n                if (prev == ' ') {\n                    result\
    \ += '-'\n                } else {\n                    result += '_'\n      \
    \          }\n            } else {\n                result += c\n            }\n\
    \            prev = c\n        }\n        result", '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "_")', "        val sb = new StringBuilder\n        var prev = ' '\n        for\
    \ (c <- text) {\n            if (c == ' ') {\n                if (prev == ' ')\
    \ {\n                    sb.append('-')\n                } else {\n          \
    \          sb.append('_')\n                }\n            } else {\n         \
    \       sb.append(c)\n            }\n            prev = c\n        }\n       \
    \ sb.toString", '        text.replaceAll(" {2,}", "-").replaceAll(" ", "_")',
  '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", " ").replaceAll(" ", "_")', '        text.replaceAll("\\s{2,}",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', '        text.replaceAll(" +", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var lastChar\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (lastChar == ' ') {\n                    sb.append('-')\n            \
    \    } else {\n                    sb.append('_')\n                }\n       \
    \     } else {\n                sb.append(c)\n            }\n            lastChar\
    \ = c\n        }\n        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll(" {2,}", "-").replaceAll("
    ", "_")', '        text.replaceAll(" {2,}", "-").replaceAll(" ", "_")', "    \
    \    val sb = new StringBuilder\n        var count = 0\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                count += 1\n               \
    \ if (count > 2) {\n                    sb.append('-')\n                    count\
    \ = 0\n                }\n            } else {\n                if (count > 0)\
    \ {\n                    sb.append('_')\n                    count = 0\n     \
    \           }\n                sb.append(c)\n            }\n        }\n      \
    \  if (count > 0) sb.append('_')\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        val sb = new StringBuilder\n        var prev = ' '\n      \
    \  for (c <- text) {\n            if (c == ' ') {\n                if (prev ==\
    \ ' ') {\n                    sb.append('-')\n                } else {\n     \
    \               sb.append('_')\n                }\n            } else {\n    \
    \            sb.append(c)\n            }\n            prev = c\n        }\n  \
    \      sb.toString", '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")',
  '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = text.replaceAll(\" \", \"_\"\
    )\n        result = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-").replace(" ", "_")', "        // Write your code here\n        return text",
  '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var prev\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (prev == ' ') {\n                    sb.append('-')\n                }\
    \ else {\n                    sb.append('_')\n                }\n            }\
    \ else {\n                sb.append(c)\n            }\n            prev = c\n\
    \        }\n        sb.toString", "        // Write your code here\n        return\
    \ \"\"", "        var result = \"\"\n        var count = 0\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) == ' ') {\n                count\
    \ += 1\n                if (count == 1) result += '_'\n                else if\
    \ (count == 2) result += '-'\n            }\n            else {\n            \
    \    result += text(i)\n                count = 0\n            }\n        }\n\
    \        result", '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")',
  '        text.replaceAll("\\s{2,}", "-").replaceAll("\\s", "_")', "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\",\
    \ \"-\")\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")']
stop_tokens:
- "\n    }\n"
