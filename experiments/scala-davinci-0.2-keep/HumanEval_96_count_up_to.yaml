name: HumanEval_96_count_up_to
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n    // integers that are prime numbers and less than n.\n    //\
  \ for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11) => [2,3,5,7]\n\
  \    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
  \    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n   \
  \ def countUpTo(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
  \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
  \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
  \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
  \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
  \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
  \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
  \ 97l.toLong))));\n    }\n\n}\n"
completions: ["        // your code here\n        if (n <= 1) return List()\n    \
    \    var primes = List[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (isPrime(i)) primes = primes :+ i\n            i += 1\n      \
    \  }\n        primes", "        def isPrime(n : Long) : Boolean = {\n        \
    \    if (n <= 1) return false\n            if (n == 2) return true\n         \
    \   if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var list =\
    \ List[Long]()\n        for (i <- 2 to n) {\n            if (isPrime(i)) list\
    \ = list :+ i\n        }\n        return list", "        if (n <= 1) return List()\n\
    \        val primes = new ArrayBuffer[Long]\n        for (i <- 2L to n) {\n  \
    \          if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i\
    \ == 0) return false\n            }\n            return true\n        }\n    \
    \    var result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        return result", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        if (n <= 1) return List()\n        val primes = new ArrayBuffer[Long]()\n\
    \        val isPrime = new Array[Boolean](n.toInt + 1)\n        for (i <- 2 to\
    \ n.toInt) isPrime(i) = true\n        for (i <- 2 to n.toInt) {\n            if\
    \ (isPrime(i)) {\n                primes += i\n                var j = i\n   \
    \             while (j <= n.toInt) {\n                    isPrime(j) = false\n\
    \                    j += i\n                }\n            }\n        }\n   \
    \     primes.toList", "        if (n < 2) return List()\n        var primes =\
    \ ListBuffer[Long]()\n        var sieve = new Array[Boolean](n.toInt + 1)\n  \
    \      for (i <- 2 to n.toInt) sieve(i) = true\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            if (sieve(i)) {\n                var j = i * i\n            \
    \    while (j <= n) {\n                    sieve(j) = false\n                \
    \    j += i\n                }\n            }\n        }\n        for (i <- 2\
    \ to n.toInt) if (sieve(i)) primes += i\n        primes.toList", "        if (n\
    \ < 2) return List()\n        var primes = ListBuffer[Long]()\n        var i =\
    \ 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n     \
    \       i += 1\n        }\n        primes.toList", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3L to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        if (n <= 1) return List()\n \
    \       var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i\
    \ < n) {\n            if (isPrime(i)) primes += i\n            i += 1\n      \
    \  }\n        primes.toList", "        def isPrime(n : Long) : Boolean = {\n \
    \           if (n < 2) return false\n            if (n == 2) return true\n   \
    \         if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        // your code here\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result\
    \ :+ i\n        }\n        return result", "        if (n <= 1) return List()\n\
    \        var primes = new ListBuffer[Long]\n        for (i <- 2L to n) {\n   \
    \         var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        primes.toList", "        if (n < 2) return List()\n\
    \        var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i\
    \ < n) {\n            if (isPrime(i)) primes += i\n            i += 1\n      \
    \  }\n        primes.toList", "        if (n <= 1) return List()\n        var\
    \ primes = ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n \
    \           if (isPrime(i)) primes += i\n            i += 1\n        }\n     \
    \   primes.toList", "        def isPrime(n : Long) : Boolean = {\n           \
    \ if (n <= 1) return false\n            if (n == 2) return true\n            if\
    \ (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n         \
    \   for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3L to sqrt(n).toLong by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        var result = List[Long]()\n        for (i <- 2L to n) {\n           \
    \ if (isPrime(i)) result = result :+ i\n        }\n        return result", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n     \
    \   result", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 2) return true\n            if (n % 2 == 0) return false\n            val sqrtN\
    \ = sqrt(n).toLong\n            for (i <- 3 to sqrtN by 2) {\n               \
    \ if (n % i == 0) return false\n            }\n            return true\n     \
    \   }\n        var result = List[Long]()\n        for (i <- 2 to n) {\n      \
    \      if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        if (n < 2) return List()\n        val primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        for (i <- 3L to n by 2) {\n            if (primes.forall(i\
    \ % _ != 0)) primes += i\n        }\n        primes.toList", "        if (n <\
    \ 2) return List()\n        val primes = new ArrayBuffer[Long]()\n        val\
    \ isPrime = new Array[Boolean](n.toInt)\n        for (i <- 2 until n.toInt) isPrime(i)\
    \ = true\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                for (j <- i until n.toInt by i)\
    \ isPrime(j) = false\n            }\n        }\n        primes.toList", "    \
    \    var result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        // your code here\n\
    \        var result = List[Long]()\n        if (n < 2) return result\n       \
    \ var i = 2L\n        while (i < n) {\n            if (isPrime(i)) result = result\
    \ :+ i\n            i += 1\n        }\n        result", "        if (n <= 1) return\
    \ List()\n        var result = ListBuffer[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) result += i\n        }\n        result.toList",
  "        if (n <= 1) return List()\n        var primes = List[Long]()\n        var\
    \ i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes = primes\
    \ :+ i\n            i += 1\n        }\n        primes", "        var primes =\
    \ List[Long]()\n        if (n <= 1) return primes\n        primes = primes :+\
    \ 2\n        for (i <- 3 to n.toInt by 2) {\n            if (isPrime(i)) primes\
    \ = primes :+ i\n        }\n        primes", "        if (n <= 1) return List()\n\
    \        val primes = new ArrayBuffer[Long]\n        primes += 2\n        for\
    \ (i <- 3L to n by 2) {\n            var isPrime = true\n            for (j <-\
    \ 0 until primes.length) {\n                if (i % primes(j) == 0) {\n      \
    \              isPrime = false\n                    break\n                }\n\
    \            }\n            if (isPrime) primes += i\n        }\n        primes.toList",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      return result", "        if (n < 2) return List()\n        var primes =\
    \ List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) primes\
    \ = primes :+ i\n        }\n        primes", "        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n <= 1) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        val isPrime = Array.fill(n.toInt)(true)\n\
    \        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n       \
    \         primes += i\n                var j = i * i\n                while (j\
    \ < n) {\n                    isPrime(j) = false\n                    j += i\n\
    \                }\n            }\n        }\n        primes.toList", "      \
    \  def isPrime(n : Long) : Boolean = {\n            if (n <= 1) false\n      \
    \      else if (n == 2) true\n            else !(2 to (sqrt(n).toInt + 1)).exists(x\
    \ => n % x == 0)\n        }\n        if (n <= 1) List()\n        else (2 to n.toInt).filter(isPrime).map(_.toLong).toList",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val limit = sqrt(n).toLong\n            for (i <- 3L to limit by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        def isPrime(n : Long) : Boolean = {\n      \
    \      if (n < 2) return false\n            if (n == 2) return true\n        \
    \    if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List()\n        var primes = new ListBuffer[Long]\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n <= 1) return List()\n        var result = ListBuffer[Long]()\n  \
    \      for (i <- 2L to n) {\n            if (isPrime(i)) result += i\n       \
    \ }\n        result.toList", "        def isPrime(n : Long) : Boolean = {\n  \
    \          if (n == 1) return false\n            if (n == 2) return true\n   \
    \         if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result\
    \ :+ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        var list = List[Long]()\n        for (i <- 2 to n.toInt) {\n        \
    \    if (isPrime(i)) list = list :+ i\n        }\n        return list", "    \
    \    if (n < 2) return List()\n        val primes = new ArrayBuffer[Long]\n  \
    \      primes += 2\n        for (i <- 3L to n by 2) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        primes.toList", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = math.sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        var result = List[Long]()\n        for (i <- 2 to n) {\n  \
    \          if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        if (n < 2) return List()\n        val primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        for (i <- 3L to n by 2) {\n            if (primes.forall(i\
    \ % _ != 0)) primes += i\n        }\n        primes.toList", "        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        result", "        if (n <= 1) return List()\n\
    \        var result = ListBuffer[Long]()\n        for (i <- 2L to n) {\n     \
    \       if (isPrime(i)) result += i\n        }\n        result.toList", "    \
    \    def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n <= 1) return false\n            if (n <= 3) return true\n \
    \           if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n\
    \            while (i * i <= n) {\n                if (n % i == 0 || n % (i +\
    \ 2) == 0) return false\n                i += 6\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        def isPrime(n : Long) : Boolean = {\n            if (n < 2)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3L to sqrt(n).toLong by 2) {\n      \
    \          if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2L to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        if (n < 2) return List()\n        val primes = new ListBuffer[Long]\n \
    \       val isPrime = new Array[Boolean](n.toInt)\n        for (i <- 2 until n.toInt)\
    \ isPrime(i) = true\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i))\
    \ {\n                primes += i\n                var j = i * i\n            \
    \    while (j < n) {\n                    isPrime(j) = false\n               \
    \     j += i\n                }\n            }\n        }\n        primes.toList",
  "        var result = List[Long]()\n        if (n < 2) return result\n        var\
    \ i = 2L\n        while (i < n) {\n            if (isPrime(i)) result = result\
    \ :+ i\n            i += 1\n        }\n        result", "        if (n < 2) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        val isPrime = new\
    \ Array[Boolean](n.toInt + 1)\n        for (i <- 2 to n.toInt) isPrime(i) = true\n\
    \        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n          \
    \      primes += i\n                for (j <- 2 to n.toInt / i) isPrime(i * j)\
    \ = false\n            }\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 5L to sqrt by 6)\
    \ {\n                if (n % i == 0 || n % (i + 2) == 0) return false\n      \
    \      }\n            return true\n        }\n        val result = new ListBuffer[Long]\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result += i\n     \
    \   }\n        return result.toList", "        if (n < 2) return List()\n    \
    \    var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i < n)\
    \ {\n            if (isPrime(i)) primes += i\n            i += 1\n        }\n\
    \        primes.toList", "        def isPrime(n : Long) : Boolean = {\n      \
    \      if (n == 2) return true\n            if (n % 2 == 0) return false\n   \
    \         for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0)\
    \ return false\n            }\n            return true\n        }\n        var\
    \ result = List[Long]()\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        return result", "        var result\
    \ = List[Long]()\n        if (n <= 1) return result\n        var prime = 2L\n\
    \        while (prime < n) {\n            result = prime :: result\n         \
    \   prime = nextPrime(prime)\n        }\n        result", "        def countUpToHelper(n\
    \ : Long, primes : List[Long]) : List[Long] = {\n            if (n <= 1) primes\n\
    \            else {\n                val nextPrime = primes.last + 1\n       \
    \         if (isPrime(nextPrime)) countUpToHelper(n, primes :+ nextPrime)\n  \
    \              else countUpToHelper(n, primes)\n            }\n        }\n   \
    \     countUpToHelper(n, List(2))", "        // Fill in your code here\n     \
    \   return List()", "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        if (n\
    \ < 2) return List()\n        var primes = ListBuffer[Long]()\n        var i =\
    \ 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n     \
    \       i += 1\n        }\n        primes.toList", "        if (n <= 1) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n <= 1) return List()\n        val primes = new ListBuffer[Long]\n\
    \        val isPrime = new Array[Boolean](n.toInt + 1)\n        for (i <- 2 to\
    \ n.toInt) isPrime(i) = true\n        for (i <- 2 to n.toInt) {\n            if\
    \ (isPrime(i)) {\n                primes += i\n                var j = i * i\n\
    \                while (j <= n) {\n                    isPrime(j) = false\n  \
    \                  j += i\n                }\n            }\n        }\n     \
    \   primes.toList", "        if (n < 2) return List()\n        var result = ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i < n) {\n            if (isPrime(i)) result\
    \ += i\n            i += 1\n        }\n        result.toList", "        if (n\
    \ <= 1) return List()\n        var primes = ListBuffer[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n  \
    \      var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        if (n\
    \ < 2) return List()\n        val primes = new ArrayBuffer[Long]\n        val\
    \ isPrime = new Array[Boolean](n.toInt)\n        for (i <- 0 until n.toInt) isPrime(i)\
    \ = true\n        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                var j = i * i\n                while\
    \ (j < n) {\n                    isPrime(j) = false\n                    j +=\
    \ i\n                }\n            }\n        }\n        primes.toList", "  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        if (n <= 1) return List()\n        var\
    \ result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        return result", "        if (n < 2)\
    \ return List()\n        var primes = ListBuffer[Long]()\n        var num = 2L\n\
    \        while (num < n) {\n            if (isPrime(num)) primes += num\n    \
    \        num += 1\n        }\n        primes.toList", "        var result = List[Long]()\n\
    \        if (n <= 1) return result\n        result = result :+ 2\n        for\
    \ (i <- 3L to n by 2) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        result", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        def isPrime(n: Long):\
    \ Boolean = {\n            if (n <= 1) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            true\n        }\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result += i\n     \
    \   }\n        result.toList", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        if (n <= 1) return List()\n        var\
    \ result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        if (n <= 1) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n   \
    \     var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n       \
    \     for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        var result = List[Long]()\n \
    \       if (n < 2) return result\n        result = result :+ 2\n        for (i\
    \ <- 3 to n.toInt by 2) {\n            if (isPrime(i)) result = result :+ i\n\
    \        }\n        return result", "        if (n <= 1) return List()\n     \
    \   var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n          \
    \  if (isPrime(i)) primes += i\n        }\n        primes.toList", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) result = result :+ i\n        }\n        result",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        return result", "        var result = List[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        result", "        // you code here\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n    \
    \        if (n == 2) return true\n            if (n % 2 == 0) return false\n \
    \           val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        if (n <= 1) return List()\n        var primes\
    \ = ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n        \
    \    if (isPrime(i)) primes += i\n            i += 1\n        }\n        primes.toList",
  "        if (n < 2) return List()\n        val primes = new ListBuffer[Long]\n \
    \       val nums = new Array[Boolean](n.toInt)\n        for (i <- 2 until n.toInt)\
    \ {\n            if (!nums(i)) {\n                primes += i\n              \
    \  for (j <- i until n.toInt by i) {\n                    nums(j) = true\n   \
    \             }\n            }\n        }\n        primes.toList", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n     \
    \       if (n == 2) return true\n            if (n % 2 == 0) return false\n  \
    \          val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n\
    \                if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 2L to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        result",
  "        // Fill in the code here\n        var result = List[Long]()\n        if\
    \ (n <= 1) return result\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        if (n < 2) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n   \
    \     var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        if (n\
    \ <= 1) return List()\n        var primes = List[Long]()\n        var i = 2L\n\
    \        while (i < n) {\n            if (isPrime(i)) primes = primes :+ i\n \
    \           i += 1\n        }\n        primes", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = math.sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        var result = List[Long]()\n        for (i <- 2 to n) {\n  \
    \          if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        def isPrime(x : Long) : Boolean = {\n            if (x < 2) return false\n\
    \            if (x == 2) return true\n            if (x % 2 == 0) return false\n\
    \            val sqrt_x = sqrt(x).toLong\n            for (i <- 3 to sqrt_x by\
    \ 2) {\n                if (x % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n     \
    \   }\n        return result", "        if (n <= 1) return List()\n        val\
    \ primes = new ArrayBuffer[Long]\n        val isPrime = new Array[Boolean](n.toInt\
    \ + 1)\n        for (i <- 2 to n.toInt) isPrime(i) = true\n        for (i <- 2\
    \ to n.toInt) {\n            if (isPrime(i)) {\n                primes += i\n\
    \                for (j <- i * i to n.toInt by i) isPrime(j) = false\n       \
    \     }\n        }\n        primes.toList", "        if (n <= 1) return List()\n\
    \        var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        primes.toList", "    \
    \    if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n    \
    \    var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes +=\
    \ i\n            i += 1\n        }\n        primes.toList", "        if (n < 2)\
    \ return List()\n        val primes = new ArrayBuffer[Long]\n        for (i <-\
    \ 2L to n) {\n            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        primes.toList", "        if (n < 2) return List()\n\
    \        var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        primes.toList", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var list = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) {\n                list = list :+ i\n    \
    \        }\n        }\n        list", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2 to n.toInt)\
    \ {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 2) return true\n            if (n % 2 == 0) return false\n            for (i\
    \ <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result\
    \ :+ i\n        }\n        return result", "        if (n < 2) return List()\n\
    \        var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        primes.toList", "    \
    \    // your code here\n        var result = List[Long]()\n        if (n == 0)\
    \ return result\n        if (n == 1) return result\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) result = result :+ i\n        }\n        result",
  "        var result = List[Long]()\n        for (i <- 2L to n) {\n            if\
    \ (isPrime(i)) result = result :+ i\n        }\n        result", "        if (n\
    \ <= 1) return List()\n        var primes = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) primes = primes :+ i\n        }\n     \
    \   primes", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        def isPrime(n: Long): Boolean = {\n \
    \           if (n <= 1) false\n            else if (n == 2) true\n           \
    \ else !(2 until n).exists(x => n % x == 0)\n        }\n        (2L to n).filter(isPrime).toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        if (n == 0)\
    \ {\n            return result\n        }\n        if (n == 1) {\n           \
    \ return result\n        }\n        if (n == 2) {\n            result = result\
    \ :+ 2\n            return result\n        }\n        var i = 2L\n        while\
    \ (i < n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n            i += 1\n        }\n        return result", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var list = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) list = list :+ i\n        }\n        return\
    \ list", "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 1) return false\n            if (n == 2) return true\n            if (n % 2\
    \ == 0) return false\n            val sqrt = sqrt(n).toLong\n            for (i\
    \ <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n      \
    \      }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt_n = sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt_n by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n < 2) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        val isPrime = new\
    \ Array[Boolean](n.toInt)\n        for (i <- 0 until n.toInt) isPrime(i) = true\n\
    \        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n       \
    \         primes += i\n                var j = i * i\n                while (j\
    \ < n) {\n                    isPrime(j) = false\n                    j += i\n\
    \                }\n            }\n        }\n        primes.toList", "      \
    \  def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ var lst = List[Long]()\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i))\
    \ lst = lst :+ i\n        }\n        return lst", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = math.sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n          \
    \      if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2L to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3L to sqrtN by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        if (n <= 1) return List()\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            var i = 3\n\
    \            while (i <= sqrt(n)) {\n                if (n % i == 0) return false\n\
    \                i += 2\n            }\n            return true\n        }\n \
    \       var result = List[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (isPrime(i)) result = result :+ i\n            i += 1\n      \
    \  }\n        return result", "        def isPrime(n : Long) : Boolean = {\n \
    \           if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        if (n < 2) return List()\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) false\n            else if (n == 2) true\n\
    \            else !(2 to (sqrt(n).toInt + 1)).exists(x => n % x == 0)\n      \
    \  }\n        if (n <= 1) List()\n        else (2 to n.toInt).filter(x => isPrime(x)).toList",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3L to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        return result", "        if (n <= 1) return List()\n        val primes\
    \ = new ArrayBuffer[Long]\n        primes += 2\n        for (i <- 3L to n by 2)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n < 2) return List()\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        result", "        if (n < 2) return List()\n        var primes =\
    \ ListBuffer[Long]()\n        var isPrime = Array.fill(n.toInt)(true)\n      \
    \  for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n             \
    \   primes += i\n                for (j <- i until n.toInt by i) {\n         \
    \           isPrime(j) = false\n                }\n            }\n        }\n\
    \        primes.toList", "        if (n <= 1) return List()\n        var primes\
    \ = ListBuffer[Long]()\n        for (i <- 2L to n) {\n            var isPrime\
    \ = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i\
    \ % j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) primes += i\n    \
    \    }\n        primes.toList", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        if (n <= 1) return List()\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        var i = 2L\n      \
    \  while (i < n) {\n            if (isPrime(i)) primes += i\n            i +=\
    \ 1\n        }\n        primes.toList", "        // Fill in your code here\n \
    \       var result = List[Long]()\n        for (i <- 2L to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // TODO: Implement this function\n        return\
    \ List()", "        var primes = List[Long]()\n        for (i <- 2L to n) {\n\
    \            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes = primes :+ i\n        }\n        primes", "        if (n <= 1) return\
    \ List()\n        var primes = new ListBuffer[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n  \
    \      for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n       \
    \ }\n        primes.toList", "        def isPrime(n : Long) : Boolean = {\n  \
    \          if (n == 2) return true\n            if (n < 2 || n % 2 == 0) return\
    \ false\n            var i = 3\n            while (i <= sqrt(n)) {\n         \
    \       if (n % i == 0) return false\n                i += 2\n            }\n\
    \            return true\n        }\n        var result = List[Long]()\n     \
    \   var i = 2L\n        while (i < n) {\n            if (isPrime(i)) result =\
    \ result :+ i\n            i += 1\n        }\n        return result", "      \
    \  if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n       \
    \ var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n\
    \            i += 1\n        }\n        primes.toList", "        if (n < 2) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        var i = 2L\n      \
    \  while (i < n) {\n            if (isPrime(i)) primes += i\n            i +=\
    \ 1\n        }\n        primes.toList", "        if (n < 2) return List()\n  \
    \      val primes = new ListBuffer[Long]\n        val sieve = new Array[Boolean](n.toInt\
    \ + 1)\n        for (i <- 2 to n.toInt) {\n            if (!sieve(i)) {\n    \
    \            primes += i\n                var j = i * i\n                while\
    \ (j <= n) {\n                    sieve(j) = true\n                    j += i\n\
    \                }\n            }\n        }\n        primes.toList", "      \
    \  if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n       \
    \ var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n\
    \            i += 1\n        }\n        primes.toList", "        if (n <= 1) return\
    \ List()\n        var primes = List[Long]()\n        for (i <- 2L to n) {\n  \
    \          if (isPrime(i)) primes = primes :+ i\n        }\n        primes", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n < 2) return false\n            if (n == 2) return true\n  \
    \          if (n % 2 == 0) return false\n            for (i <- 3L to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        return result", "        if (n < 2) return List()\n        var primes\
    \ = new ArrayBuffer[Long]()\n        primes += 2\n        for (i <- 3L to n by\
    \ 2) {\n            var isPrime = true\n            for (j <- 0 until primes.length)\
    \ {\n                if (i % primes(j) == 0) {\n                    isPrime =\
    \ false\n                    break\n                }\n            }\n       \
    \     if (isPrime) primes += i\n        }\n        primes.toList", "        if\
    \ (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n        var\
    \ i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n \
    \           i += 1\n        }\n        primes.toList", "        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        result", "        var result = List[Long]()\n        if\
    \ (n <= 1) return result\n        var i = 2L\n        while (i < n) {\n      \
    \      if (isPrime(i)) result = result :+ i\n            i += 1\n        }\n \
    \       result", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n <= 1) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n       \
    \     for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        if (n <= 1) return List()\n \
    \       var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        primes.toList", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3L to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n by 1) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        if (n < 2) return List()\n        var\
    \ primes = List[Long]()\n        var i = 2L\n        while (i < n) {\n       \
    \     if (isPrime(i)) primes = primes :+ i\n            i += 1\n        }\n  \
    \      primes", "        if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      return result", "        var primes = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) primes = primes :+ i\n        }\n     \
    \   primes", "        if (n < 2) return List()\n        var result = List[Long]()\n\
    \        var i = 2L\n        while (i < n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n            i += 1\n        }\n        result", "        def\
    \ isPrime(x : Long) : Boolean = {\n            if (x == 2) return true\n     \
    \       if (x % 2 == 0) return false\n            for (i <- 3 to sqrt(x).toInt\
    \ by 2) {\n                if (x % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ if (n <= 1) return List()\n        var result = List[Long]()\n        for (i\
    \ <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n     \
    \   }\n        return result", "        if (n < 2) return List()\n        var\
    \ primes = ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n \
    \           if (isPrime(i)) primes += i\n            i += 1\n        }\n     \
    \   primes.toList", "        if (n <= 1) return List()\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        result", "        if (n <= 1) return List()\n        var\
    \ result = List[Long]()\n        var i = 2L\n        while (i < n) {\n       \
    \     if (isPrime(i)) result = result :+ i\n            i += 1\n        }\n  \
    \      result", "        if (n < 2) return List()\n        val primes = ListBuffer[Long]()\n\
    \        val isPrime = Array.fill(n.toInt)(true)\n        for (i <- 2 until n.toInt)\
    \ {\n            if (isPrime(i)) {\n                primes += i\n            \
    \    for (j <- i * i until n.toInt by i) {\n                    isPrime(j) = false\n\
    \                }\n            }\n        }\n        primes.toList", "      \
    \  def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      return result", "        def isPrime(n : Long) : Boolean = {\n        \
    \    if (n < 2) return false\n            if (n == 2) return true\n          \
    \  if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List()\n        var result = List[Long]()\n        var i = 2L\n        while\
    \ (i < n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n            i += 1\n        }\n        result", "        //\
    \ your code here\n        List()", "        if (n <= 1) return List()\n      \
    \  var result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        if (n < 2) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        val isPrime = new\
    \ Array[Boolean](n.toInt)\n        for (i <- 0 until n.toInt) isPrime(i) = true\n\
    \        isPrime(0) = false\n        isPrime(1) = false\n        for (i <- 2 until\
    \ n.toInt) {\n            if (isPrime(i)) {\n                primes += i\n   \
    \             var j = i * i\n                while (j < n) {\n               \
    \     isPrime(j) = false\n                    j += i\n                }\n    \
    \        }\n        }\n        primes.toList", "        if (n < 2) return List()\n\
    \        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for\
    \ (i <- 3L to n by 2) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        primes.toList", "        if (n <= 1) return List()\n        var primes\
    \ = ListBuffer[Long]()\n        for (i <- 2L to n) {\n            var isPrime\
    \ = true\n            for (j <- 2L to sqrt(i).toLong) {\n                if (i\
    \ % j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) primes += i\n    \
    \    }\n        primes.toList", "        if (n < 2) return List()\n        val\
    \ primes = new ArrayBuffer[Long]\n        val isPrime = new Array[Boolean](n.toInt\
    \ + 1)\n        for (i <- 2 to n.toInt) isPrime(i) = true\n        for (i <- 2\
    \ to sqrt(n).toInt) {\n            if (isPrime(i)) {\n                for (j <-\
    \ 2 * i to n.toInt by i) isPrime(j) = false\n            }\n        }\n      \
    \  for (i <- 2 to n.toInt) if (isPrime(i)) primes += i\n        primes.toList",
  "        // your code here\n        return List()", "        if (n <= 1) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        if (n <= 1) return List()\n        var result = ListBuffer[Long]()\n  \
    \      var i = 2L\n        while (i < n) {\n            if (isPrime(i)) result\
    \ += i\n            i += 1\n        }\n        result.toList", "        if (n\
    \ < 2) return List[Long]()\n        var result = List[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        result", "        if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n\
    \        var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) false\n            else if (n == 2) true\n     \
    \       else !(2 to (sqrt(n).toInt + 1)).exists(x => n % x == 0)\n        }\n\
    \        (2 to n.toInt).filter(isPrime(_)).toList", "        if (n < 2) return\
    \ List()\n        val primes = new ArrayBuffer[Long]\n        val isPrime = new\
    \ Array[Boolean](n.toInt)\n        for (i <- 2 until n.toInt) isPrime(i) = true\n\
    \        for (i <- 2 until n.toInt) {\n            if (isPrime(i)) {\n       \
    \         primes += i\n                var j = i * i\n                while (j\
    \ < n) {\n                    isPrime(j) = false\n                    j += i\n\
    \                }\n            }\n        }\n        primes.toList", "      \
    \  if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n      \
    \  var num = 2L\n        while (num < n) {\n            if (isPrime(num)) primes\
    \ += num\n            num += 1\n        }\n        primes.toList", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n     \
    \       if (n == 2) return true\n            if (n % 2 == 0) return false\n  \
    \          for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ if (n < 2) return List()\n        var result = List[Long]()\n        for (i\
    \ <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n     \
    \   }\n        return result", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ var result = List[Long]()\n        for (i <- 2 to n.toInt) {\n            if\
    \ (isPrime(i)) result = result :+ i\n        }\n        return result", "    \
    \    if (n <= 1) return List()\n        val primes = new ArrayBuffer[Long]\n \
    \       primes += 2\n        for (i <- 3L to n by 2) {\n            var isPrime\
    \ = true\n            for (j <- primes) {\n                if (i % j == 0) {\n\
    \                    isPrime = false\n                    break\n            \
    \    }\n            }\n            if (isPrime) primes += i\n        }\n     \
    \   primes.toList", "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        if (n < 2) return List()\n        var\
    \ primes = ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n \
    \           if (isPrime(i)) primes += i\n            i += 1\n        }\n     \
    \   primes.toList", "        var primes = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) primes = primes :+ i\n        }\n        primes",
  "        if (n < 2) return List[Long]()\n        var primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        for (i <- 3L to n by 2) {\n            var isPrime\
    \ = true\n            for (j <- 0 until primes.length) {\n                if (i\
    \ % primes(j) == 0) {\n                    isPrime = false\n                 \
    \   break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        primes.toList", "        if (n < 2) return List()\n  \
    \      var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i <\
    \ n) {\n            if (isPrime(i)) primes += i\n            i += 1\n        }\n\
    \        primes.toList", "        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      result", "        var primes = List[Long]()\n        for (i <- 2L to n)\
    \ {\n            if (isPrime(i)) primes = primes :+ i\n        }\n        primes",
  "        if (n < 2) return List()\n        val primes = new ListBuffer[Long]\n \
    \       primes += 2\n        for (i <- 3L to n by 2) {\n            var isPrime\
    \ = true\n            for (j <- primes) {\n                if (i % j == 0) {\n\
    \                    isPrime = false\n                    break\n            \
    \    }\n            }\n            if (isPrime) primes += i\n        }\n     \
    \   primes.toList", "        if (n < 2) return List[Long]()\n        var primes\
    \ = List[Long](2)\n        for (i <- 3 to n.toInt by 2) {\n            var isPrime\
    \ = true\n            for (j <- 0 until primes.length) {\n                if (i\
    \ % primes(j) == 0) {\n                    isPrime = false\n                 \
    \   break\n                }\n            }\n            if (isPrime) primes =\
    \ primes :+ i\n        }\n        primes", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List()\n        var primes = ListBuffer[Long]()\n        for (i <- 2L to n)\
    \ {\n            var isPrime = true\n            for (j <- 2L to sqrt(i).toLong)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        primes.toList", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        var result = List[Long]()\n        for (i <- 2 to n) {\n            if\
    \ (isPrime(i)) result = result :+ i\n        }\n        return result", "    \
    \    if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n     \
    \   var i = 2L\n        while (i < n) {\n            if (isPrime(i)) primes +=\
    \ i\n            i += 1\n        }\n        primes.toList", "        if (n < 2)\
    \ return List()\n        var primes = ListBuffer[Long]()\n        var i = 2L\n\
    \        while (i < n) {\n            if (isPrime(i)) primes += i\n          \
    \  i += 1\n        }\n        primes.toList", "        if (n < 2) return List()\n\
    \        var primes = ListBuffer[Long]()\n        for (i <- 2L to n) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        primes.toList", "    \
    \    if (n <= 1) return List()\n        var primes = ListBuffer[Long]()\n    \
    \    for (i <- 2L to n) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        primes.toList", "        if (n <= 1) return List[Long]()\n        var\
    \ result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) false\n            else if (n == 2) true\n\
    \            else !(2 to (sqrt(n).toInt)).exists(x => n % x == 0)\n        }\n\
    \        (2 to n.toInt).filter(isPrime).toList.map(_.toLong)", "        if (n\
    \ <= 1) return List()\n        var primes = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) primes = primes :+ i\n        }\n     \
    \   primes", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 2) return true\n            if (n % 2 == 0) return false\n            for (i\
    \ <- 3L to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        return result", "        var result = List[Long]()\n        for (i\
    \ <- 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        result", "        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        result"]
stop_tokens:
- "\n    }\n"
