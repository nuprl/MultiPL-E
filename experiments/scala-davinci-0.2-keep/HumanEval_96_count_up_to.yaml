name: HumanEval_96_count_up_to
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n    // integers that are prime numbers and less than n.\n    //\
  \ for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11) => [2,3,5,7]\n\
  \    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n\
  \    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n   \
  \ def countUpTo(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
  \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
  \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
  \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
  \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
  \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
  \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
  \ 97l.toLong))));\n    }\n\n}\n"
completions: ["        // your code here\n        if (n <= 1) return List()\n    \
    \    var primes = List[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (isPrime(i)) primes = primes :+ i\n            i += 1\n      \
    \  }\n        primes", "        def isPrime(n : Long) : Boolean = {\n        \
    \    if (n <= 1) return false\n            if (n == 2) return true\n         \
    \   if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var list =\
    \ List[Long]()\n        for (i <- 2 to n) {\n            if (isPrime(i)) list\
    \ = list :+ i\n        }\n        return list", "        if (n <= 1) return List()\n\
    \        val primes = new ArrayBuffer[Long]\n        for (i <- 2L to n) {\n  \
    \          if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i\
    \ == 0) return false\n            }\n            return true\n        }\n    \
    \    var result = List[Long]()\n        for (i <- 2L to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        return result", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrt = math.sqrt(n).toLong\n            for (i <- 3L to sqrt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        for (i <- 2L to\
    \ n) {\n            if (isPrime(i)) result = result :+ i\n        }\n        return\
    \ result", "        if (n <= 1) return List()\n        val primes = new ArrayBuffer[Long]()\n\
    \        val isPrime = new Array[Boolean](n.toInt + 1)\n        for (i <- 2 to\
    \ n.toInt) isPrime(i) = true\n        for (i <- 2 to n.toInt) {\n            if\
    \ (isPrime(i)) {\n                primes += i\n                var j = i\n   \
    \             while (j <= n.toInt) {\n                    isPrime(j) = false\n\
    \                    j += i\n                }\n            }\n        }\n   \
    \     primes.toList", "        if (n < 2) return List()\n        var primes =\
    \ ListBuffer[Long]()\n        var sieve = new Array[Boolean](n.toInt + 1)\n  \
    \      for (i <- 2 to n.toInt) sieve(i) = true\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            if (sieve(i)) {\n                var j = i * i\n            \
    \    while (j <= n) {\n                    sieve(j) = false\n                \
    \    j += i\n                }\n            }\n        }\n        for (i <- 2\
    \ to n.toInt) if (sieve(i)) primes += i\n        primes.toList", "        if (n\
    \ < 2) return List()\n        var primes = ListBuffer[Long]()\n        var i =\
    \ 2L\n        while (i < n) {\n            if (isPrime(i)) primes += i\n     \
    \       i += 1\n        }\n        primes.toList", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3L to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        if (n <= 1) return List()\n \
    \       var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i\
    \ < n) {\n            if (isPrime(i)) primes += i\n            i += 1\n      \
    \  }\n        primes.toList", "        def isPrime(n : Long) : Boolean = {\n \
    \           if (n < 2) return false\n            if (n == 2) return true\n   \
    \         if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        // your code here\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2 to n.toInt) {\n            if (isPrime(i)) result = result\
    \ :+ i\n        }\n        return result", "        if (n <= 1) return List()\n\
    \        var primes = new ListBuffer[Long]\n        for (i <- 2L to n) {\n   \
    \         var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        primes.toList", "        if (n < 2) return List()\n\
    \        var primes = ListBuffer[Long]()\n        var i = 2L\n        while (i\
    \ < n) {\n            if (isPrime(i)) primes += i\n            i += 1\n      \
    \  }\n        primes.toList", "        if (n <= 1) return List()\n        var\
    \ primes = ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n \
    \           if (isPrime(i)) primes += i\n            i += 1\n        }\n     \
    \   primes.toList", "        def isPrime(n : Long) : Boolean = {\n           \
    \ if (n <= 1) return false\n            if (n == 2) return true\n            if\
    \ (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n         \
    \   for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2L to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3L to sqrt(n).toLong by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        var result = List[Long]()\n        for (i <- 2L to n) {\n           \
    \ if (isPrime(i)) result = result :+ i\n        }\n        return result", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3L to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var result = List[Long]()\n        for (i <-\
    \ 2L to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (i <- 2L\
    \ to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n     \
    \   result", "        def isPrime(n : Long) : Boolean = {\n            if (n ==\
    \ 2) return true\n            if (n % 2 == 0) return false\n            val sqrtN\
    \ = sqrt(n).toLong\n            for (i <- 3 to sqrtN by 2) {\n               \
    \ if (n % i == 0) return false\n            }\n            return true\n     \
    \   }\n        var result = List[Long]()\n        for (i <- 2 to n) {\n      \
    \      if (isPrime(i)) result = result :+ i\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
