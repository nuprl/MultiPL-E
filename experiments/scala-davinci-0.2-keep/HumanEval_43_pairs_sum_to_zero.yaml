name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5, 0])\n    // False\n\
  \    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n    // >>> pairs_sum_to_zero([1,\
  \ 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n \
  \   // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val set = new HashSet[Long]\n        for (i <- l) {\n     \
    \       if (set.contains(-i)) return true\n            set += i\n        }\n \
    \       false", "        val set = new HashSet[Long]\n        for (i <- l) {\n\
    \            if (set.contains(-i)) return true\n            set += i\n       \
    \ }\n        false", "        val set = new HashSet[Long]\n        for (i <- l)\
    \ {\n            if (set.contains(-i)) return true\n            set += i\n   \
    \     }\n        false", "        val set = new HashSet[Long]\n        for (i\
    \ <- l) {\n            if (set.contains(-i)) return true\n            set += i\n\
    \        }\n        false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) return true\n        }\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        false", "        val s = l.toSet\n      \
    \  for (i <- l) {\n            if (s.contains(-i)) return true\n        }\n  \
    \      return false", "        val s = l.toSet\n        for (x <- s) {\n     \
    \       if (s.contains(-x)) return true\n        }\n        return false", " \
    \       var set = Set[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   var h = HashSet[Long]()\n        for (i <- l) {\n            if (h.contains(-i))\
    \ return true\n            h += i\n        }\n        return false", "       \
    \ val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        false", "        var m\
    \ = Map[Long, Long]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ m(i) += 1\n            else m(i) = 1\n        }\n        for (i <- l) {\n  \
    \          if (i == 0) {\n                if (m(i) >= 2) return true\n       \
    \     } else {\n                if (m.contains(-i)) return true\n            }\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (i <- l) {\n            if (set.contains(-i)) return true\n         \
    \   set += i\n        }\n        false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        false", "        var set = Set[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        var set = new HashSet[Long]()\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
