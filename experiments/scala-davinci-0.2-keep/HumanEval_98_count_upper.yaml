name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
  \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ['        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).length', '        s.zipWithIndex.filter(x =>
    x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n      \
    \  }\n        count", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count +=\
    \ 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 ==
    0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2 == 0 &&
    x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n        }\n     \
    \   count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.foldLeft(0L)((acc,
    x) => if (x._2 % 2 == 0 && x._1.isUpper) acc + 1 else acc)', "        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper)\
    \ count += 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length if i % 2 == 0) {\n            if (s(i).isUpper) count += 1\n      \
    \  }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && vowels.contains(x._1)).size", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        val vowels = Set('A', 'E', 'I',\
    \ 'O', 'U')\n        s.zipWithIndex.filter(x => vowels.contains(x._1) && x._2\
    \ % 2 == 0).size", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && vowels.contains(x._1)).size", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).length', "        var count = 0\n        for (i <- 0\
    \ until s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n\
    \        count", "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x\
    \ => vowels.contains(x._1) && x._2 % 2 == 0).size", "        val vowels = Set('A',\
    \ 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x => x._2 % 2 == 0 && vowels.contains(x._1)).size",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count +=\
    \ 1\n        }\n        count", "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n  \
    \          if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length if i %\
    \ 2 == 0) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", "        var count\
    \ = 0\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ count += 1\n        }\n        count", "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count +=\
    \ 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 ==
    0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2 == 0 &&
    x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).length', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", "        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n        }\n     \
    \   count", "        var count = 0\n        for (i <- 0 until s.length by 2) {\n\
    \            if (s(i).isUpper) count += 1\n        }\n        count", "      \
    \  val vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x\
    \ => vowels.contains(x._1) && x._2 % 2 == 0).size", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2 == 0
    && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        return s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && vowels.contains(x._1)).size", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', "    \
    \    var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n    \
    \        if (s(i).isUpper) count += 1\n        }\n        count", "        val\
    \ vowels = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && vowels.contains(x._1)).size", "        val vowels = Set('A', 'E',\
    \ 'I', 'O', 'U')\n        s.zipWithIndex.filter(x => x._2 % 2 == 0 && vowels.contains(x._1)).length",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length if i % 2 == 0) {\n            if (s(i).isUpper) count +=\
    \ 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 ==
    0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2 == 0 &&
    x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).length',
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", "        var count\
    \ = 0\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ count += 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n  \
    \          if (s(i).isUpper) count += 1\n        }\n        count", "        var\
    \ count = 0\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0\
    \ && s(i).isUpper) count += 1\n        }\n        count", "        var count =\
    \ 0\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ count += 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).length',
  "        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).count(x => x._1\
    \ == 'A' || x._1 == 'E' || x._1 == 'I' || x._1 == 'O' || x._1 == 'U')", "    \
    \    var count = 0\n        for (i <- 0 until s.length by 2) {\n            val\
    \ c = s(i)\n            if (c >= 'A' && c <= 'Z') count += 1\n        }\n    \
    \    count", "        // Fill in the code here\n        return 0", "        s.zipWithIndex.foldLeft(0)\
    \ {\n            case (acc, (c, i)) => if (i % 2 == 0 && c.isUpper) acc + 1 else\
    \ acc\n        }", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).length', '        s.zipWithIndex.filter(x =>
    x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        // Fill in the code here\n        0", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        // Fill in the code here\n        0",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count +=\
    \ 1\n        }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 ==
    0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n        }\n     \
    \   count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", "  \
    \      var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', "    \
    \    var count = 0\n        for (i <- 0 until s.length by 2) {\n            if\
    \ (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n  \
    \          if (s(i).isUpper) count += 1\n        }\n        count", "        var\
    \ count = 0\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ count += 1\n        }\n        count", "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        val vowels = Set('A', 'E', 'I',\
    \ 'O', 'U')\n        s.zipWithIndex.filter(x => vowels.contains(x._1) && x._2\
    \ % 2 == 0).length", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        val vowels = Set('A', 'E', 'I', 'O',\
    \ 'U')\n        s.zipWithIndex.filter(x => x._2 % 2 == 0 && vowels.contains(x._1)).length",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', "    \
    \    var count = 0\n        for (i <- 0 until s.length by 2) {\n            if\
    \ (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n      \
    \  }\n        count", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", "        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n        }\n     \
    \   count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size']
stop_tokens:
- "\n    }\n"
