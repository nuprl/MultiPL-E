name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
  \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ['        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).length', '        s.zipWithIndex.filter(x =>
    x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (s(i).isUpper) count += 1\n        }\n    \
    \    count", "        var count = 0\n        for (i <- 0 until s.length by 2)\
    \ {\n            if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i\
    \ <- 0 until s.length by 2) {\n            if (s(i).isUpper) count += 1\n    \
    \    }\n        count", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size',
  "        var count = 0\n        for (i <- 0 until s.length by 2) {\n           \
    \ if (s(i).isUpper) count += 1\n        }\n        count", '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', "        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n      \
    \  }\n        count", "        var count = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            if (s(i).isUpper) count += 1\n        }\n        count",
  '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).size', '        s.zipWithIndex.filter(x => x._2 % 2
    == 0 && x._1.isUpper).size']
stop_tokens:
- "\n    }\n"
