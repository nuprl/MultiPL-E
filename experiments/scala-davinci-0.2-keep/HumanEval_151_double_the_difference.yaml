name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1,\
  \ -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0])\
  \ == 0  \n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum = 0L\n        for (i <- lst) {\n            if (i >\
    \ 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n                    sum\
    \ += pow(i, 2).toLong\n                }\n            }\n        }\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += pow(i,\
    \ 2).toLong\n                }\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n \
    \       }\n        sum", "        val lst2 = lst.filter(x => x > 0 && x % 1 ==\
    \ 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n        val lst6 =\
    \ lst5.sum\n        return lst6.toLong", '        lst.filter(x => x % 2 == 1 &&
    x >= 0).map(x => x * x).sum.toLong', "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) sum += i * i\n        }\n        return\
    \ sum", "        var sum = 0\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 2 == 1) {\n                sum += i * i\n            }\n        }\n \
    \       return sum", "        var sum = 0L\n        for (i <- lst) {\n       \
    \     if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n           \
    \ }\n        }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i % 2 == 1) sum += i * i\n        }\n        return sum", " \
    \       var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n            }\n   \
    \     }\n        return sum", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n \
    \                   sum += i * i\n                }\n            }\n        }\n\
    \        return sum", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) sum += i *\
    \ i\n            }\n        }\n        return sum", "        var sum = 0L\n  \
    \      for (i <- lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        return sum", "        val\
    \ lst2 = lst.filter(x => x % 2 == 1 && x >= 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        lst3.sum.toLong", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) {\n                sum += i * i\n      \
    \      }\n        }\n        return sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if\
    \ (i % 2 == 1) {\n                    sum += i * i\n                }\n      \
    \      }\n        }\n        return sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i % 2 == 1) {\n                sum += i * i\n   \
    \         }\n        }\n        sum", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        val lst2 = lst.filter(x => x\
    \ > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => pow(x, 2).toLong)\n   \
    \     val lst4 = lst3.filter(x => x % 2 == 1)\n        if (lst4.isEmpty) 0\n \
    \       else lst4.sum", '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong',
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        var\
    \ sum = 0\n        for (i <- lst) {\n            if (i % 2 == 1) {\n         \
    \       sum += i * i\n            }\n        }\n        return sum", "       \
    \ var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i >\
    \ 0 && i % 1 == 0) {\n                if (i % 2 == 1) sum += i * i\n         \
    \   }\n        }\n        return sum", "        val lst2 = lst.filter(x => x %\
    \ 2 == 1)\n        val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                if (i % 2 == 1) sum += i * i\n           \
    \ }\n        }\n        return sum", '        lst.filter(x => x % 2 == 1 && x
    > 0).map(x => x * x).sum.toLong', '        lst.filter(x => x % 2 == 1).map(x =>
    x * x).sum.toLong', "        var sum = 0L\n        for (i <- lst) {\n        \
    \    if (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n            }\n   \
    \     }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n     \
    \       if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2\
    \ == 1) {\n                    sum += i * i\n                }\n            }\n\
    \        }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i * i\n            }\n  \
    \      }\n        return sum", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i >= 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n\
    \                    sum += i * i\n                }\n            }\n        }\n\
    \        return sum", "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n\
    \        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x =>\
    \ x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n        lst5.sum.toLong",
  "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.map(x => x * 2)\n        lst5.sum.toLong", "        var sum = 0L\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    if (i % 2 == 1) sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i >\
    \ 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n                    sum\
    \ += i * i\n                }\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        sum", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n     \
    \           if (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n \
    \               }\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        var sum : Long = 0\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 2 == 1) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        return sum", "        val squares = lst.map(x => x * x).filter(x\
    \ => x % 2 == 1)\n        squares.sum.toLong", "        var sum = 0L\n       \
    \ for (i <- lst) {\n            if (i % 2 == 1) {\n                sum += i *\
    \ i\n            }\n        }\n        return sum", "        var sum = 0L\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    if (i % 2 == 1) {\n                    sum += i * i\n                }\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if\
    \ (i % 2 == 1) sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1 && i > 0) {\n\
    \                sum += i * i\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) sum += i * i\n        }\n        return sum", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        val lst2 = lst.filter(x => x % 2 == 1)\n        val lst3 = lst2.map(x =>\
    \ x * x)\n        val lst4 = lst3.sum\n        return lst4.toLong", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1 && i > 0) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n \
    \       }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n   \
    \         if (i % 2 == 1) {\n                sum += i * i\n            }\n   \
    \     }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n     \
    \       if (i % 2 == 1) sum += i * i\n        }\n        return sum", "      \
    \  var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i %\
    \ 2 == 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n \
    \       }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n   \
    \         if (i % 2 == 1) {\n                sum += i * i\n            }\n   \
    \     }\n        sum", '        lst.filter(x => x % 2 == 1 && x >= 0).map(x =>
    x * x).sum.toLong', '        lst.filter(x => x > 0 && x % 2 == 1).map(x => x *
    x).sum.toLong', "        val lst2 = lst.filter(x => x % 2 == 1 && x >= 0)\n  \
    \      val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong', "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i % 2 == 1 && i > 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                if (i % 2 == 1) sum += i * i\n           \
    \ }\n        }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        sum", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        val lst2 = lst.filter(x => x\
    \ % 2 == 1 && x > 0 && x == x.toInt)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.map(x => x * 2)\n        lst4.sum.toLong", '        lst.filter(x
    => x > 0 && x % 2 == 1).map(x => x * x).sum.toLong', "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 1)\n        val sum = lst4.sum\n        return\
    \ sum", "        val oddSquares = lst.filter(x => x % 2 == 1 && x > 0).map(x =>\
    \ x * x)\n        if (oddSquares.isEmpty) 0 else oddSquares.sum * 2", "      \
    \  var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                if (i % 2 == 1) {\n                    sum += i * i\n   \
    \             }\n            }\n        }\n        sum", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i % 2 == 1) sum += pow(i, 2).toLong\n\
    \        }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n  \
    \          if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2\
    \ == 1) {\n                    sum += i * i\n                }\n            }\n\
    \        }\n        return sum", "        val (odd, even) = lst.partition(x =>\
    \ x % 2 == 1)\n        val oddSum = odd.map(x => x * x).sum\n        val evenSum\
    \ = even.map(x => x * x).sum\n        (oddSum - evenSum) * 2", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        val lst2 = lst.filter(x => x % 2 == 1)\n        val lst3 = lst2.map(x =>\
    \ x * x)\n        val lst4 = lst3.map(x => x * 2)\n        val lst5 = lst4.sum\n\
    \        return lst5.toLong", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i % 2 == 1) sum += pow(i, 2).toLong\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum", '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong', '        lst.filter(x
    => x % 2 == 1).map(x => x * x).sum.toLong', "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i\
    \ % 2 == 1) {\n                    sum += pow(i, 2).toLong\n                }\n\
    \            }\n        }\n        sum", "        val lst2 = lst.filter(x => x\
    \ > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n  \
    \      lst5.sum.toLong", "        var sum = 0L\n        for (i <- lst) {\n   \
    \         if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n       \
    \     }\n        }\n        sum", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", '        lst.filter(x => x % 2 == 1 &&
    x >= 0).map(x => x * x).sum.toLong', "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2 ==\
    \ 1) {\n                    sum += pow(i, 2).toLong\n                }\n     \
    \       }\n        }\n        sum", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n\
    \                    sum += i * i\n                }\n            }\n        }\n\
    \        return sum", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n          \
    \  }\n        }\n        sum", "        val lst2 = lst.filter(x => x > 0 && x\
    \ % 1 == 0)\n        val lst3 = lst2.map(x => pow(x, 2).toLong)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        if (lst4.length == 0) 0\n        else\
    \ lst4.reduceLeft(_ + _)", "        var sum = 0L\n        for (i <- lst) {\n \
    \           if (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) sum +=\
    \ i * i\n            }\n        }\n        sum", "        val lst2 = lst.filter(x\
    \ => x % 2 == 1 && x > 0)\n        val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) sum += pow(i, 2).toLong\n        }\n        return sum", "    \
    \    val lst2 = lst.filter(x => x % 2 == 1 && x >= 0)\n        if (lst2.isEmpty)\
    \ 0\n        else lst2.map(x => x * x).sum.toLong", "        var sum = 0L\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    sum += pow(i, 2).toLong\n            }\n        }\n        return sum", " \
    \       val lst2 = lst.filter(x => x % 2 == 1 && x > 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        lst3.sum.toLong", "        val lst2 = lst.filter(x => x >\
    \ 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        lst4.sum.toLong", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i % 2 == 1) sum += i * i\n   \
    \     }\n        return sum", "        // Your code here\n        return 0", " \
    \       var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 1) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        return sum", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n          \
    \  }\n        }\n        sum", '        lst.filter(x => x % 2 == 1 && x > 0).map(x
    => x * x).sum.toLong', "        var sum = 0L\n        for (i <- lst) {\n     \
    \       if (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) sum += i *\
    \ i\n            }\n        }\n        return sum", "        var sum = 0L\n  \
    \      for (i <- lst) {\n            if (i % 2 == 1) sum += pow(i, 2).toLong\n\
    \        }\n        return sum", "        val squares = lst.filter(x => x % 2\
    \ == 1 || x % 2 == -1).map(x => x * x)\n        if (squares.length == 0) 0\n \
    \       else squares.sum.toLong", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += (i * i)\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for (i <- lst) {\n            if (i % 2 == 1) {\n                sum += i *\
    \ i\n            }\n        }\n        sum", "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i\
    \ % 2 == 1) {\n                    sum += pow(i, 2).toLong\n                }\n\
    \            }\n        }\n        return sum", "        var sum = 0L\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if\
    \ (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n              \
    \  }\n            }\n        }\n        return sum", "        var sum = 0L\n \
    \       for (i <- lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ i * i\n            }\n        }\n        sum", "        var sum = 0L\n     \
    \   for (i <- lst) {\n            if (i % 2 == 1) {\n                sum += i\
    \ * i\n            }\n        }\n        return sum", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        sum", "    \
    \    var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 ==\
    \ 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                if (i % 2 == 1) {\n                    sum += i * i\n       \
    \         }\n            }\n        }\n        return sum", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n     \
    \           if (i % 2 == 1) {\n                    sum += i * i\n            \
    \    }\n            }\n        }\n        return sum", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i % 2 == 1) {\n                sum\
    \ += pow(i, 2).toLong\n            }\n        }\n        sum", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n            \
    \    sum += pow(i, 2).toLong\n            }\n        }\n        return sum", " \
    \       var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  '        lst.filter(x => x % 2 == 1 && x > 0).map(x => x * x).sum.toLong', "   \
    \     var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) sum\
    \ += i * i\n        }\n        sum", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) sum += i * i\n        }\n        sum", '        lst.filter(x
    => x % 2 == 1).map(x => x * x).sum.toLong', "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        sum",
  "        val lst2 = lst.filter(x => x % 2 == 1 && x > 0 && x % 1 == 0)\n       \
    \ lst2.map(x => x * x).sum.toLong", '        lst.filter(x => x % 2 == 1 && x >
    0).map(x => x * x).sum.toLong', "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        sum", "        val lst2 = lst.filter(x\
    \ => x % 2 == 1 && x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x *\
    \ x)\n        val lst4 = lst3.map(x => x * 2)\n        lst4.sum.toLong", "   \
    \     var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong',
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong',
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        sum", "     \
    \   var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1 && i >\
    \ 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n  \
    \      sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i\
    \ > 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n                  \
    \  sum += i * i\n                }\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i > 0 && i % 1 == 0) {\n                if (i % 2 == 1) {\n               \
    \     sum += pow(i, 2).toLong\n                }\n            }\n        }\n \
    \       return sum", '        lst.filter(x => x % 2 == 1 && x > 0).map(x => x
    * x).sum.toLong', "        var sum = 0\n        for (i <- lst) {\n           \
    \ if (i % 2 == 1) sum += pow(i, 2).toLong\n        }\n        sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) sum += i * i\n\
    \        }\n        return sum", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) sum += pow(i, 2).toLong\n        }\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        val\
    \ lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x =>\
    \ x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val sum = lst4.sum\n\
    \        return sum", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n \
    \           }\n        }\n        sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2\
    \ == 1) {\n                    sum += pow(i, 2).toLong\n                }\n  \
    \          }\n        }\n        return sum", "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i\
    \ % 2 == 1) {\n                    sum += i * i\n                }\n         \
    \   }\n        }\n        return sum", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2 ==\
    \ 1) sum += i * i\n            }\n        }\n        sum", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        var sum = 0\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        return sum",
  "        val lst2 = lst.filter(x => x % 2 == 1 && x > 0 && x == x.toInt)\n     \
    \   val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n            \
    \    sum += pow(i, 2).toLong\n            }\n        }\n        sum", "      \
    \  var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                if (i % 2 == 1) {\n                    sum += i * i\n   \
    \             }\n            }\n        }\n        return sum", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             if (i % 2 == 1) {\n                    sum += i * i\n          \
    \      }\n            }\n        }\n        return sum", "        val lst2 = lst.filter(x\
    \ => x % 2 != 0 && x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => pow(x,\
    \ 2).toLong)\n        val lst4 = lst3.map(x => x * 2)\n        val lst5 = lst4.sum\n\
    \        return lst5", "        var sum = 0L\n        for (i <- lst) {\n     \
    \       if (i % 2 == 1) sum += i * i\n        }\n        return sum", "      \
    \  var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 1) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n   \
    \     return sum", "        var sum = 0L\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        return sum", "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i % 2 == 1) sum += pow(i, 2).toLong\n        }\n\
    \        sum", '        lst.filter(x => x % 2 == 1 && x > 0).map(x => x * x).sum.toLong',
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) if (i % 2 == 1) sum += i * i\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        sum", "     \
    \   var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 ==\
    \ 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n  \
    \      sum", '        lst.filter(x => x % 2 == 1 && x > 0).map(x => x * x).sum.toLong',
  "        val lst2 = lst.filter(x => x % 2 == 1 && x > 0 && x % 1 == 0)\n       \
    \ if (lst2.length == 0) 0\n        else lst2.map(x => x * x).sum.toLong", "  \
    \      val lst2 = lst.filter(x => x % 2 == 1 && x > 0 && x % 1 == 0)\n       \
    \ val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong", "        var sum\
    \ = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n            \
    \    sum += i * i\n            }\n        }\n        sum", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += pow(i, 2).toLong\n            }\n        }\n        sum", "        var\
    \ sum = 0\n        for (i <- lst) {\n            if (i % 2 == 1) {\n         \
    \       sum += pow(i, 2).toLong\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                if (i % 2 == 1) sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2\
    \ == 1) {\n                    sum += pow(i, 2).toLong\n                }\n  \
    \          }\n        }\n        sum", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                if (i % 2 ==\
    \ 1) {\n                    sum += i * i\n                }\n            }\n \
    \       }\n        sum", "        var sum = 0L\n        for (i <- lst) {\n   \
    \         if (i.isValidInt) {\n                if (i % 2 == 1) {\n           \
    \         sum += i * i\n                }\n            }\n        }\n        sum",
  '        lst.filter(x => x > 0 && x % 2 == 1).map(x => x * x).sum.toLong', "   \
    \     var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += i * i\n\
    \                }\n            }\n        }\n        return sum", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n        \
    \        sum += pow(i, 2).toLong\n            }\n        }\n        sum", "  \
    \      var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", '        lst.filter(x => x > 0 && x % 2 == 1).map(x => x * x).sum.toLong',
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        val lst2 = lst.filter(x => x % 2 == 1 && x > 0 && x %\
    \ 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        lst3.sum.toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                if (i % 2 == 1) {\n                    sum += pow(i,\
    \ 2).toLong\n                }\n            }\n        }\n        sum", '        lst.filter(x
    => x % 2 == 1 && x > 0).map(x => x * x).sum.toLong', "        var sum = 0\n  \
    \      for (i <- lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
