name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n  \
  \  def orderByPoints(nums : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = nums(i).toString.map(_.asDigit).sum\n            if\
    \ (!map.contains(sum)) map(sum) = List(nums(i))\n            else map(sum) = map(sum)\
    \ :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n        var\
    \ result = List[Long]()\n        for (key <- keys) result = result ::: map(key)\n\
    \        result", "        val numsWithPoints = nums.map(n => (n, n.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(n => (n._2, nums.indexOf(n._1))).map(_._1)", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val key = num.abs.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(key)) map(key) = List(num)\n            else map(key)\
    \ = map(key) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      val result = new ListBuffer[Long]\n        for (key <- keys) {\n      \
    \      val list = map(key)\n            for (num <- list) result += num\n    \
    \    }\n        result.toList", "        var map = new HashMap[Long, List[Long]]()\n\
    \        for (num <- nums) {\n            var sum = 0L\n            var n = num\n\
    \            while (n != 0) {\n                sum += n % 10\n               \
    \ n /= 10\n            }\n            if (!map.contains(sum)) map(sum) = List()\n\
    \            map(sum) = map(sum) :+ num\n        }\n        var list = List[Long]()\n\
    \        for (num <- nums) {\n            var sum = 0L\n            var n = num\n\
    \            while (n != 0) {\n                sum += n % 10\n               \
    \ n /= 10\n            }\n            list = list :+ map(sum).head\n         \
    \   map(sum) = map(sum).tail\n        }\n        list", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ sumA = a.toString.map(x => x.asDigit).sum\n            val sumB = b.toString.map(x\
    \ => x.asDigit).sum\n            if (sumA == sumB) a < b else sumA < sumB\n  \
    \      })", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map += (sum -> List(num))\n            else\
    \ map(sum) = map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", "        nums.sortWith((x, y) => {\n     \
    \       val xSum = x.toString.map(c => c.asDigit).sum\n            val ySum =\
    \ y.toString.map(c => c.asDigit).sum\n            if (xSum == ySum) {\n      \
    \          nums.indexOf(x) < nums.indexOf(y)\n            } else {\n         \
    \       xSum < ySum\n            }\n        })", "        nums.sortWith((a, b)\
    \ => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        nums.sortWith((a, b) => {\n          \
    \  val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = num.toString.map(c => c.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        sorted.map(x => x._2).flatten",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', "        val map\
    \ = new HashMap[Long, List[Long]]\n        for (n <- nums) {\n            val\
    \ sum = n.toString.map(_.asDigit).sum\n            if (!map.contains(sum)) map(sum)\
    \ = List(n)\n            else map(sum) = map(sum) :+ n\n        }\n        val\
    \ keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n \
    \       for (k <- keys) {\n            val list = map(k)\n            list.sorted.foreach(result\
    \ += _)\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", "        val map = new HashMap[Long, Long]\n \
    \       for (i <- 0 until nums.length) {\n            val sum = nums(i).toString.map(c\
    \ => c.asDigit).sum\n            map += (sum -> nums(i))\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n         \
    \       nums.indexOf(a) < nums.indexOf(b)\n            } else {\n            \
    \    aSum < bSum\n            }\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (n <- nums) {\n            val key = n.abs.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(key)) map(key) = List(n)\n            else map(key)\
    \ = map(key) :+ n\n        }\n        val keys = map.keys.toList.sorted\n    \
    \    val result = new ListBuffer[Long]\n        for (k <- keys) {\n          \
    \  val list = map(k)\n            for (n <- list) result += n\n        }\n   \
    \     result.toList", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  "        val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n\
    \            val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n\
    \            val key = sumDigits(num)\n            if (map.contains(key)) {\n\
    \                map(key) = num :: map(key)\n            } else {\n          \
    \      map(key) = List(num)\n            }\n        }\n        var result = List[Long]()\n\
    \        for (num <- nums) {\n            val key = sumDigits(num)\n         \
    \   if (map(key).head == num) {\n                result = result ::: map(key)\n\
    \                map(key) = map(key).tail\n            }\n        }\n        result",
  "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", "        val sorted = nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })\n        sorted", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map += (sum -> List())\n            map(sum)\
    \ = map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      val result = new ListBuffer[Long]\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        nums.sortWith((a, b) => {\n      \
    \      val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        val\
    \ numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n       \
    \ numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        val map = new\
    \ HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length) {\n      \
    \      val sum = sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum)\
    \ = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(x => x._2)",
  '        nums.sortWith((x, y) => sumDigits(x) < sumDigits(y) || (sumDigits(x) ==
    sumDigits(y) && nums.indexOf(x) < nums.indexOf(y)))', "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0L\n            var m = n\n      \
    \      while (m != 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            sum\n        }\n        nums.zipWithIndex.sortBy(x\
    \ => (sumDigits(x._1), x._2)).map(_._1)", "        nums.sortWith((a, b) => {\n\
    \            val aSum = a.toString.map(_.asDigit).sum\n            val bSum =\
    \ b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n    \
    \    for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", "        nums.sortWith((a, b) => {\n     \
    \       val (a1, b1) = (a.abs, b.abs)\n            val (a2, b2) = (a1.toString.map(_.asDigit).sum,\
    \ b1.toString.map(_.asDigit).sum)\n            if (a2 == b2) a1 < b1 else a2 <\
    \ b2\n        })", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum) = List()\n\
    \            map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        nums.sortWith((a, b) => {\n        \
    \    val sumA = a.toString.map(c => c.asDigit).sum\n            val sumB = b.toString.map(c\
    \ => c.asDigit).sum\n            if (sumA == sumB) a < b else sumA < sumB\n  \
    \      })", '        nums.sortWith((a, b) => (a.toString.map(_.asDigit).sum, a)
    < (b.toString.map(_.asDigit).sum, b))', "        nums.sortWith((a, b) => {\n \
    \           val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      var result = List[Long]()\n        for (key <- keys) result = result :::\
    \ map(key)\n        result", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val key = num.abs.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(key)) map(key) = List(num)\n            else map(key)\
    \ = map(key) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      val result = new ListBuffer[Long]\n        for (key <- keys) {\n      \
    \      val list = map(key)\n            val sorted = list.sorted\n           \
    \ for (num <- sorted) result += num\n        }\n        result.toList", "    \
    \    val numsWithPoints = nums.map(num => (num, num.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        val map\
    \ = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n            val\
    \ sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum)) map(sum)\
    \ = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n      \
    \  val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)", "    \
    \    val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n  \
    \          val sum = sumDigits(num)\n            if (map.contains(sum)) {\n  \
    \              map(sum) = num :: map(sum)\n            } else {\n            \
    \    map(sum) = List(num)\n            }\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) {\n            result\
    \ = map(key) ::: result\n        }\n        result", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = sumDigits(num)\n            if (map.contains(sum)) {\n         \
    \       map(sum) = map(sum) :+ num\n            } else {\n                map(sum)\
    \ = List(num)\n            }\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) {\n    \
    \        result ++= map(key)\n        }\n        result.toList", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        val numsWithPoints = nums.map(x\
    \ => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x => (x._2,\
    \ x._1)).map(_._1)", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      val map = new HashMap[Long, List[Long]]()\n        for (n <- nums) {\n\
    \            val sum = n.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(n)\n            else map(sum) = map(sum) :+ n\n        }\n \
    \       val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)", " \
    \       nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a, b) =>
    sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        nums.sortWith((a, b) => {\n        \
    \    val aSum = sumDigits(a)\n            val bSum = sumDigits(b)\n          \
    \  if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n  \
    \          } else {\n                aSum < bSum\n            }\n        })",
  "        val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val sums = nums.map(x =>\
    \ x.toString.map(_.asDigit).sum)\n        nums.zip(sums).sortBy(_._2).map(_._1)",
  "        val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            aSum < bSum\
    \ || (aSum == bSum && nums.indexOf(a) < nums.indexOf(b))\n        })", "     \
    \   val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n   \
    \         val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  "        val map = new HashMap[Long, List[Long]]\n        for (n <- nums) {\n  \
    \          val sum = n.toString.map(x => x.asDigit).sum\n            if (map.contains(sum))\
    \ map(sum) = n :: map(sum)\n            else map(sum) = List(n)\n        }\n \
    \       val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (k <- keys) result ++= map(k)\n        result.toList", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = sumDigits(num)\n            if (map.contains(sum)) {\n         \
    \       map(sum) = map(sum) :+ num\n            } else {\n                map(sum)\
    \ = List(num)\n            }\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val list = map.toList.sortBy(_._1)\n \
    \       list.flatMap(x => x._2)", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        nums.sortWith((a, b) => {\n          \
    \  val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        val\
    \ numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n       \
    \ numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        val numsWithPoints\
    \ = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._1)).map(_._1)", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val xs = nums.zipWithIndex.map(x => (x._1,\
    \ x._1.toString.map(_.asDigit).sum, x._2)).sortBy(x => (x._2, x._3))\n       \
    \ xs.map(_._1)", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (map.contains(sum)) {\n                map(sum) = num :: map(sum)\n   \
    \         } else {\n                map(sum) = List(num)\n            }\n    \
    \    }\n        val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- keys) {\n            result ++= map(key)\n        }\n   \
    \     result.toList", "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (num <- nums) {\n            val sum = sumDigits(num)\n            if\
    \ (map.contains(sum)) {\n                map(sum) = num :: map(sum)\n        \
    \    } else {\n                map(sum) = List(num)\n            }\n        }\n\
    \        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) {\n            result = map(key) ::: result\n     \
    \   }\n        result", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = new HashMap[Long, List[Long]]()\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (!map.contains(sum)) map(sum) = List()\n            map(sum) = map(sum)\
    \ :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  "        val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val numsWithPoints = nums.map(num\
    \ => (num, num.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(numWithPoint\
    \ => (numWithPoint._2, nums.indexOf(numWithPoint._1))).map(_._1)", "        val\
    \ map = new HashMap[Long, Long]\n        for (i <- 0 until nums.length) {\n  \
    \          val sum = nums(i).toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map += sum -> nums(i)\n            else {\n                val list = map(sum)\
    \ :: List(nums(i))\n                map += sum -> list.min\n            }\n  \
    \      }\n        map.toList.sortBy(_._1).map(_._2)", "        val numsWithPoints\
    \ = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "        val map\
    \ = new HashMap[Long, List[Long]]\n        for (n <- nums) {\n            val\
    \ sum = n.toString.map(_.asDigit).sum\n            if (!map.contains(sum)) map(sum)\
    \ = List(n)\n            else map(sum) = map(sum) :+ n\n        }\n        val\
    \ keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n \
    \       for (k <- keys) result ++= map(k)\n        result.toList", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = num.toString.map(x => x.asDigit).sum\n            if (map.contains(sum))\
    \ {\n                map(sum) = map(sum) :+ num\n            } else {\n      \
    \          map(sum) = List(num)\n            }\n        }\n        val keys =\
    \ map.keys.toList.sorted\n        var result = List[Long]()\n        for (key\
    \ <- keys) {\n            result = result ::: map(key).sorted\n        }\n   \
    \     result", "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      nums.sortWith((x, y) => {\n            val xs = x.toString.map(_.asDigit).sum\n\
    \            val ys = y.toString.map(_.asDigit).sum\n            if (xs == ys)\
    \ x < y else xs < ys\n        })", "        nums.sortWith((a, b) => {\n      \
    \      val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        nums.sortWith((a, b) => {\n      \
    \      val aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        val map = new HashMap[Long, List[Long]]\n        for (num\
    \ <- nums) {\n            val key = num.abs.toString.map(_.asDigit).sum\n    \
    \        if (!map.contains(key)) map(key) = List[Long]()\n            map(key)\
    \ = map(key) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      var result = List[Long]()\n        for (key <- keys) result = result :::\
    \ map(key)\n        result", "        val map = new HashMap[Long, List[Long]]()\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (!map.contains(sum)) map(sum) = List[Long]()\n            map(sum) = map(sum)\
    \ :+ num\n        }\n        val keys = map.keys.toList.sorted\n        var result\
    \ = List[Long]()\n        for (key <- keys) result = result ::: map(key)\n   \
    \     result", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b))', "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(x => x.asDigit).sum\n            val\
    \ bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) a <\
    \ b else aSum < bSum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", '        nums.sortWith((a, b) => sumDigits(a) <
    sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  "        val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", "  \
    \      nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = sumDigits(num)\n\
    \            if (map.contains(sum)) {\n                map(sum) = map(sum) :+\
    \ num\n            } else {\n                map(sum) = List(num)\n          \
    \  }\n        }\n        val keys = map.keys.toList.sorted\n        var result\
    \ = List[Long]()\n        for (key <- keys) {\n            result = result :::\
    \ map(key)\n        }\n        result", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (map.contains(sum)) {\n                map(sum) = map(sum) :+ num\n   \
    \         } else {\n                map(sum) = List(num)\n            }\n    \
    \    }\n        val sortedKeys = map.keys.toList.sorted\n        var result =\
    \ List[Long]()\n        for (key <- sortedKeys) {\n            result = result\
    \ ::: map(key)\n        }\n        result", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (map.contains(sum)) {\n                map(sum) = map(sum) :+ num\n   \
    \         } else {\n                map(sum) = List(num)\n            }\n    \
    \    }\n        val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- keys) {\n            result ++= map(key)\n        }\n   \
    \     result.toList", "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, nums.indexOf(x._1))).map(_._1)", " \
    \       nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      val result = new ListBuffer[Long]\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (n <- nums) {\n            val sum = n.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List()\n            map(sum) =\
    \ n :: map(sum)\n        }\n        val keys = map.keys.toList.sorted\n      \
    \  val result = new ListBuffer[Long]\n        for (key <- keys) result ++= map(key)\n\
    \        result.toList", "        val map = new HashMap[Long, List[Long]]\n  \
    \      for (num <- nums) {\n            val sum = sumDigits(num)\n           \
    \ if (map.contains(sum)) {\n                map(sum) = num :: map(sum)\n     \
    \       } else {\n                map(sum) = List(num)\n            }\n      \
    \  }\n        val sortedKeys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- sortedKeys) {\n            result = map(key) ::: result\n\
    \        }\n        result", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", "        nums.sortWith((a, b) => {\n         \
    \   val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        nums.sortWith((a, b) => {\n          \
    \  val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", '        nums.sortWith((a, b) => sumDigits(a) <
    sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  "        val map = new HashMap[Long, List[Long]]()\n        for (num <- nums) {\n\
    \            val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List()\n            map(sum) = map(sum) :+ num\n        }\n     \
    \   val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]()\n\
    \        for (key <- keys) result ++= map(key)\n        result.toList", "    \
    \    val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n  \
    \          val sum = sumDigits(num)\n            if (map.contains(sum)) {\n  \
    \              map(sum) = map(sum) :+ num\n            } else {\n            \
    \    map(sum) = List(num)\n            }\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) {\n    \
    \        result ++= map(key)\n        }\n        result.toList", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (num <- nums) {\n            val sum = num.toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(_._2)", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  "        nums.sortWith((a, b) => {\n            val (a1, b1) = (a.abs, b.abs)\n\
    \            val (a2, b2) = (a1.toString.map(_.asDigit).sum, b1.toString.map(_.asDigit).sum)\n\
    \            if (a2 != b2) a2 < b2 else a1 < b1\n        })", "        val numsWithPoints\
    \ = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum, x._2)).sortBy(x\
    \ => (x._2, x._3))\n        numsWithPoints.map(_._1)", "        val map = new\
    \ HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length) {\n      \
    \      val sum = sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum)\
    \ = List(nums(i))\n            else map(sum) = nums(i) :: map(sum)\n        }\n\
    \        var result = List[Long]()\n        for (i <- 0 until nums.length) {\n\
    \            val sum = sumDigits(nums(i))\n            result = map(sum).head\
    \ :: result\n            map(sum) = map(sum).tail\n        }\n        result.reverse",
  '        nums.sortWith((a, b) => (a.toString.map(_.asDigit).sum, a) < (b.toString.map(_.asDigit).sum,
    b))', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)
    == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            aSum < bSum || (aSum == bSum\
    \ && nums.indexOf(a) < nums.indexOf(b))\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (map.contains(sum)) {\n                map(sum) = map(sum) :+ num\n   \
    \         } else {\n                map(sum) = List(num)\n            }\n    \
    \    }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) {\n            result = result ::: map(key)\n     \
    \   }\n        result", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        nums.sortWith((a, b) => {\n          \
    \  val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        val sum = nums.map(x => x.toString.map(_.asDigit).sum)\n\
    \        val sorted = sum.zipWithIndex.sortBy(_._1)\n        sorted.map(x => nums(x._2))",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) ==
    sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(c => c.asDigit).sum\n       \
    \     val bSum = b.toString.map(c => c.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val map = nums.zipWithIndex.map(x => (x._1,\
    \ x._2, x._1.toString.map(_.asDigit).sum)).sortBy(x => (x._3, x._2))\n       \
    \ map.map(_._1)", "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(x\
    \ => x.asDigit).sum\n            val sumB = b.toString.map(x => x.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum) = List(nums(i))\n\
    \            else map(sum) = map(sum) :+ nums(i)\n        }\n        val keys\
    \ = map.keys.toList.sorted\n        var result = List[Long]()\n        for (key\
    \ <- keys) result = result ::: map(key)\n        result", "        nums.sortWith((x,\
    \ y) => {\n            val xSum = x.toString.map(_.asDigit).sum\n            val\
    \ ySum = y.toString.map(_.asDigit).sum\n            if (xSum == ySum) x < y else\
    \ xSum < ySum\n        })", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val numsWithPoints = nums.zipWithIndex.map(x\
    \ => (x._1, x._1.toString.map(_.asDigit).sum, x._2))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._3)).map(_._1)", "        val sum = (x : Long) => x.toString.map(_.asDigit).sum\n\
    \        nums.zipWithIndex.sortBy(x => (sum(x._1), x._2)).map(_._1)", "      \
    \  nums.sortWith((a, b) => {\n            val (sumA, sumB) = (sumDigits(a), sumDigits(b))\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        var\
    \ map = Map[Long, Long]()\n        for (i <- 0 until nums.length) {\n        \
    \    map += (i -> nums(i).toString.map(_.asDigit).sum)\n        }\n        var\
    \ list = List[(Long, Long)]()\n        for ((k, v) <- map) {\n            list\
    \ = (k, v) :: list\n        }\n        list = list.sortBy(_._2)\n        var result\
    \ = List[Long]()\n        for (i <- 0 until list.length) {\n            result\
    \ = nums(list(i)._1.toInt) :: result\n        }\n        result.reverse", "  \
    \      val map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n\
    \            val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- keys) {\n            val list = map(key)\n            for\
    \ (num <- list) result += num\n        }\n        result.toList", "        var\
    \ map = Map[Long, Long]()\n        for (i <- 0 until nums.length) {\n        \
    \    var sum = 0L\n            var num = nums(i)\n            while (num != 0)\
    \ {\n                sum += num % 10\n                num /= 10\n            }\n\
    \            map += (sum -> nums(i))\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        val map\
    \ = new HashMap[Long, List[Long]]\n        for (n <- nums) {\n            val\
    \ sum = n.toString.map(x => x.asDigit).sum\n            if (map.contains(sum))\
    \ {\n                map(sum) = map(sum) :+ n\n            } else {\n        \
    \        map(sum) = List(n)\n            }\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (k <- keys) {\n      \
    \      result ++= map(k)\n        }\n        result.toList", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n  \
    \          val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (num <- nums) {\n         \
    \   val sum = num.toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(num)\n            else map(sum) = map(sum) :+ num\n        }\n\
    \        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (num <- nums) {\n            val sum = num.toString.map(x => x.asDigit).sum\n\
    \            if (map.contains(sum)) map(sum) = num :: map(sum)\n            else\
    \ map(sum) = List(num)\n        }\n        val sorted = map.toList.sortBy(_._1)\n\
    \        sorted.flatMap(x => x._2)", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))']
stop_tokens:
- "\n    }\n"
