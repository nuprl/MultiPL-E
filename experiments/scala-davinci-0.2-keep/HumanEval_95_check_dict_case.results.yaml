language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys(0)\n        val\
    \ firstIsLower = first.charAt(0).isLower\n        keys.forall(key => key.charAt(0).isLower\
    \ == firstIsLower)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdt27_avr.scala:24)\n\tat Problem.main(tmpdt27_avr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        return\
    \ (lower.size == keys.size || upper.size == keys.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftxju7wg.scala:23)\n\tat Problem.main(tmpftxju7wg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1f1hk8lq.scala:22)\n\tat Problem.main(tmp1f1hk8lq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfkydcc3.scala:23)\n\tat Problem.main(tmpgfkydcc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7euuts7h.scala:26)\n\tat Problem.main(tmp7euuts7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.forall(_.isUpper)\n        val firstKeyIsLower = firstKey.forall(_.isLower)\n\
    \        if (firstKeyIsUpper) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (firstKeyIsLower) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0019po19.scala:30)\n\tat Problem.main(tmp0019po19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1f1hk8lq.scala:22)\n\tat Problem.main(tmp1f1hk8lq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.isEmpty) return false\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (!firstKeyIsLower && !firstKeyIsUpper) return false\n\
    \        val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n  \
    \      val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n    \
    \    allKeysAreLower || allKeysAreUpper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv6k4dk0x.scala:27)\n\tat Problem.main(tmpv6k4dk0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        if\
    \ (lower || upper) return true\n        else return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9o12o90b.scala:24)\n\tat Problem.main(tmp9o12o90b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvjgjfye.scala:26)\n\tat Problem.main(tmpkvjgjfye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qsuszl4.scala:23)\n\tat Problem.main(tmp7qsuszl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val values = dict.values\n        val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x =>\
    \ x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size == keys.size)\
    \ return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7xgj_fof.scala:25)\n\tat Problem.main(tmp7xgj_fof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ if (firstKey.toUpperCase == firstKey) {\n            dict.keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47kvnpf3.scala:27)\n\tat Problem.main(tmp47kvnpf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkz88i7g.scala:30)\n\tat Problem.main(tmpjkz88i7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(_.toLowerCase == _)\n        val upper =\
    \ dict.keys.forall(_.toUpperCase == _)\n        lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp853kf1pn.scala:15:37 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp853kf1pn.scala:16:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupper\e[0m = dict.keys.forall(_.toUpperCase == _)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7er1fepb.scala:31)\n\tat Problem.main(tmp7er1fepb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerKeys = keys.filter(x =>\
    \ x.toLowerCase == x)\n        val upperKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerKeys.length == keys.length || upperKeys.length == keys.length)\
    \ return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpicsm9n2e.scala:24)\n\tat Problem.main(tmpicsm9n2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qsuszl4.scala:23)\n\tat Problem.main(tmp7qsuszl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper = firstKey ==\
    \ firstKey.toUpperCase\n        if (firstKeyIsLower || firstKeyIsUpper) {\n  \
    \          val allKeysAreLower = keys.forall(k => k == k.toLowerCase)\n      \
    \      val allKeysAreUpper = keys.forall(k => k == k.toUpperCase)\n          \
    \  if (allKeysAreLower || allKeysAreUpper) return true\n        }\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphv4t_2o4.scala:29)\n\tat Problem.main(tmphv4t_2o4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        val isLowerCase = firstKey.toLowerCase\
    \ == firstKey\n        val isUpperCase = firstKey.toUpperCase == firstKey\n  \
    \      if (!isLowerCase && !isUpperCase) return false\n        for (key <- dict.keys)\
    \ {\n            if (isLowerCase && key.toLowerCase != key) return false\n   \
    \         if (isUpperCase && key.toUpperCase != key) return false\n        }\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpne3yf8u0.scala:28)\n\tat Problem.main(tmpne3yf8u0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.isEmpty) return false\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            keys.forall(key => key.toLowerCase == key)\n      \
    \  } else {\n            keys.forall(key => key.toUpperCase == key)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqpiouoe7.scala:26)\n\tat Problem.main(tmpqpiouoe7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper = firstKey ==\
    \ firstKey.toUpperCase\n        if (firstKeyIsLower) {\n            for (key <-\
    \ keys) {\n                if (key != key.toLowerCase) return false\n        \
    \    }\n        } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key != key.toUpperCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3lcn8ab.scala:35)\n\tat Problem.main(tmpu3lcn8ab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val isLower = dict.keys.head.head.isLower\n        dict.keys.forall(x\
    \ => x.head.isLower == isLower)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpat0d14sk.scala:22)\n\tat Problem.main(tmpat0d14sk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstIsUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xa7xb4x.scala:30)\n\tat Problem.main(tmp6xa7xb4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) return true\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhm1quyl.scala:24)\n\tat Problem.main(tmpfhm1quyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx181jcyj.scala:33)\n\tat Problem.main(tmpx181jcyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            lower = lower && key.toLowerCase == key\n            upper =\
    \ upper && key.toUpperCase == key\n        }\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6f_t2jav.scala:26)\n\tat Problem.main(tmp6f_t2jav.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.matches(\"[a-z]+\"))\n        val upperCase = keys.forall(x => x.matches(\"\
    [A-Z]+\"))\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        if\
    \ (keys.forall(key => key == firstUpper || key == firstLower)) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbs98rgqg.scala:23)\n\tat Problem.main(tmpbs98rgqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            for (key <- keys) if (key.toLowerCase\
    \ != key) return false\n        } else {\n            for (key <- keys) if (key.toUpperCase\
    \ != key) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_u0uwia.scala:27)\n\tat Problem.main(tmpg_u0uwia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbunw_71a.scala:22)\n\tat Problem.main(tmpbunw_71a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.head.isLower\n        for (key <- keys) {\n           \
    \ if (key.head.isLower != firstIsLower) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7sgl37wn.scala:27)\n\tat Problem.main(tmp7sgl37wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0019po19.scala:30)\n\tat Problem.main(tmp0019po19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppec8t9m6.scala:31)\n\tat Problem.main(tmppec8t9m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        if (first.toUpperCase\
    \ == first) {\n            keys.forall(x => x.toUpperCase == x)\n        } else\
    \ {\n            keys.forall(x => x.toLowerCase == x)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc80_102t.scala:26)\n\tat Problem.main(tmpc80_102t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxfte_3hf.scala:35)\n\tat Problem.main(tmpxfte_3hf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.forall(_.isLower))\
    \ {\n            dict.keys.forall(_.forall(_.isLower))\n        } else if (firstKey.forall(_.isUpper))\
    \ {\n            dict.keys.forall(_.forall(_.isUpper))\n        } else {\n   \
    \         false\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.filter(x =>\
    \ x.forall(x => x.isLower))\n        val upperCase = keys.filter(x => x.forall(x\
    \ => x.isUpper))\n        if (lowerCase.length == keys.length || upperCase.length\
    \ == keys.length) true else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.filter(_.forall(_.isLower))\n\
    \        val upperCase = keys.filter(_.forall(_.isUpper))\n        if (lowerCase.size\
    \ == keys.size || upperCase.size == keys.size) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg59kov0s.scala:23)\n\tat Problem.main(tmpg59kov0s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(_.forall(_.isLower))\n\
    \        val upper = keys.filter(_.forall(_.isUpper))\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0019po19.scala:30)\n\tat Problem.main(tmp0019po19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.size == 0) return false\n        val firstKey = keys.head\n        if\
    \ (firstKey.head.isUpper) {\n            keys.forall(key => key.head.isUpper)\n\
    \        } else {\n            keys.forall(key => key.head.isLower)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1_pn63m.scala:27)\n\tat Problem.main(tmph1_pn63m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(key =>\
    \ key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4lkhnd4m.scala:23)\n\tat Problem.main(tmp4lkhnd4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (keys.forall(key => key == firstKeyUpper || key == firstKeyLower))\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp48n36u3x.scala:23)\n\tat Problem.main(tmp48n36u3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsUpper = first.head.isUpper\n        for (key <- keys) {\n           \
    \ if (key.head.isUpper != firstIsUpper) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe3yu76v.scala:26)\n\tat Problem.main(tmpqe3yu76v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        if (firstChar.isUpper) {\n            for (key\
    \ <- keys) {\n                if (key.charAt(0).isLower) return false\n      \
    \      }\n        } else {\n            for (key <- keys) {\n                if\
    \ (key.charAt(0).isUpper) return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7_9_bu4.scala:32)\n\tat Problem.main(tmpu7_9_bu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n  \
    \              if (key != key.toUpperCase) return false\n            }\n     \
    \   } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsb7yufsd.scala:35)\n\tat Problem.main(tmpsb7yufsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(key\
    \ => key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2t6ksdd.scala:23)\n\tat Problem.main(tmpt2t6ksdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val firstKey = keys.head\n\
    \            val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        \
    \    val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n            if (firstKeyIsLower)\
    \ {\n                keys.forall(key => key.toLowerCase == key)\n            }\
    \ else if (firstKeyIsUpper) {\n                keys.forall(key => key.toUpperCase\
    \ == key)\n            } else {\n                false\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3awqdl8j.scala:32)\n\tat Problem.main(tmp3awqdl8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb_iv2dkp.scala:24)\n\tat Problem.main(tmpb_iv2dkp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upper = keys.filter(key => key.toUpperCase == key)\n  \
    \      if (lower.size == keys.size || upper.size == keys.size) return true\n \
    \       false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3uo55cj.scala:24)\n\tat Problem.main(tmpa3uo55cj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7l_n81j.scala:35)\n\tat Problem.main(tmpn7l_n81j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvjgjfye.scala:26)\n\tat Problem.main(tmpkvjgjfye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkz88i7g.scala:30)\n\tat Problem.main(tmpjkz88i7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(k => k.toLowerCase\
    \ == k)\n        val upper = keys.filter(k => k.toUpperCase == k)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1av9b_7e.scala:24)\n\tat Problem.main(tmp1av9b_7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7v5z7m1.scala:23)\n\tat Problem.main(tmpg7v5z7m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfkydcc3.scala:23)\n\tat Problem.main(tmpgfkydcc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvjgjfye.scala:26)\n\tat Problem.main(tmpkvjgjfye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvjgjfye.scala:26)\n\tat Problem.main(tmpkvjgjfye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var upper = true\n        var lower = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toUpperCase != key) upper = false\n            if (key.toLowerCase\
    \ != key) lower = false\n        }\n        return upper || lower\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawriq7un.scala:26)\n\tat Problem.main(tmpawriq7un.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qsuszl4.scala:23)\n\tat Problem.main(tmp7qsuszl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg59kov0s.scala:23)\n\tat Problem.main(tmpg59kov0s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsLower) {\n            for (key <- keys) {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfqwppo0t.scala:35)\n\tat Problem.main(tmpfqwppo0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerKeys\
    \ = keys.filter(x => x.forall(y => y.isLower))\n            val upperKeys = keys.filter(x\
    \ => x.forall(y => y.isUpper))\n            if (lowerKeys.size == keys.size ||\
    \ upperKeys.size == keys.size) true\n            else false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper\
    \ = firstKey == firstKey.toUpperCase\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key != key.toLowerCase) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key != key.toUpperCase) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwfddygn3.scala:35)\n\tat Problem.main(tmpwfddygn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) return true\n \
    \       false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp205hfm4t.scala:24)\n\tat Problem.main(tmp205hfm4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnb5o8bi.scala:23)\n\tat Problem.main(tmppnb5o8bi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.exists(!_.isLower)) lower = false\n            if (key.exists(!_.isUpper))\
    \ upper = false\n        }\n        return lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyUpper\
    \ = firstKey.toUpperCase == firstKey\n        val isFirstKeyLower = firstKey.toLowerCase\
    \ == firstKey\n        if (!isFirstKeyUpper && !isFirstKeyLower) return false\n\
    \        val isAllUpper = keys.forall(key => key.toUpperCase == key)\n       \
    \ val isAllLower = keys.forall(key => key.toLowerCase == key)\n        if (isFirstKeyUpper\
    \ && isAllUpper) return true\n        if (isFirstKeyLower && isAllLower) return\
    \ true\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ndmdam7.scala:29)\n\tat Problem.main(tmp4ndmdam7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys(0)\n       \
    \ val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (firstKeyIsUpper || firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (firstKeyIsUpper && key.toUpperCase\
    \ != key) return false\n                if (firstKeyIsLower && key.toLowerCase\
    \ != key) return false\n            }\n            return true\n        }\n  \
    \      false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphh0up8b3.scala:31)\n\tat Problem.main(tmphh0up8b3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLowerCase = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLowerCase) {\n   \
    \         keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfv7w4t6y.scala:30)\n\tat Problem.main(tmpfv7w4t6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.forall(x => x.toLowerCase == x)\n            val upperCase = keys.forall(x\
    \ => x.toUpperCase == x)\n            lowerCase || upperCase\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqpweazb.scala:25)\n\tat Problem.main(tmpvqpweazb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ for (key <- keys) {\n                if (firstKeyIsLower && key.toLowerCase\
    \ != key) return false\n                if (firstKeyIsUpper && key.toUpperCase\
    \ != key) return false\n            }\n            return true\n        }\n  \
    \      return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfdu7lsbn.scala:31)\n\tat Problem.main(tmpfdu7lsbn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0019po19.scala:30)\n\tat Problem.main(tmp0019po19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerKeys.size == keys.size || upperKeys.size\
    \ == keys.size) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkbfnco7z.scala:26)\n\tat Problem.main(tmpkbfnco7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7euuts7h.scala:26)\n\tat Problem.main(tmp7euuts7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerKeys = keys.filter(x =>\
    \ x.toLowerCase == x)\n        val upperKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerKeys.length == keys.length || upperKeys.length == keys.length)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsgkxyyz_.scala:23)\n\tat Problem.main(tmpsgkxyyz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        if (firstChar.isLower) {\n            for (key\
    \ <- keys) {\n                if (key.charAt(0).isUpper) return false\n      \
    \      }\n        } else {\n            for (key <- keys) {\n                if\
    \ (key.charAt(0).isLower) return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09y2ehdz.scala:32)\n\tat Problem.main(tmp09y2ehdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppec8t9m6.scala:31)\n\tat Problem.main(tmppec8t9m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val isLower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val isUpper = keys.forall(x => x.toUpperCase == x)\n        return\
    \ isLower || isUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3bz_377.scala:23)\n\tat Problem.main(tmpu3bz_377.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys(0)\n       \
    \ val firstKeyIsLower = firstKey.charAt(0).isLower\n        for (key <- keys)\
    \ {\n            if (key.charAt(0).isLower != firstKeyIsLower) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsn_rlwd.scala:27)\n\tat Problem.main(tmppsn_rlwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyo50uoko.scala:31)\n\tat Problem.main(tmpyo50uoko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n  \
    \      if (lowerCaseKeys.size == 0 || upperCaseKeys.size == 0) return false\n\
    \        if (lowerCaseKeys.size + upperCaseKeys.size == keys.size) return true\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpje2igo5m.scala:23)\n\tat Problem.main(tmpje2igo5m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(key =>\
    \ key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4lkhnd4m.scala:23)\n\tat Problem.main(tmp4lkhnd4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        } else if (firstKeyIsUpperCase) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf9qvgdhw.scala:35)\n\tat Problem.main(tmpf9qvgdhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7l_n81j.scala:35)\n\tat Problem.main(tmpn7l_n81j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.toList(0)\n       \
    \ if (firstKey.forall(_.isUpper)) {\n            for (key <- keys) {\n       \
    \         if (!key.forall(_.isUpper)) return false\n            }\n        } else\
    \ if (firstKey.forall(_.isLower)) {\n            for (key <- keys) {\n       \
    \         if (!key.forall(_.isLower)) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x ==\
    \ x.toLowerCase)\n        val upper = keys.forall(x => x == x.toUpperCase)\n \
    \       lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjl8uwwof.scala:23)\n\tat Problem.main(tmpjl8uwwof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val (lower, upper) = dict.keys.partition(_.forall(_.isLower))\n     \
    \   lower.size == dict.size || upper.size == dict.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqy_zrath.scala:22)\n\tat Problem.main(tmpqy_zrath.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(key\
    \ => key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2t6ksdd.scala:23)\n\tat Problem.main(tmpt2t6ksdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == 0 || upper.size == 0) return false\n        if (lower.size ==\
    \ keys.size || upper.size == keys.size) return true\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62093eaq.scala:23)\n\tat Problem.main(tmp62093eaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppec8t9m6.scala:31)\n\tat Problem.main(tmppec8t9m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyo50uoko.scala:31)\n\tat Problem.main(tmpyo50uoko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n         \
    \   val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n       \
    \     return allKeysAreLower || allKeysAreUpper\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0t5672_5.scala:29)\n\tat Problem.main(tmp0t5672_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.forall(_.isUpper)) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (first.forall(_.isLower)) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n            val upper = keys.forall(x => x.toUpperCase\
    \ == x)\n            lower || upper\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe202i227.scala:25)\n\tat Problem.main(tmpe202i227.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfkydcc3.scala:23)\n\tat Problem.main(tmpgfkydcc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase) {\n    \
    \        keys.forall(key => key.toUpperCase == key)\n        } else {\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxtk8oer.scala:30)\n\tat Problem.main(tmpbxtk8oer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ if (firstKey.toUpperCase == firstKey) {\n            dict.keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47kvnpf3.scala:27)\n\tat Problem.main(tmp47kvnpf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygozdmtt.scala:23)\n\tat Problem.main(tmpygozdmtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyLower\
    \ = firstKey.toLowerCase == firstKey\n        val isFirstKeyUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (!isFirstKeyLower && !isFirstKeyUpper) return false\n\
    \        val isAllKeysLower = keys.forall(key => key.toLowerCase == key)\n   \
    \     val isAllKeysUpper = keys.forall(key => key.toUpperCase == key)\n      \
    \  if (isFirstKeyLower && isAllKeysLower) return true\n        if (isFirstKeyUpper\
    \ && isAllKeysUpper) return true\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdc4t1tq.scala:29)\n\tat Problem.main(tmptdc4t1tq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.forall(y\
    \ => y.isLower))\n        val upper = keys.forall(x => x.forall(y => y.isUpper))\n\
    \        if (lower || upper) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upper = keys.filter(key => key.toUpperCase == key)\n  \
    \      if (lower.size == keys.size || upper.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9uhqrm1u.scala:23)\n\tat Problem.main(tmp9uhqrm1u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val isFirstKeyUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (!isFirstKeyLowerCase && !isFirstKeyUpperCase) return\
    \ false\n        for (key <- keys) {\n            if (isFirstKeyLowerCase && key.toLowerCase\
    \ != key) return false\n            if (isFirstKeyUpperCase && key.toUpperCase\
    \ != key) return false\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe6vm_5i7.scala:29)\n\tat Problem.main(tmpe6vm_5i7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        if (firstChar.isUpper) {\n            for (key\
    \ <- keys) {\n                if (key.charAt(0).isLower) return false\n      \
    \      }\n        } else {\n            for (key <- keys) {\n                if\
    \ (key.charAt(0).isUpper) return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcnep96q.scala:32)\n\tat Problem.main(tmpbcnep96q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase) {\n    \
    \        keys.forall(key => key.toUpperCase == key)\n        } else {\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxtk8oer.scala:30)\n\tat Problem.main(tmpbxtk8oer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var isLower = false\n        var isUpper = false\n        for (key <-\
    \ dict.keys) {\n            if (key.toLowerCase == key) isLower = true\n     \
    \       if (key.toUpperCase == key) isUpper = true\n        }\n        if (isLower\
    \ && isUpper) return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmrlojsfm.scala:28)\n\tat Problem.main(tmpmrlojsfm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) return true\n \
    \       false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp205hfm4t.scala:24)\n\tat Problem.main(tmp205hfm4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsLower) {\n            for (key <- keys) {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfqwppo0t.scala:35)\n\tat Problem.main(tmpfqwppo0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toUpperCase ==\
    \ key)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb9oeos2.scala:26)\n\tat Problem.main(tmpeb9oeos2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsUpper = first.head.isUpper\n        val firstIsLower = first.head.isLower\n\
    \        if (firstIsUpper) {\n            keys.forall(key => key.head.isUpper)\n\
    \        } else if (firstIsLower) {\n            keys.forall(key => key.head.isLower)\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi286msfe.scala:31)\n\tat Problem.main(tmpi286msfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4d8fzpc.scala:24)\n\tat Problem.main(tmpg4d8fzpc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyUpper\
    \ = firstKey.toUpperCase == firstKey\n        val isFirstKeyLower = firstKey.toLowerCase\
    \ == firstKey\n        if (!isFirstKeyUpper && !isFirstKeyLower) return false\n\
    \        for (key <- keys) {\n            if (isFirstKeyUpper) {\n           \
    \     if (key.toUpperCase != key) return false\n            } else {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        }\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuyyr0ezs.scala:32)\n\tat Problem.main(tmpuyyr0ezs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        val firstIsUpper\
    \ = first.head.isUpper\n        val firstIsLower = first.head.isLower\n      \
    \  if (firstIsUpper) {\n            for (key <- keys) {\n                if (key.head.isLower)\
    \ return false\n            }\n        } else if (firstIsLower) {\n          \
    \  for (key <- keys) {\n                if (key.head.isUpper) return false\n \
    \           }\n        } else {\n            return false\n        }\n       \
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcx_axli5.scala:35)\n\tat Problem.main(tmpcx_axli5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        val lower\
    \ = first.toLowerCase\n        val upper = first.toUpperCase\n        if (lower\
    \ == upper) return false\n        for (key <- keys) {\n            if (key !=\
    \ lower && key != upper) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0u2bnxqo.scala:26)\n\tat Problem.main(tmp0u2bnxqo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.forall(_.isLower))\
    \ {\n            dict.keys.forall(_.forall(_.isLower))\n        } else if (firstKey.forall(_.isUpper))\
    \ {\n            dict.keys.forall(_.forall(_.isUpper))\n        } else {\n   \
    \         false\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (k <- dict.keys)\
    \ {\n            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujklyrzs.scala:26)\n\tat Problem.main(tmpujklyrzs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyLowerCase\
    \ = firstKey.forall(_.isLower)\n        val isFirstKeyUpperCase = firstKey.forall(_.isUpper)\n\
    \        if (isFirstKeyLowerCase) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else if (isFirstKeyUpperCase) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        val firstChar\
    \ = first.charAt(0)\n        val firstIsUpper = firstChar.isUpper\n        for\
    \ (key <- keys) {\n            val char = key.charAt(0)\n            if (char.isUpper\
    \ != firstIsUpper) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_14n_a5s.scala:28)\n\tat Problem.main(tmp_14n_a5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qsuszl4.scala:23)\n\tat Problem.main(tmp7qsuszl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftpqnini.scala:23)\n\tat Problem.main(tmpftpqnini.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == 0 || upperKeys.size == 0) return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnum7269h.scala:22)\n\tat Problem.main(tmpnum7269h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6azqz7rx.scala:26)\n\tat Problem.main(tmp6azqz7rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val isLower = dict.keys.head.forall(_.isLower)\n        dict.keys.forall(key\
    \ => key.forall(_.isLower) == isLower)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnalw3uf9.scala:22)\n\tat Problem.main(tmpnalw3uf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ isFirstLower = first.toLowerCase == first\n        val isFirstUpper = first.toUpperCase\
    \ == first\n        if (isFirstLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (isFirstUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoefer431.scala:30)\n\tat Problem.main(tmpoefer431.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.forall(y => y.isLower))\n        val upperCase = keys.forall(x => x.forall(y\
    \ => y.isUpper))\n        if (lowerCase || upperCase) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(k => k == firstUpper || k == firstLower)) true\n    \
    \    else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcchlwk69.scala:23)\n\tat Problem.main(tmpcchlwk69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8yphcqgh.scala:35)\n\tat Problem.main(tmp8yphcqgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7er1fepb.scala:31)\n\tat Problem.main(tmp7er1fepb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ isLower = first.toLowerCase == first\n        val isUpper = first.toUpperCase\
    \ == first\n        if (isLower) {\n            for (key <- keys) {\n        \
    \        if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (isUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2hr3u4k.scala:35)\n\tat Problem.main(tmpd2hr3u4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ isUpper = first.toUpperCase == first\n        val isLower = first.toLowerCase\
    \ == first\n        if (isUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else if (isLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjzswzquh.scala:30)\n\tat Problem.main(tmpjzswzquh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsLower) {\n            for (key <- keys) {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfqwppo0t.scala:35)\n\tat Problem.main(tmpfqwppo0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(_.forall(_.isLower))\n\
    \        val upper = keys.filter(_.forall(_.isUpper))\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hum3twl.scala:23)\n\tat Problem.main(tmp4hum3twl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.filter(x =>\
    \ x == x.toLowerCase)\n        val upperCase = keys.filter(x => x == x.toUpperCase)\n\
    \        if (lowerCase.size == keys.size || upperCase.size == keys.size) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx1w82in.scala:23)\n\tat Problem.main(tmpnx1w82in.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1ddm8f4.scala:30)\n\tat Problem.main(tmpv1ddm8f4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys(0)\n        val\
    \ isLower = first.toLowerCase == first\n        val isUpper = first.toUpperCase\
    \ == first\n        if (isLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (isUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4c91h3bu.scala:30)\n\tat Problem.main(tmp4c91h3bu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.forall(c\
    \ => c.isLower))\n        val upper = keys.filter(x => x.forall(c => c.isUpper))\n\
    \        if (lower.size == keys.size || upper.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7l_n81j.scala:35)\n\tat Problem.main(tmpn7l_n81j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(k => k == firstUpper || k == firstLower)) true\n    \
    \    else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcchlwk69.scala:23)\n\tat Problem.main(tmpcchlwk69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkz19m1u8.scala:31)\n\tat Problem.main(tmpkz19m1u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        if (firstChar.isUpper) {\n            for (key\
    \ <- keys) {\n                if (key.charAt(0).isLower) return false\n      \
    \      }\n        } else {\n            for (key <- keys) {\n                if\
    \ (key.charAt(0).isUpper) return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcnep96q.scala:32)\n\tat Problem.main(tmpbcnep96q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val firstKey = dict.keys.toList(0)\n        if (firstKey(0).isUpper)\
    \ {\n            for (key <- dict.keys) {\n                if (key(0).isLower)\
    \ return false\n            }\n        } else {\n            for (key <- dict.keys)\
    \ {\n                if (key(0).isUpper) return false\n            }\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zans4_b.scala:30)\n\tat Problem.main(tmp3zans4_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toUpperCase ==\
    \ key)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb9oeos2.scala:26)\n\tat Problem.main(tmpeb9oeos2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkz19m1u8.scala:31)\n\tat Problem.main(tmpkz19m1u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6azqz7rx.scala:26)\n\tat Problem.main(tmp6azqz7rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val first = keys.head\n        if (first.forall(_.isUpper))\
    \ {\n            keys.forall(_.forall(_.isUpper))\n        } else if (first.forall(_.isLower))\
    \ {\n            keys.forall(_.forall(_.isLower))\n        } else {\n        \
    \    false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val firstKey = dict.keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            dict.keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            dict.keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtpr__7r.scala:29)\n\tat Problem.main(tmpgtpr__7r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(key\
    \ => key.toLowerCase == key)\n        val upperCase = keys.forall(key => key.toUpperCase\
    \ == key)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8lmmtumn.scala:23)\n\tat Problem.main(tmp8lmmtumn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x ==\
    \ x.toLowerCase)\n        val upper = keys.forall(x => x == x.toUpperCase)\n \
    \       lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjl8uwwof.scala:23)\n\tat Problem.main(tmpjl8uwwof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7er1fepb.scala:31)\n\tat Problem.main(tmp7er1fepb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == 0 || upper.size == 0) return false\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84johicf.scala:22)\n\tat Problem.main(tmp84johicf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            keys.forall(key => key.toUpperCase == key)\n   \
    \     } else {\n            keys.forall(key => key.toLowerCase == key)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lo5_gex.scala:26)\n\tat Problem.main(tmp2lo5_gex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys(0)\n       \
    \ val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoczn3ivo.scala:30)\n\tat Problem.main(tmpoczn3ivo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerKeys = keys.filter(_.forall(_.isLower))\n\
    \        val upperKeys = keys.filter(_.forall(_.isUpper))\n        if (lowerKeys.length\
    \ == keys.length || upperKeys.length == keys.length) return true\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        if (firstChar.isUpper) {\n            keys.forall(key\
    \ => key.forall(c => c.isUpper))\n        } else {\n            keys.forall(key\
    \ => key.forall(c => c.isLower))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstIsUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xa7xb4x.scala:30)\n\tat Problem.main(tmp6xa7xb4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.forall(y\
    \ => y.isLower))\n        val upperKeys = keys.filter(x => x.forall(y => y.isUpper))\n\
    \        if (lowerKeys.size == keys.size || upperKeys.size == keys.size) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   if (firstKey.toUpperCase == firstKey) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKey.toLowerCase == firstKey) {\n            for (key <-\
    \ keys) {\n                if (key.toLowerCase != key) return false\n        \
    \    }\n        } else return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkxp42oy3.scala:31)\n\tat Problem.main(tmpkxp42oy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first == first.toLowerCase\n        val allLower = keys.forall(x\
    \ => x == x.toLowerCase)\n        val allUpper = keys.forall(x => x == x.toUpperCase)\n\
    \        if (firstIsLower) allLower else allUpper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmg5kecr6.scala:25)\n\tat Problem.main(tmpmg5kecr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper || firstKeyIsLower) {\n           \
    \ val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n         \
    \   val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n       \
    \     if (allKeysAreUpper || allKeysAreLower) return true\n        }\n       \
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl3tjb461.scala:29)\n\tat Problem.main(tmpl3tjb461.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmshvas9x.scala:23)\n\tat Problem.main(tmpmshvas9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toArray\n        val first = keys(0)\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            for (key <- keys) {\n   \
    \             if (key.toLowerCase != key) return false\n            }\n      \
    \  } else if (firstIsUpper) {\n            for (key <- keys) {\n             \
    \   if (key.toUpperCase != key) return false\n            }\n        } else {\n\
    \            return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9obt_tak.scala:35)\n\tat Problem.main(tmp9obt_tak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1f1hk8lq.scala:22)\n\tat Problem.main(tmp1f1hk8lq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7l_n81j.scala:35)\n\tat Problem.main(tmpn7l_n81j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys(0)\n        val\
    \ firstIsUpper = first.toUpperCase == first\n        val firstIsLower = first.toLowerCase\
    \ == first\n        if (firstIsUpper || firstIsLower) {\n            val allUpper\
    \ = keys.forall(k => k.toUpperCase == k)\n            val allLower = keys.forall(k\
    \ => k.toLowerCase == k)\n            return allUpper || allLower\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsvt85ry.scala:29)\n\tat Problem.main(tmpdsvt85ry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) return true\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhm1quyl.scala:24)\n\tat Problem.main(tmpfhm1quyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq03jtj8r.scala:23)\n\tat Problem.main(tmpq03jtj8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi4nwtmb9.scala:23)\n\tat Problem.main(tmpi4nwtmb9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7l_n81j.scala:35)\n\tat Problem.main(tmpn7l_n81j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppec8t9m6.scala:31)\n\tat Problem.main(tmppec8t9m6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys(0)\n        val\
    \ firstIsUpper = first.toUpperCase == first\n        val firstIsLower = first.toLowerCase\
    \ == first\n        if (firstIsUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else if (firstIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp96qnpo1z.scala:30)\n\tat Problem.main(tmp96qnpo1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800028
