name: HumanEval_57_monotonic
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return True is list elements are monotonically increasing or decreasing.\n\
  \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
  \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n   \
  \ def monotonic(l : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong,\
  \ 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        var increasing = true\n        var decreasing = true\n    \
    \    for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.size == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n     \
    \       if (l(i) > l(i - 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length <= 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ == 1) return true\n        var increasing = l(0) < l(1)\n        for (i <- 1\
    \ until l.length - 1) {\n            if (increasing) {\n                if (l(i)\
    \ > l(i + 1)) return false\n            } else {\n                if (l(i) < l(i\
    \ + 1)) return false\n            }\n        }\n        return true", "      \
    \  if (l.size <= 1) return true\n        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1))\
    \ increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n  \
    \      }\n        return increasing || decreasing", "        if (l.length <= 1)\
    \ return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.size == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n     \
    \       if (l(i) < l(i - 1)) increasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.size == 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        if (diffs.forall(x => x == 0)) return true\n\
    \        if (diffs.forall(x => x > 0)) return true\n        if (diffs.forall(x\
    \ => x < 0)) return true\n        return false", "        if (l.size == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true", "        if (l.size <= 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true", "        if (l.length\
    \ <= 1) return true\n        var i = 0\n        var increasing = true\n      \
    \  var decreasing = true\n        while (i < l.length - 1) {\n            if (l(i)\
    \ > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n            i += 1\n        }\n        increasing || decreasing", " \
    \       if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.size) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ <= 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.size) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n    \
    \    }\n        return true", "        if (l.length <= 1) return true\n      \
    \  var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        val diff = l.zip(l.tail).map(x => x._2 - x._1)\n  \
    \      if (diff.forall(x => x == 0)) true\n        else if (diff.forall(x => x\
    \ > 0)) true\n        else if (diff.forall(x => x < 0)) true\n        else false",
  "        if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0)\
    \ return false\n        }\n        return true", "        if (l.length <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.length) {\n \
    \           if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        val diff = l(1) - l(0)\n        for (i\
    \ <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0) return\
    \ false\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
