name: HumanEval_57_monotonic
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return True is list elements are monotonically increasing or decreasing.\n\
  \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
  \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n   \
  \ def monotonic(l : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong,\
  \ 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        var increasing = true\n        var decreasing = true\n    \
    \    for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.size == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n     \
    \       if (l(i) > l(i - 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length <= 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ == 1) return true\n        var increasing = l(0) < l(1)\n        for (i <- 1\
    \ until l.length - 1) {\n            if (increasing) {\n                if (l(i)\
    \ > l(i + 1)) return false\n            } else {\n                if (l(i) < l(i\
    \ + 1)) return false\n            }\n        }\n        return true", "      \
    \  if (l.size <= 1) return true\n        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1))\
    \ increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n  \
    \      }\n        return increasing || decreasing", "        if (l.length <= 1)\
    \ return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.size == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n     \
    \       if (l(i) < l(i - 1)) increasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.size == 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        if (diffs.forall(x => x == 0)) return true\n\
    \        if (diffs.forall(x => x > 0)) return true\n        if (diffs.forall(x\
    \ => x < 0)) return true\n        return false", "        if (l.size == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true", "        if (l.size <= 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true", "        if (l.length\
    \ <= 1) return true\n        var i = 0\n        var increasing = true\n      \
    \  var decreasing = true\n        while (i < l.length - 1) {\n            if (l(i)\
    \ > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n            i += 1\n        }\n        increasing || decreasing", " \
    \       if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.size) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ <= 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.size) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n    \
    \    }\n        return true", "        if (l.length <= 1) return true\n      \
    \  var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        val diff = l.zip(l.tail).map(x => x._2 - x._1)\n  \
    \      if (diff.forall(x => x == 0)) true\n        else if (diff.forall(x => x\
    \ > 0)) true\n        else if (diff.forall(x => x < 0)) true\n        else false",
  "        if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0)\
    \ return false\n        }\n        return true", "        if (l.length <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.length) {\n \
    \           if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        val diff = l(1) - l(0)\n        for (i\
    \ <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0) return\
    \ false\n        }\n        return true", "        if (l.length == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n\
    \            if (l(i) < l(i + 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.size <= 1) return true\n        var\
    \ increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n           \
    \ if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing || decreasing",
  "        var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var isIncreasing\
    \ = true\n        var isDecreasing = true\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) < l(i - 1)) isIncreasing = false\n            if (l(i)\
    \ > l(i - 1)) isDecreasing = false\n        }\n        return isIncreasing ||\
    \ isDecreasing", "        if (l.length <= 1) return true\n        var i = 0\n\
    \        var increasing = true\n        var decreasing = true\n        while (i\
    \ < l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n   \
    \         if (l(i) < l(i + 1)) decreasing = false\n            i += 1\n      \
    \  }\n        increasing || decreasing", "        if (l.length == 1) return true\n\
    \        var inc = true\n        var dec = true\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) < l(i - 1)) inc = false\n            if (l(i) > l(i\
    \ - 1)) dec = false\n        }\n        return inc || dec", "        if (l.length\
    \ == 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.size <= 1) return true\n\
    \        var inc = true\n        var dec = true\n        for (i <- 1 until l.size)\
    \ {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i) < l(i\
    \ - 1)) inc = false\n        }\n        return inc || dec", "        if (l.length\
    \ <= 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n  \
    \      }\n        return true", "        if (l.size <= 1) return true\n      \
    \  var increasing = true\n        var decreasing = true\n        for (i <- 0 until\
    \ l.size - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n       \
    \     if (l(i) < l(i + 1)) decreasing = false\n        }\n        increasing ||\
    \ decreasing", "        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        increasing || decreasing", "        if (l.size <=\
    \ 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length == 1) return true\n  \
    \      var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) < l(i -\
    \ 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \        }\n        increasing || decreasing", "        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing", "        if (l.length == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        val first =\
    \ l.head\n        val second = l.tail.head\n        val diff = second - first\n\
    \        val rest = l.tail.tail\n        if (rest.isEmpty) return true\n     \
    \   if (diff == 0) return false\n        val increasing = diff > 0\n        val\
    \ decreasing = diff < 0\n        val restMonotonic = monotonic(rest)\n       \
    \ if (restMonotonic) {\n            val restFirst = rest.head\n            val\
    \ restSecond = rest.tail.head\n            val restDiff = restSecond - restFirst\n\
    \            if (increasing) return restDiff >= 0\n            if (decreasing)\
    \ return restDiff <= 0\n        }\n        return false", "        if (l.size\
    \ <= 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) > l(i -\
    \ 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing = false\n\
    \        }\n        return increasing || decreasing", "        if (l.size <= 1)\
    \ return true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size)\
    \ {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n \
    \       return true", "        var increasing = true\n        var decreasing =\
    \ true\n        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1))\
    \ increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n  \
    \      }\n        increasing || decreasing", "        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        return increasing || decreasing", " \
    \       if (l.length == 1) return true\n        var increasing = true\n      \
    \  var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length == 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 0 until l.length - 1) {\n         \
    \   if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1))\
    \ decreasing = false\n        }\n        return increasing || decreasing", " \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        val s = l.sliding(2).toList\n\
    \        val d = s.map(x => x(1) - x(0))\n        val ds = d.distinct\n      \
    \  if (ds.length == 1) return true\n        else if (ds.length == 2) {\n     \
    \       if (ds.contains(0)) return true\n            else if (ds.contains(1) &&\
    \ ds.contains(-1)) return true\n            else return false\n        }\n   \
    \     else return false", "        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length <= 1) return true\n        var increasing = false\n      \
    \  var decreasing = false\n        for (i <- 1 until l.length) {\n           \
    \ if (l(i) > l(i - 1)) increasing = true\n            if (l(i) < l(i - 1)) decreasing\
    \ = true\n        }\n        return increasing && decreasing", "        if (l.size\
    \ <= 1) return true\n        var inc = true\n        var dec = true\n        for\
    \ (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) dec = false\n    \
    \        if (l(i) < l(i - 1)) inc = false\n        }\n        inc || dec", " \
    \       if (l.length <= 1) return true\n        var increasing = true\n      \
    \  var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ <= 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.size <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 0 until l.size - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n\
    \            if (l(i) < l(i + 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true",
  "        if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n      \
    \  for (i <- 2 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0)\
    \ return false\n        }\n        return true", "        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing", "        if (l.size == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.size <= 1) return true\n        val\
    \ s = l.sliding(2).map(x => x(1) - x(0)).toList\n        if (s.forall(x => x >\
    \ 0)) return true\n        if (s.forall(x => x < 0)) return true\n        return\
    \ false", "        if (l.size <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.size) {\n        \
    \    if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        val s = l.sliding(2).map(x => x(1) - x(0)).toList\n\
    \        if (s.forall(x => x >= 0)) return true\n        if (s.forall(x => x <=\
    \ 0)) return true\n        return false", "        if (l.length <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length == 1) return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n      \
    \  for (i <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0)\
    \ return false\n        }\n        return true", "        if (l.size <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.size) {\n   \
    \         if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1))\
    \ < 0) return false\n        }\n        return true", "        if (l.length <=\
    \ 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        var increasing = true\n    \
    \    var decreasing = true\n        for (i <- 1 until l.length) {\n          \
    \  if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ == 1) return true\n        var s = l(0)\n        var d = 0\n        for (i <-\
    \ 1 until l.length) {\n            if (d == 0) {\n                if (l(i) > s)\
    \ d = 1\n                else if (l(i) < s) d = -1\n            }\n          \
    \  else if (d == 1) {\n                if (l(i) < s) return false\n          \
    \  }\n            else if (d == -1) {\n                if (l(i) > s) return false\n\
    \            }\n            s = l(i)\n        }\n        return true", "     \
    \   if (l.length <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ <= 1) return true\n        val diff = l(1) - l(0)\n        for (i <- 1 until\
    \ l.size) {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n    \
    \    }\n        return true", "        if (l.length == 1) return true\n      \
    \  var increasing = false\n        var decreasing = false\n        for (i <- 1\
    \ until l.length) {\n            if (l(i) > l(i - 1)) increasing = true\n    \
    \        if (l(i) < l(i - 1)) decreasing = true\n        }\n        increasing\
    \ && decreasing == false", "        if (l.length == 1) return true\n        var\
    \ increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n         \
    \   if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing ||\
    \ decreasing", "        if (l.length == 1) return true\n        if (l.head < l.tail.head)\
    \ {\n            for (i <- 1 until l.length - 1) {\n                if (l(i) >\
    \ l(i + 1)) return false\n            }\n        } else {\n            for (i\
    \ <- 1 until l.length - 1) {\n                if (l(i) < l(i + 1)) return false\n\
    \            }\n        }\n        return true", "        if (l.length <= 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  if (diffs.forall(x => x > 0)) return true\n        if (diffs.forall(x => x\
    \ < 0)) return true\n        return false", "        if (l.size <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length == 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ == 1) return true\n        var inc = true\n        var dec = true\n        for\
    \ (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) dec = false\n    \
    \        if (l(i) < l(i - 1)) inc = false\n        }\n        return inc || dec",
  "        if (l.size <= 1) return true\n        var s = l(0)\n        var d = 0\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) > s) {\n          \
    \      if (d == -1) return false\n                d = 1\n            } else if\
    \ (l(i) < s) {\n                if (d == 1) return false\n                d =\
    \ -1\n            }\n            s = l(i)\n        }\n        return true", " \
    \       if (l.size <= 1) true\n        else {\n            val diff = l(1) - l(0)\n\
    \            if (diff == 0) monotonic(l.tail)\n            else {\n          \
    \      val sign = diff / abs(diff)\n                l.tail.forall(x => (x - l.head)\
    \ * sign >= 0)\n            }\n        }", "        if (l.size <= 1) return true\n\
    \        val inc = l(0) < l(1)\n        for (i <- 1 until l.size - 1) {\n    \
    \        if (inc && l(i) > l(i + 1)) return false\n            if (!inc && l(i)\
    \ < l(i + 1)) return false\n        }\n        return true", "        if (l.size\
    \ <= 1) return true\n        var i = 0\n        var increasing = true\n      \
    \  var decreasing = true\n        while (i < l.size - 1) {\n            if (l(i)\
    \ > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n            i += 1\n        }\n        return increasing || decreasing",
  "        if (l.size <= 1) return true\n        val diff = l(1) - l(0)\n        for\
    \ (i <- 1 until l.size) {\n            if (diff * (l(i) - l(i - 1)) < 0) return\
    \ false\n        }\n        return true", "        if (l.size <= 1) return true\n\
    \        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n       \
    \     if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        val diffs = l.sliding(2).map(x => x(1)\
    \ - x(0)).toList\n        val first = diffs(0)\n        if (diffs.forall(x =>\
    \ x == first)) return true\n        val second = diffs(1)\n        if (diffs.forall(x\
    \ => x == second)) return true\n        return false", "        if (l.length <=\
    \ 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length == 1) return true\n  \
    \      var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n \
    \           if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        if (l.length\
    \ == 2) return true\n        var i = 0\n        while (i < l.length - 1) {\n \
    \           if (l(i) == l(i + 1)) i += 1\n            else if (l(i) < l(i + 1))\
    \ {\n                while (i < l.length - 1 && l(i) <= l(i + 1)) i += 1\n   \
    \             if (i == l.length - 1) return true\n                else return\
    \ false\n            }\n            else {\n                while (i < l.length\
    \ - 1 && l(i) >= l(i + 1)) i += 1\n                if (i == l.length - 1) return\
    \ true\n                else return false\n            }\n        }\n        return\
    \ true", "        var increasing = true\n        var decreasing = true\n     \
    \   for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length <= 1) return true\n  \
    \      var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.size == 0) return true\n        var prev = l(0)\n\
    \        var increasing = true\n        for (i <- 1 until l.size) {\n        \
    \    if (l(i) < prev) increasing = false\n            else if (l(i) > prev &&\
    \ !increasing) return false\n            prev = l(i)\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        val sign = l(1) - l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (sign * (l(i) - l(i - 1))\
    \ < 0) return false\n        }\n        return true", "        if (l.length <=\
    \ 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.size == 1) return true\n\
    \        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n        val first\
    \ = diffs(0)\n        diffs.forall(x => x == first)", "        if (l.size <= 1)\
    \ return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length <= 1) return true\n  \
    \      var isIncreasing = true\n        var isDecreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) > l(i - 1)) isDecreasing = false\n\
    \            if (l(i) < l(i - 1)) isIncreasing = false\n        }\n        isIncreasing\
    \ || isDecreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        val n = l.length\n        if (n == 1) return true\n        var i = 1\n\
    \        var inc = true\n        var dec = true\n        while (i < n) {\n   \
    \         if (l(i) < l(i - 1)) inc = false\n            if (l(i) > l(i - 1)) dec\
    \ = false\n            i += 1\n        }\n        return inc || dec", "      \
    \  if (l.length <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        increasing || decreasing", "        if (l.length\
    \ <= 1) return true\n        val diff = l(1) - l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n  \
    \      }\n        return true", "        if (l.length == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n   \
    \         if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        if (l.length\
    \ == 2) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length <= 1) return true\n\
    \        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.size <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.size) {\n        \
    \    if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        return increasing || decreasing", " \
    \       if (l.length == 1) return true\n        val diff = l(1) - l(0)\n     \
    \   for (i <- 1 until l.length) {\n            if (diff * (l(i) - l(i - 1)) <\
    \ 0) return false\n        }\n        return true", "        if (l.size <= 1)\
    \ return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.size <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = l(0) <= l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            } else {\n\
    \                if (l(i) < l(i + 1)) return false\n            }\n        }\n\
    \        return true", "        if (l.size <= 1) return true\n        val diff\
    \ = l(1) - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true", "        if\
    \ (l.length == 1) return true\n        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) < l(i -\
    \ 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \        }\n        increasing || decreasing", "        if (l.length == 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        if (diffs2.exists(x\
    \ => x > 0)) return false\n        return true", "        if (l.size <= 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        return inc || dec", "        if\
    \ (l.size <= 1) return true\n        var isIncreasing = true\n        var isDecreasing\
    \ = true\n        for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1))\
    \ isDecreasing = false\n            if (l(i) < l(i - 1)) isIncreasing = false\n\
    \        }\n        return isIncreasing || isDecreasing", "        if (l.length\
    \ <= 1) return true\n        var prev = l(0)\n        var inc = true\n       \
    \ var dec = true\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > prev) dec = false\n            if (l(i) < prev) inc = false\n            prev\
    \ = l(i)\n        }\n        return inc || dec", "        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length == 1) return true\n        var inc = true\n        var dec\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) > l(i -\
    \ 1)) dec = false\n            if (l(i) < l(i - 1)) inc = false\n        }\n \
    \       return inc || dec", "        if (l.length == 1) return true\n        val\
    \ diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n            if (diff\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true", "  \
    \      if (l.length <= 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        val n\
    \ = l.length\n        if (n == 1) return true\n        var i = 1\n        var\
    \ increasing = true\n        var decreasing = true\n        while (i < n) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n            i += 1\n        }\n        return increasing\
    \ || decreasing", "        if (l.size <= 1) return true\n        val d = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true", "        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length == 1) return true\n        var increasing = l(0) < l(1)\n\
    \        for (i <- 1 until l.length - 1) {\n            if (increasing && l(i)\
    \ > l(i + 1)) return false\n            if (!increasing && l(i) < l(i + 1)) return\
    \ false\n        }\n        return true", "        var increasing = true\n   \
    \     var decreasing = true\n        for (i <- 1 until l.length) {\n         \
    \   if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing", "        var\
    \ increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n         \
    \   if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing ||\
    \ decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length == 1) return true\n        var increasing = l(0) < l(1)\n\
    \        for (i <- 1 until l.length - 1) {\n            if (increasing && l(i)\
    \ > l(i + 1)) return false\n            if (!increasing && l(i) < l(i + 1)) return\
    \ false\n        }\n        return true", "        if (l.length == 1) return true\n\
    \        val d = l(1) - l(0)\n        var i = 1\n        while (i < l.length)\
    \ {\n            if (d * (l(i) - l(i - 1)) < 0) return false\n            i +=\
    \ 1\n        }\n        return true", "        if (l.length <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n            if\
    \ (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true",
  "        var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.size <= 1) return true\n        val diff = l(1) - l(0)\n        for\
    \ (i <- 1 until l.size) {\n            if (diff * (l(i) - l(i - 1)) < 0) return\
    \ false\n        }\n        return true", "        if (l.size <= 1) return true\n\
    \        val sign = l(1) - l(0)\n        for (i <- 1 until l.size) {\n       \
    \     if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.size <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.size) {\n        \
    \    if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        return increasing || decreasing", " \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        val diff =\
    \ l(1) - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true", "        if\
    \ (l.length <= 1) return true\n        var increasing = l(0) <= l(1)\n       \
    \ for (i <- 1 until l.length - 1) {\n            if (increasing) {\n         \
    \       if (l(i) > l(i + 1)) return false\n            } else {\n            \
    \    if (l(i) < l(i + 1)) return false\n            }\n        }\n        return\
    \ true", "        if (l.length <= 1) return true\n        val sign = l(1) - l(0)\n\
    \        for (i <- 1 until l.length) {\n            if (sign * (l(i) - l(i - 1))\
    \ < 0) return false\n        }\n        return true", "        if (l.size <= 1)\
    \ return true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size)\
    \ {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n \
    \       return true", "        val n = l.length\n        if (n == 1) return true\n\
    \        var i = 1\n        var inc = true\n        var dec = true\n        while\
    \ (i < n) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n            if (!inc && !dec) return false\n      \
    \      i += 1\n        }\n        return true", "        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing", "        if (l.size <= 1) return true\n      \
    \  val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n        if (diffs.forall(x\
    \ => x > 0)) return true\n        if (diffs.forall(x => x < 0)) return true\n\
    \        return false", "        if (l.length <= 1) return true\n        var direction\
    \ = 0\n        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1))\
    \ {\n                if (direction == -1) return false\n                direction\
    \ = 1\n            } else if (l(i) < l(i - 1)) {\n                if (direction\
    \ == 1) return false\n                direction = -1\n            }\n        }\n\
    \        return true", "        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length <= 1) return true\n        val diff = l(1) - l(0)\n      \
    \  if (diff == 0) return false\n        var i = 2\n        while (i < l.length)\
    \ {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n            i\
    \ += 1\n        }\n        return true", "        if (l.length <= 1) return true\n\
    \        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n        val diff\
    \ = diffs(0)\n        diffs.forall(x => x == diff)", "        if (l.length ==\
    \ 1) return true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n \
    \       return true", "        if (l.length <= 1) return true\n        var i =\
    \ 0\n        var inc = true\n        var dec = true\n        while (i < l.length\
    \ - 1) {\n            if (l(i) > l(i + 1)) inc = false\n            if (l(i) <\
    \ l(i + 1)) dec = false\n            i += 1\n        }\n        return inc ||\
    \ dec", "        var increasing = true\n        var decreasing = true\n      \
    \  for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 0 until l.length - 1) {\n            if\
    \ (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n        }\n        increasing || decreasing", "        if (l.size <=\
    \ 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ var inc = true\n        var dec = true\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) < l(i - 1)) inc = false\n            if (l(i) > l(i\
    \ - 1)) dec = false\n        }\n        return inc || dec", "        if (l.length\
    \ <= 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n  \
    \      }\n        return true", "        if (l.length <= 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 1\
    \ until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n   \
    \         if (l(i) > l(i - 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing",
  "        if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.size) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ <= 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.size) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n    \
    \    }\n        return true", "        if (l.length <= 1) return true\n      \
    \  val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n           \
    \ if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true",
  "        if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.size) {\n            if (l(i)\
    \ < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        increasing || decreasing", "        if (l.length\
    \ <= 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length == 1) return true\n  \
    \      if (l.length == 2) return l(0) == l(1)\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        var increasing = l(0) < l(1)\n        for\
    \ (i <- 1 until l.length - 1) {\n            if (increasing) {\n             \
    \   if (l(i) > l(i + 1)) return false\n            } else {\n                if\
    \ (l(i) < l(i + 1)) return false\n            }\n        }\n        return true",
  "        if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 0 until l.size - 1) {\n            if (l(i)\
    \ > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.size\
    \ == 1) return true\n        val sign = l(1) - l(0)\n        for (i <- 1 until\
    \ l.size) {\n            if (sign * (l(i) - l(i - 1)) < 0) return false\n    \
    \    }\n        return true", "        if (l.length <= 1) return true\n      \
    \  var increasing = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n \
    \           if (increasing && l(i) > l(i + 1)) return false\n            if (!increasing\
    \ && l(i) < l(i + 1)) return false\n        }\n        return true", "       \
    \ if (l.length == 1) return true\n        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) > l(i -\
    \ 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing = false\n\
    \        }\n        return increasing || decreasing", "        if (l.length ==\
    \ 1) return true\n        var i = 0\n        var increasing = true\n        while\
    \ (i < l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n\
    \            i += 1\n        }\n        if (increasing) return true\n        i\
    \ = 0\n        var decreasing = true\n        while (i < l.length - 1) {\n   \
    \         if (l(i) < l(i + 1)) decreasing = false\n            i += 1\n      \
    \  }\n        return decreasing", "        if (l.length <= 1) return true\n  \
    \      val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n       \
    \     if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true", "        if (l.size <= 1) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.size) {\n        \
    \    if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        return increasing || decreasing", " \
    \       if (l.length <= 1) return true\n        var increasing = true\n      \
    \  var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        increasing || decreasing", "        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.length == 1) true\n        else {\n            val diff = l.zip(l.tail).map(x\
    \ => x._2 - x._1)\n            diff.forall(x => x == 0) || diff.forall(x => x\
    \ > 0) || diff.forall(x => x < 0)\n        }", "        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing", "        if\
    \ (l.length <= 1) return true\n        if (l(0) < l(1)) {\n            for (i\
    \ <- 1 until l.length - 1) {\n                if (l(i) > l(i + 1)) return false\n\
    \            }\n        } else {\n            for (i <- 1 until l.length - 1)\
    \ {\n                if (l(i) < l(i + 1)) return false\n            }\n      \
    \  }\n        return true", "        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 1 until l.length) {\n            if (l(i) < l(i -\
    \ 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \        }\n        increasing || decreasing", "        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.size == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.size <= 1) return true\n        var isIncreasing = l(0) < l(1)\n\
    \        for (i <- 1 until l.size - 1) {\n            if (isIncreasing) {\n  \
    \              if (l(i) > l(i + 1)) return false\n            } else {\n     \
    \           if (l(i) < l(i + 1)) return false\n            }\n        }\n    \
    \    return true", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length == 1) return true\n        var increasing = true\n       \
    \ var decreasing = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ <= 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length <= 1) true\n        else {\n            val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n            val first = diffs(0)\n            diffs.forall(x\
    \ => x == first)\n        }", "        if (l.size == 1) return true\n        var\
    \ increasing = true\n        var decreasing = true\n        for (i <- 0 until\
    \ l.size - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n       \
    \     if (l(i) < l(i + 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length == 1) return true\n        var increasing\
    \ = l(0) <= l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true", "        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing",
  "        if (l.length == 1) return true\n        var isIncreasing = l(0) < l(1)\n\
    \        for (i <- 1 until l.length - 1) {\n            if (isIncreasing) {\n\
    \                if (l(i) > l(i + 1)) return false\n            } else {\n   \
    \             if (l(i) < l(i + 1)) return false\n            }\n        }\n  \
    \      return true", "        val s = l.sorted\n        val r = l.sorted.reverse\n\
    \        return (l == s || l == r)", "        if (l.length <= 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.size <= 1) return true\n        var\
    \ increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n           \
    \ if (l(i) < l(i - 1)) increasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var isIncreasing\
    \ = true\n        var isDecreasing = true\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) < l(i - 1)) isIncreasing = false\n            if (l(i)\
    \ > l(i - 1)) isDecreasing = false\n        }\n        return isIncreasing ||\
    \ isDecreasing"]
stop_tokens:
- "\n    }\n"
