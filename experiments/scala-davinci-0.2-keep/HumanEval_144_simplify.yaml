name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // simplify(\"\
  1/5\", \"5/1\") = True\n    // simplify(\"1/6\", \"2/1\") = False\n    // simplify(\"\
  7/10\", \"10/2\") = False\n    def simplify(x : String, n : String) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnum = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum\
    \ = nn(0).toInt\n        val nden = nn(1).toInt\n        val num = xnum * nden\n\
    \        val den = xden * nnum\n        if (num % den == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xd\
    \ = xn(1).toInt\n        val nd = nn(1).toInt\n        val xnumerator = xn(0).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val numerator = xnumerator * nd\n\
    \        val denominator = xd * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        result == denominator / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt) match\
    \ { case Array(xn, xd) => (xn, xd) }\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\
    \ match { case Array(nn, nd) => (nn, nd) }\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        numerator2 % denominator2 == 0", "        val (x1, x2) = x.split(\"/\"\
    ).map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n        val\
    \ (a, b) = (x1 * n2, x2 * n1)\n        a % b == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val xnumerator2 = xnumerator\
    \ * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n    \
    \    val gcd = gcd2(xnumerator2, xdenominator2)\n        if (xnumerator2 / gcd\
    \ == xdenominator2 / gcd) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xs = x.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val ns = n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd\
    \ = ns(1).toInt\n        val num = xn * nd\n        val den = xd * nn\n      \
    \  val gcd = gcd(num, den)\n        val num2 = num / gcd\n        val den2 = den\
    \ / gcd\n        if (num2 % den2 == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val xNum = x.split(\"\
    /\")(0).toInt\n        val xDen = x.split(\"/\")(1).toInt\n        val nNum =\
    \ n.split(\"/\")(0).toInt\n        val nDen = n.split(\"/\")(1).toInt\n      \
    \  val gcd = gcd(xNum * nDen, xDen * nNum)\n        (xNum * nDen / gcd) % (xDen\
    \ * nNum / gcd) == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val\
    \ nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val xgcd = gcd(xn, xd)\n\
    \        val ngcd = gcd(nn, nd)\n        val xn2 = xn / xgcd\n        val xd2\
    \ = xd / xgcd\n        val nn2 = nn / ngcd\n        val nd2 = nd / ngcd\n    \
    \    val xn3 = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val xgcd2 = gcd(xn3,\
    \ xd3)\n        val xn4 = xn3 / xgcd2\n        val xd4 = xd3 / xgcd2\n       \
    \ xd4 == 1", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        if (gcd == 1) false\
    \ else true", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        if (result == denominator) true\
    \ else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator2\
    \ = numerator / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd"]
stop_tokens:
- "\n    }\n"
