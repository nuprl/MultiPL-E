name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // simplify(\"\
  1/5\", \"5/1\") = True\n    // simplify(\"1/6\", \"2/1\") = False\n    // simplify(\"\
  7/10\", \"10/2\") = False\n    def simplify(x : String, n : String) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnum = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum\
    \ = nn(0).toInt\n        val nden = nn(1).toInt\n        val num = xnum * nden\n\
    \        val den = xden * nnum\n        if (num % den == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xd\
    \ = xn(1).toInt\n        val nd = nn(1).toInt\n        val xnumerator = xn(0).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val numerator = xnumerator * nd\n\
    \        val denominator = xd * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        result == denominator / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt) match\
    \ { case Array(xn, xd) => (xn, xd) }\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\
    \ match { case Array(nn, nd) => (nn, nd) }\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        numerator2 % denominator2 == 0", "        val (x1, x2) = x.split(\"/\"\
    ).map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n        val\
    \ (a, b) = (x1 * n2, x2 * n1)\n        a % b == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val xnumerator2 = xnumerator\
    \ * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n    \
    \    val gcd = gcd2(xnumerator2, xdenominator2)\n        if (xnumerator2 / gcd\
    \ == xdenominator2 / gcd) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xs = x.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val ns = n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd\
    \ = ns(1).toInt\n        val num = xn * nd\n        val den = xd * nn\n      \
    \  val gcd = gcd(num, den)\n        val num2 = num / gcd\n        val den2 = den\
    \ / gcd\n        if (num2 % den2 == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val xNum = x.split(\"\
    /\")(0).toInt\n        val xDen = x.split(\"/\")(1).toInt\n        val nNum =\
    \ n.split(\"/\")(0).toInt\n        val nDen = n.split(\"/\")(1).toInt\n      \
    \  val gcd = gcd(xNum * nDen, xDen * nNum)\n        (xNum * nDen / gcd) % (xDen\
    \ * nNum / gcd) == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val\
    \ nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val xgcd = gcd(xn, xd)\n\
    \        val ngcd = gcd(nn, nd)\n        val xn2 = xn / xgcd\n        val xd2\
    \ = xd / xgcd\n        val nn2 = nn / ngcd\n        val nd2 = nd / ngcd\n    \
    \    val xn3 = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val xgcd2 = gcd(xn3,\
    \ xd3)\n        val xn4 = xn3 / xgcd2\n        val xd4 = xd3 / xgcd2\n       \
    \ xd4 == 1", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        if (gcd == 1) false\
    \ else true", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        if (result == denominator) true\
    \ else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator2\
    \ = numerator / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 =\
    \ xd / gcd\n        xn2 == xd2", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        xn /\
    \ gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n \
    \       val xd2 = xd / gcd\n        xn2 == xd2", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val\
    \ xd = xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n        val gcd2 = BigInt(nn).gcd(BigInt(nd)).toInt\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        val nn2 = nn\
    \ / gcd2\n        val nd2 = nd / gcd2\n        val xn3 = xn2 * nd2\n        val\
    \ xd3 = xd2 * nn2\n        val gcd3 = BigInt(xn3).gcd(BigInt(xd3)).toInt\n   \
    \     val xn4 = xn3 / gcd3\n        val xd4 = xd3 / gcd3\n        xd4 == 1", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val xn = xs(0).toInt\n\
    \        val xd = xs(1).toInt\n        val ns = n.split(\"/\")\n        val nn\
    \ = ns(0).toInt\n        val nd = ns(1).toInt\n        val xn2 = xn * nd\n   \
    \     val xd2 = xd * nn\n        val gcd = gcd2(xn2, xd2)\n        val xn3 = xn2\
    \ / gcd\n        val xd3 = xd2 / gcd\n        if (xn3 % xd3 == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = gcd(xn, xd)\n        xn / gcd == xd / gcd", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd ==\
    \ 0", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val x_numerator_n\
    \ = x_numerator * n_denominator\n        val x_denominator_n = x_denominator *\
    \ n_numerator\n        val gcd = gcd_recursive(x_numerator_n, x_denominator_n)\n\
    \        val x_numerator_n_simplified = x_numerator_n / gcd\n        val x_denominator_n_simplified\
    \ = x_denominator_n / gcd\n        if (x_denominator_n_simplified == 1) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val xArray = x.split(\"/\")\n        val nArray\
    \ = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n        val xDenominator\
    \ = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n        val nDenominator\
    \ = nArray(1).toInt\n        val xNumerator2 = xNumerator * nDenominator\n   \
    \     val xDenominator2 = xDenominator * nNumerator\n        val gcd = gcd(xNumerator2,\
    \ xDenominator2)\n        val xNumerator3 = xNumerator2 / gcd\n        val xDenominator3\
    \ = xDenominator2 / gcd\n        xDenominator3 == 1", "        val xn = x.split(\"\
    /\").map(_.toInt)\n        val nn = n.split(\"/\").map(_.toInt)\n        val xn_\
    \ = xn(0) * nn(1)\n        val nn_ = nn(0) * xn(1)\n        val gcd = gcd(xn_,\
    \ nn_)\n        (xn_ / gcd) % (nn_ / gcd) == 0", "        val (x1, x2) = x.split(\"\
    /\").map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n      \
    \  val (a, b) = (x1 * n2, x2 * n1)\n        a % b == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val\
    \ xd = xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val d = gcd(xd, nd)\n        val nd1 = nd / d\n        val xd1 = xd /\
    \ d\n        val nn1 = nn / d\n        val xn1 = xn / d\n        val xn2 = xn1\
    \ * nd1\n        val nn2 = nn1 * xd1\n        xn2 == nn2", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val x_numerator_n\
    \ = x_numerator * n_denominator\n        val n_numerator_x = n_numerator * x_denominator\n\
    \        val x_denominator_n = x_denominator * n_denominator\n        val n_denominator_x\
    \ = n_denominator * x_denominator\n        val x_numerator_n_numerator_x = x_numerator_n\
    \ + n_numerator_x\n        val x_denominator_n_n_denominator_x = x_denominator_n\
    \ * n_denominator_x\n        if (x_numerator_n_numerator_x % x_denominator_n_n_denominator_x\
    \ == 0) true else false", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n        val gcd = BigInt(xn2).gcd(xd2).toInt\n\
    \        (xn2 / gcd) % (xd2 / gcd) == 0", "        val xn = x.split(\"/\")\n \
    \       val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n      \
    \  val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n    \
    \    val ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        numerator / gcd == denominator / gcd", "        val xArray = x.split(\"\
    /\")\n        val nArray = n.split(\"/\")\n        val xNum = xArray(0).toInt\n\
    \        val xDen = xArray(1).toInt\n        val nNum = nArray(0).toInt\n    \
    \    val nDen = nArray(1).toInt\n        val xNumN = xNum * nDen\n        val\
    \ nNumX = nNum * xDen\n        val xDenN = xDen * nDen\n        val nDenX = nDen\
    \ * xDen\n        val xNumNXDenN = xNumN * xDenN\n        val nNumXNDenX = nNumX\
    \ * nDenX\n        if (xNumNXDenN == nNumXNDenX) true else false", "        val\
    \ xNum = x.split(\"/\")(0).toInt\n        val xDen = x.split(\"/\")(1).toInt\n\
    \        val nNum = n.split(\"/\")(0).toInt\n        val nDen = n.split(\"/\"\
    )(1).toInt\n        val gcd = gcd(xNum * nDen, xDen * nNum)\n        (xNum * nDen)\
    \ / gcd == (xDen * nNum) / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2\
    \ = xn / gcd\n        val xd2 = xd / gcd\n        xn2 == xd2", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nn = ns(0).toInt * xs(1).toInt\n\
    \        xn % nn == 0", "        val xs = x.split(\"/\").map(_.toInt)\n      \
    \  val ns = n.split(\"/\").map(_.toInt)\n        val xn = xs(0) * ns(1) * ns(0)\n\
    \        val nn = xs(1) * ns(1) * xs(0)\n        xn % nn == 0", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnum = xn(0).toInt\n\
    \        val xden = xn(1).toInt\n        val nnum = nn(0).toInt\n        val nden\
    \ = nn(1).toInt\n        val num = xnum * nden\n        val den = xden * nnum\n\
    \        val gcd = gcd(num, den)\n        val num2 = num / gcd\n        val den2\
    \ = den / gcd\n        if (num2 % den2 == 0) true else false", "        val x_num\
    \ = x.split(\"/\")(0).toInt\n        val x_den = x.split(\"/\")(1).toInt\n   \
    \     val n_num = n.split(\"/\")(0).toInt\n        val n_den = n.split(\"/\")(1).toInt\n\
    \        val gcd = gcd(x_num * n_den, x_den * n_num)\n        (x_num * n_den)\
    \ / gcd == (x_den * n_num) / gcd", "        val x_ = x.split(\"/\").map(_.toInt)\n\
    \        val n_ = n.split(\"/\").map(_.toInt)\n        val x_n = x_(0) * n_(1)\
    \ * n_(0) * x_(1)\n        x_n % (x_(1) * n_(1)) == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nn = ns(0).toInt * xs(1).toInt\n        xn % nn == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val reducedNumerator\
    \ = numerator / gcd.toInt\n        val reducedDenominator = denominator / gcd.toInt\n\
    \        reducedNumerator == reducedDenominator", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnum = xn(0).toInt\n      \
    \  val xden = xn(1).toInt\n        val nnum = nn(0).toInt\n        val nden =\
    \ nn(1).toInt\n        val num = xnum * nden\n        val den = xden * nnum\n\
    \        val gcd = gcd(num, den)\n        val nums = num / gcd\n        val dens\
    \ = den / gcd\n        nums % dens == 0", "        val xs = x.split(\"/\")\n \
    \       val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val ns = n.split(\"\
    /\")\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val\
    \ p = xn * nd\n        val q = xd * nn\n        p % q == 0", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = BigInt(xn(0))\n\
    \        val xdenominator = BigInt(xn(1))\n        val nnumerator = BigInt(nn(0))\n\
    \        val ndenominator = BigInt(nn(1))\n        val numerator = xnumerator\
    \ * ndenominator\n        val denominator = xdenominator * nnumerator\n      \
    \  val gcd = numerator.gcd(denominator)\n        val simplified = (numerator /\
    \ gcd, denominator / gcd)\n        simplified._1 % simplified._2 == 0", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        val gcd2 = BigInt(nn).gcd(nd).toInt\n\
    \        val nn2 = nn / gcd2\n        val nd2 = nd / gcd2\n        val xn3 = xn2\
    \ * nd2\n        val xd3 = xd2 * nn2\n        val gcd3 = BigInt(xn3).gcd(xd3).toInt\n\
    \        val xn4 = xn3 / gcd3\n        val xd4 = xd3 / gcd3\n        xd4 == 1",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        if (gcd == 1) false else\
    \ true", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xnumerator = xn(0).toLong\n        val xdenominator = xn(1).toLong\n\
    \        val nnumerator = nn(0).toLong\n        val ndenominator = nn(1).toLong\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val xnumerator2\
    \ = xnumerator * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n\
    \        val gcd = gcd(xnumerator2, xdenominator2)\n        val xnumerator3 =\
    \ xnumerator2 / gcd\n        val xdenominator3 = xdenominator2 / gcd\n       \
    \ if (xdenominator3 == 1) true else false", "        val x1 = x.split(\"/\")\n\
    \        val n1 = n.split(\"/\")\n        val x2 = x1(0).toInt\n        val x3\
    \ = x1(1).toInt\n        val n2 = n1(0).toInt\n        val n3 = n1(1).toInt\n\
    \        val x4 = x2 * n3\n        val n4 = n2 * x3\n        val x5 = x4 / gcd(x4,\
    \ n4)\n        val n5 = n4 / gcd(x4, n4)\n        x5 == n5", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ xnumerator2 = xnumerator * ndenominator\n        val xdenominator2 = xdenominator\
    \ * nnumerator\n        val gcd = gcd(xnumerator2, xdenominator2)\n        val\
    \ xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2 /\
    \ gcd\n        if (xdenominator3 == 1) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn =\
    \ ns(0).toInt\n        val nd = ns(1).toInt\n        val xn1 = xn * nd\n     \
    \   val xd1 = xd * nn\n        val gcd = gcd1(xn1, xd1)\n        val xn2 = xn1\
    \ / gcd\n        val xd2 = xd1 / gcd\n        if (xn2 % xd2 == 0) true else false",
  "        val xParts = x.split(\"/\")\n        val nParts = n.split(\"/\")\n    \
    \    val xNum = xParts(0).toInt\n        val xDen = xParts(1).toInt\n        val\
    \ nNum = nParts(0).toInt\n        val nDen = nParts(1).toInt\n        val xNumN\
    \ = xNum * nDen\n        val nNumX = nNum * xDen\n        val xDenN = xDen * nDen\n\
    \        val nDenX = nDen * xDen\n        val xNumNDen = xNumN / xDenN\n     \
    \   val nNumXDen = nNumX / nDenX\n        xNumNDen == nNumXDen", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      if (xn % xd == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ (xn, xd) = x.split(\"/\").map(_.toInt) match { case Array(xn, xd) => (xn, xd)\
    \ }\n        val (nn, nd) = n.split(\"/\").map(_.toInt) match { case Array(nn,\
    \ nd) => (nn, nd) }\n        val (numerator, denominator) = (xn * nn, xd * nd)\n\
    \        val gcd = BigInt(numerator).gcd(denominator).toInt\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        (xn / gcd)\
    \ % (xd / gcd) == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val product = xnumerator * nnumerator\n        val productdenominator\
    \ = xdenominator * ndenominator\n        if (product % productdenominator == 0)\
    \ true else false", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3)\
    \ = (xn2 / gcd(xn2, xd2), xd2 / gcd(xn2, xd2))\n        xn3 % xd3 == 0", "   \
    \     val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_numerator\
    \ = x_(0).toInt\n        val x_denominator = x_(1).toInt\n        val n_numerator\
    \ = n_(0).toInt\n        val n_denominator = n_(1).toInt\n        val numerator\
    \ = x_numerator * n_denominator\n        val denominator = x_denominator * n_numerator\n\
    \        val gcd = gcd_iter(numerator, denominator)\n        val simplified_numerator\
    \ = numerator / gcd\n        val simplified_denominator = denominator / gcd\n\
    \        if (simplified_numerator == simplified_denominator) true\n        else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val xd =\
    \ xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n  \
    \      val g = gcd(xn * nd, xd * nn)\n        (xn * nd / g) % (xd * nn / g) ==\
    \ 0", "        val xs = x.split(\"/\")\n        val xn = xs(0).toInt\n       \
    \ val xd = xs(1).toInt\n        val ns = n.split(\"/\")\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val r = xn * nd * nn * xd\n        r %\
    \ (xn * nd) == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val\
    \ xd = xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val num = xn * nd\n        val den = xd * nn\n        val gcd = BigInt(num).gcd(den).toInt\n\
    \        val num2 = num / gcd\n        val den2 = den / gcd\n        num2 % den2\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val gcd = BigInt(xn).gcd(xd)\n        val\
    \ xn2 = xn / gcd.toInt\n        val xd2 = xd / gcd.toInt\n        val gcd2 = BigInt(nn).gcd(nd)\n\
    \        val nn2 = nn / gcd2.toInt\n        val nd2 = nd / gcd2.toInt\n      \
    \  val xn3 = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val gcd3 = BigInt(xn3).gcd(xd3)\n\
    \        val xn4 = xn3 / gcd3.toInt\n        val xd4 = xd3 / gcd3.toInt\n    \
    \    xd4 == 1", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val simplifiedNumerator = numerator / gcd.toInt\n        val simplifiedDenominator\
    \ = denominator / gcd.toInt\n        if (simplifiedDenominator == 1) true else\
    \ false", "        val xn = x.split(\"/\").map(_.toInt)\n        val nn = n.split(\"\
    /\").map(_.toInt)\n        val g = gcd(xn(0), xn(1))\n        val g2 = gcd(nn(0),\
    \ nn(1))\n        val xn2 = (xn(0) / g, xn(1) / g)\n        val nn2 = (nn(0) /\
    \ g2, nn(1) / g2)\n        val xn3 = (xn2._1 * nn2._2, xn2._2 * nn2._1)\n    \
    \    val g3 = gcd(xn3._1, xn3._2)\n        val xn4 = (xn3._1 / g3, xn3._2 / g3)\n\
    \        xn4._1 % xn4._2 == 0", "        val xs = x.split(\"/\").map(_.toInt)\n\
    \        val ns = n.split(\"/\").map(_.toInt)\n        val g = gcd(xs(0) * ns(1),\
    \ xs(1) * ns(0))\n        (xs(0) * ns(1) / g) % (xs(1) * ns(0) / g) == 0", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnum = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum = nn(0).toInt\n\
    \        val nden = nn(1).toInt\n        val num = xnum * nden\n        val den\
    \ = xden * nnum\n        val gcd = gcd(num, den)\n        val num2 = num / gcd\n\
    \        val den2 = den / gcd\n        if (num2 % den2 == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        val result = numerator\
    \ / gcd\n        if (result == denominator) true else false", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n\
    \        val xd = xs(1).toInt\n        val nn = ns(0).toInt\n        val nd =\
    \ ns(1).toInt\n        val g = gcd(xn * nd, xd * nn)\n        (xn * nd / g) %\
    \ (xd * nn / g) == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n  \
    \      val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator =\
    \ n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n\
    \        val result_numerator = x_numerator * n_numerator\n        val result_denominator\
    \ = x_denominator * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        val result_numerator_simplified = result_numerator / gcd\n        val\
    \ result_denominator_simplified = result_denominator / gcd\n        if (result_numerator_simplified\
    \ % result_denominator_simplified == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xArray = x.split(\"/\")\n      \
    \  val nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n   \
    \     val xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n\
    \        val nDenominator = nArray(1).toInt\n        val numerator = xNumerator\
    \ * nDenominator\n        val denominator = xDenominator * nNumerator\n      \
    \  val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toLong\n        val xdenominator = xn(1).toLong\n\
    \        val nnumerator = nn(0).toLong\n        val ndenominator = nn(1).toLong\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val x1 = x.split(\"/\"\
    )\n        val n1 = n.split(\"/\")\n        val x2 = x1(0).toInt * n1(1).toInt\n\
    \        val n2 = x1(1).toInt * n1(0).toInt\n        val gcd = gcd(x2, n2)\n \
    \       x2 / gcd == n2 / gcd", "        val xArray = x.split(\"/\")\n        val\
    \ nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n        val\
    \ xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n \
    \       val nDenominator = nArray(1).toInt\n        val productNumerator = xNumerator\
    \ * nNumerator\n        val productDenominator = xDenominator * nDenominator\n\
    \        val gcd = gcd(productNumerator, productDenominator)\n        val simplifiedNumerator\
    \ = productNumerator / gcd\n        val simplifiedDenominator = productDenominator\
    \ / gcd\n        simplifiedNumerator % simplifiedDenominator == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        if (gcd == 1) return false\n\
    \        else return true", "        val (xn, xd) = (x.split(\"/\")(0).toInt,\
    \ x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"\
    /\")(1).toInt)\n        val (nxn, nxd) = (xn * nn, xd * nd)\n        val (gcd,\
    \ lcm) = (gcd(nxn, nxd), lcm(nxd, nxd))\n        (nxn / gcd) % (nxd / gcd) ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * ndenominator\n        val denominator = xdenominator\
    \ * nnumerator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      xn % xd == 0", "        val (x1, x2) = x.split(\"/\").map(_.toInt)\n  \
    \      val (n1, n2) = n.split(\"/\").map(_.toInt)\n        val (a, b) = (x1 *\
    \ n2, x2 * n1)\n        a % b == 0", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n        val xd2 = xd /\
    \ gcd\n        val nn2 = nn / gcd\n        val nd2 = nd / gcd\n        val xn3\
    \ = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val gcd2 = BigInt(xn3).gcd(xd3).toInt\n\
    \        val xn4 = xn3 / gcd2\n        val xd4 = xd3 / gcd2\n        xd4 == 1",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        val result = numerator\
    \ / gcd\n        result % denominator == 0", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 == xd2", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        val gcd2 = BigInt(nn).gcd(nd).toInt\n\
    \        val nn2 = nn / gcd2\n        val nd2 = nd / gcd2\n        val xn3 = xn2\
    \ * nd2\n        val xd3 = xd2 * nn2\n        val gcd3 = BigInt(xn3).gcd(xd3).toInt\n\
    \        val xn4 = xn3 / gcd3\n        val xd4 = xd3 / gcd3\n        if (xd4 ==\
    \ 1) true else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = BigInt(xn(0))\n        val xdenominator = BigInt(xn(1))\n\
    \        val nnumerator = BigInt(nn(0))\n        val ndenominator = BigInt(nn(1))\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = numerator.gcd(denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd\
    \ == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        if (xn % xd == 0) true else false", "        val x_numerator\
    \ = x.split(\"/\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n\
    \        val n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator\
    \ = n.split(\"/\")(1).toInt\n        val product_numerator = x_numerator * n_numerator\n\
    \        val product_denominator = x_denominator * n_denominator\n        val\
    \ gcd = gcd(product_numerator, product_denominator)\n        product_numerator\
    \ / gcd == product_denominator / gcd", "        val xArray = x.split(\"/\")\n\
    \        val nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n\
    \        val xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n\
    \        val nDenominator = nArray(1).toInt\n        val numerator = xNumerator\
    \ * nDenominator\n        val denominator = xDenominator * nNumerator\n      \
    \  val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       val simplifiedNumerator = numerator / gcd\n        val simplifiedDenominator\
    \ = denominator / gcd\n        if (simplifiedNumerator % simplifiedDenominator\
    \ == 0) true else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val\
    \ xd = xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n        val xn2 = xn / gcd\n\
    \        val xd2 = xd / gcd\n        val nn2 = nn / gcd\n        val nd2 = nd\
    \ / gcd\n        val xn3 = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val\
    \ gcd2 = BigInt(xn3).gcd(BigInt(xd3)).toInt\n        val xn4 = xn3 / gcd2\n  \
    \      val xd4 = xd3 / gcd2\n        xd4 == 1", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 == xd2",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      xn % xd == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        if (xn % xd == 0) true else\
    \ false", "        val x1 = x.split(\"/\")\n        val n1 = n.split(\"/\")\n\
    \        val x2 = x1(0).toInt * n1(1).toInt\n        val n2 = x1(1).toInt * n1(0).toInt\n\
    \        x2 % n2 == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n\
    \        val xn_ = xn / gcd\n        val xd_ = xd / gcd\n        xn_ == xd_",
  "        val (xn, xd) = x.split(\"/\").map(_.toInt) match { case Array(xn, xd) =>\
    \ (xn, xd) }\n        val (nn, nd) = n.split(\"/\").map(_.toInt) match { case\
    \ Array(nn, nd) => (nn, nd) }\n        val (numerator, denominator) = (xn * nn,\
    \ xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n     \
    \   (numerator / gcd) % (denominator / gcd) == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        if (xn % xd == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn =\
    \ ns(0).toInt\n        val nd = ns(1).toInt\n        val d = gcd(xd, nd)\n   \
    \     val nd1 = nd / d\n        val xd1 = xd / d\n        val nn1 = nn * xd1\n\
    \        val xn1 = xn * nd1\n        val d1 = gcd(nn1, xn1)\n        val nn2 =\
    \ nn1 / d1\n        val xn2 = xn1 / d1\n        nn2 == xn2", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val result = numerator / gcd\n  \
    \      if (result == denominator) true else false", "        val (xn, xd) = (x.split(\"\
    /\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\"\
    )(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd *\
    \ nn)\n        val gcd = BigInt(xn2).gcd(xd2).toInt\n        val (xn3, xd3) =\
    \ (xn2 / gcd, xd2 / gcd)\n        xd3 == 1", "        val xn = x.split(\"/\").map(_.toInt)\n\
    \        val nn = n.split(\"/\").map(_.toInt)\n        val product = xn(0) * nn(1)\
    \ * nn(0) * xn(1)\n        product % (xn(1) * nn(1)) == 0", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nn = ns(0).toInt * xs(1).toInt\n\
    \        xn % nn == 0", "        val x_arr = x.split(\"/\")\n        val n_arr\
    \ = n.split(\"/\")\n        val x_num = x_arr(0).toInt\n        val x_den = x_arr(1).toInt\n\
    \        val n_num = n_arr(0).toInt\n        val n_den = n_arr(1).toInt\n    \
    \    val num = x_num * n_den\n        val den = x_den * n_num\n        val gcd\
    \ = gcd_iter(num, den)\n        val num_simplified = num / gcd\n        val den_simplified\
    \ = den / gcd\n        if (num_simplified == den_simplified) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       val result = numerator / gcd\n        if (result == denominator) true\
    \ else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        if (result == denominator) true\
    \ else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt *\
    \ ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n   \
    \     val xd2 = xd / gcd\n        xn2 == xd2", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       (xn / gcd) % (xd / gcd) == 0", "        val xn = x.split(\"/\")\n    \
    \    val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val\
    \ xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val\
    \ ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val g = gcd(xn * nd, xd * nn)\n       \
    \ (xn * nd / g) % (xd * nn / g) == 0", "        val xs = x.split(\"/\")\n    \
    \    val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val gcd =\
    \ BigInt(xn).gcd(BigInt(xd)).toInt\n        val xn2 = xn / gcd\n        val xd2\
    \ = xd / gcd\n        val nn2 = nn / gcd\n        val nd2 = nd / gcd\n       \
    \ val xn3 = xn2 * nd2\n        val xd3 = xd2 * nn2\n        val gcd2 = BigInt(xn3).gcd(BigInt(xd3)).toInt\n\
    \        val xn4 = xn3 / gcd2\n        val xd4 = xd3 / gcd2\n        xd4 == 1",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        xn % xd == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 == xd2", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n        xn / gcd == xd /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xnn, xdd) = (xn * nd, xd * nn)\n        val g = gcd(xnn,\
    \ xdd)\n        (xnn / g) % (xdd / g) == 0", "        val (x1, x2) = x.split(\"\
    /\").map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n      \
    \  val (a, b) = (x1 * n2, x2 * n1)\n        a % b == 0", "        val xArr = x.split(\"\
    /\")\n        val nArr = n.split(\"/\")\n        val xNum = xArr(0).toInt\n  \
    \      val xDen = xArr(1).toInt\n        val nNum = nArr(0).toInt\n        val\
    \ nDen = nArr(1).toInt\n        val num = xNum * nDen\n        val den = xDen\
    \ * nNum\n        val gcd = gcd(num, den)\n        val num2 = num / gcd\n    \
    \    val den2 = den / gcd\n        num2 % den2 == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        if (gcd == 1) return false\n\
    \        else {\n            val numerator2 = numerator / gcd\n            val\
    \ denominator2 = denominator / gcd\n            if (numerator2 % denominator2\
    \ == 0) return true\n            else return false\n        }", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd ==\
    \ 0", "        val (xNumerator, xDenominator) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nNumerator, nDenominator) = (n.split(\"/\")(0).toInt,\
    \ n.split(\"/\")(1).toInt)\n        val productNumerator = xNumerator * nNumerator\n\
    \        val productDenominator = xDenominator * nDenominator\n        val gcd\
    \ = gcd(productNumerator, productDenominator)\n        val simplifiedNumerator\
    \ = productNumerator / gcd\n        val simplifiedDenominator = productDenominator\
    \ / gcd\n        simplifiedNumerator % simplifiedDenominator == 0", "        val\
    \ xs = x.split(\"/\").map(_.toInt)\n        val ns = n.split(\"/\").map(_.toInt)\n\
    \        val xn = xs(0) * ns(1) * ns(0) * xs(1)\n        xn % (xs(1) * ns(1))\
    \ == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        val result_numerator_reduced = result_numerator / gcd\n        val result_denominator_reduced\
    \ = result_denominator / gcd\n        if (result_numerator_reduced % result_denominator_reduced\
    \ == 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val\
    \ nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val xn2 = xn * nd\n\
    \        val nn2 = nn * xd\n        val xd2 = xd * nd\n        val nd2 = nd *\
    \ xd\n        val gcd = gcd(xn2, xd2)\n        val gcd2 = gcd(nn2, nd2)\n    \
    \    val xn3 = xn2 / gcd\n        val xd3 = xd2 / gcd\n        val nn3 = nn2 /\
    \ gcd2\n        val nd3 = nd2 / gcd2\n        if (xn3 == nn3 && xd3 == nd3) true\
    \ else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       if (gcd == 1) false else true", "        val xn = x.split(\"/\")\n   \
    \     val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val\
    \ xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val\
    \ ndenominator = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n\
    \        val denominator = xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nn = ns(0).toInt * xs(1).toInt\n        if (xn % nn == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       val simplifiedNumerator = numerator / gcd\n        val simplifiedDenominator\
    \ = denominator / gcd\n        if (simplifiedNumerator % simplifiedDenominator\
    \ == 0) true else false", "        val xn = x.split(\"/\").map(_.toInt)\n    \
    \    val nn = n.split(\"/\").map(_.toInt)\n        val gcd = BigInt(xn(0)).gcd(BigInt(xn(1))).toInt\n\
    \        val xn2 = (xn(0) / gcd, xn(1) / gcd)\n        val gcd2 = BigInt(nn(0)).gcd(BigInt(nn(1))).toInt\n\
    \        val nn2 = (nn(0) / gcd2, nn(1) / gcd2)\n        val xn3 = (xn2._1 * nn2._2,\
    \ xn2._2 * nn2._1)\n        val gcd3 = BigInt(xn3._1).gcd(BigInt(xn3._2)).toInt\n\
    \        val xn4 = (xn3._1 / gcd3, xn3._2 / gcd3)\n        xn4._1 % xn4._2 ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        xn % xd == 0", "        val x_ = x.split(\"/\").map(_.toInt)\n\
    \        val n_ = n.split(\"/\").map(_.toInt)\n        val numerator = x_(0) *\
    \ n_(1)\n        val denominator = x_(1) * n_(0)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val x_n = x.split(\"\
    /\")\n        val n_n = n.split(\"/\")\n        val x_num = x_n(0).toInt\n   \
    \     val x_den = x_n(1).toInt\n        val n_num = n_n(0).toInt\n        val\
    \ n_den = n_n(1).toInt\n        val num = x_num * n_num\n        val den = x_den\
    \ * n_den\n        num % den == 0", "        val xs = x.split(\"/\")\n       \
    \ val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n      \
    \  val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val Array(xn,\
    \ xd) = x.split(\"/\").map(_.toInt)\n        val Array(nn, nd) = n.split(\"/\"\
    ).map(_.toInt)\n        val g = gcd(xd, nd)\n        val d = xd * nd / g\n   \
    \     val nn2 = nn * xd / g\n        val xn2 = xn * nd / g\n        val r = nn2\
    \ * xn2\n        r % d == 0", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * ndenominator\n        val\
    \ denominator = xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n\
    \        val result = numerator / gcd\n        val result2 = denominator / gcd\n\
    \        if (result == result2) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = gcd(numerator, denominator)\n        val result = numerator\
    \ / gcd\n        if (result == denominator) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd\
    \ == denominator / gcd", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn1, xd1) = (xn * nd, xd * nn)\n        val (xn2, xd2)\
    \ = (xn1 / gcd(xn1, xd1), xd1 / gcd(xn1, xd1))\n        if (xn2 % xd2 == 0) true\
    \ else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt *\
    \ ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd ==\
    \ xd / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        if (gcd == 1) return false\n    \
    \    else return true", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val nnumerator2 = numerator / gcd.toInt\n        val ndenominator2 =\
    \ denominator / gcd.toInt\n        nnumerator2 % ndenominator2 == 0", "      \
    \  val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn =\
    \ xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n    \
    \    xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       val simplifiedNumerator = numerator / gcd\n        val simplifiedDenominator\
    \ = denominator / gcd\n        if (simplifiedNumerator % simplifiedDenominator\
    \ == 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n        xn\
    \ / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xn1 = xn(0).toInt\n        val xn2 = xn(1).toInt\n        val\
    \ nn1 = nn(0).toInt\n        val nn2 = nn(1).toInt\n        val xn3 = xn1 * nn2\n\
    \        val nn3 = nn1 * xn2\n        val gcd = gcd(xn3, nn3)\n        val xn4\
    \ = xn3 / gcd\n        val nn4 = nn3 / gcd\n        xn4 % nn4 == 0", "       \
    \ val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        if (numerator % denominator == 0) true else false", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        val nn = xn / gcd\n        val nd = xd / gcd\n\
    \        nn % nd == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        if (numerator % denominator == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        if (numerator % denominator == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        xn % xd == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt\n        val xd =\
    \ xs(1).toInt\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n  \
    \      val g = gcd(xn * nd, xd * nn)\n        val r = (xn * nd) / g\n        val\
    \ d = (xd * nn) / g\n        r % d == 0", "        val x_ = x.split(\"/\")\n \
    \       val n_ = n.split(\"/\")\n        val x_num = x_(0).toInt\n        val\
    \ x_den = x_(1).toInt\n        val n_num = n_(0).toInt\n        val n_den = n_(1).toInt\n\
    \        val num = x_num * n_den\n        val den = x_den * n_num\n        val\
    \ gcd = BigInt(num).gcd(BigInt(den)).toInt\n        num / gcd == den / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ xnumerator2 = xnumerator * ndenominator\n        val xdenominator2 = xdenominator\
    \ * nnumerator\n        val gcd = gcd(xnumerator2, xdenominator2)\n        val\
    \ xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2 /\
    \ gcd\n        if (xdenominator3 == 1) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd)\n        val xn1 = xn / gcd.toInt\n        val xd1 = xd /\
    \ gcd.toInt\n        val gcd1 = BigInt(nn).gcd(nd)\n        val nn1 = nn / gcd1.toInt\n\
    \        val nd1 = nd / gcd1.toInt\n        val xn2 = xn1 * nd1\n        val xd2\
    \ = xd1 * nn1\n        val gcd2 = BigInt(xn2).gcd(xd2)\n        val xn3 = xn2\
    \ / gcd2.toInt\n        val xd3 = xd2 / gcd2.toInt\n        xn3 % xd3 == 0", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * ndenominator\n        val denominator = xdenominator\
    \ * nnumerator\n        val gcd = gcd(numerator, denominator)\n        if (gcd\
    \ == 1) return false\n        else {\n            val numerator2 = numerator /\
    \ gcd\n            val denominator2 = denominator / gcd\n            if (numerator2\
    \ % denominator2 == 0) return true\n            else return false\n        }",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * ndenominator\n        val denominator = xdenominator * nnumerator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd.toInt\n        val simplifiedDenominator = denominator / gcd.toInt\n\
    \        if (simplifiedDenominator == 1) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ ndenominator\n        val denominator = xdenominator * nnumerator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n  \
    \      val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * ndenominator\n        val denominator =\
    \ xdenominator * nnumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       val simplifiedNumerator = numerator / gcd\n        val simplifiedDenominator\
    \ = denominator / gcd\n        if (simplifiedNumerator % simplifiedDenominator\
    \ == 0) true else false"]
stop_tokens:
- "\n    }\n"
