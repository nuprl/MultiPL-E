name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return an array of the words.\n\
  \    // For example:\n    // words_string(\"Hi, my name is John\") == [\"Hi\", \"\
  my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three, four,\
  \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n \
  \   def wordsString(s : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ['        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', "        val words = s.split(\"[ ,]+\")\n   \
    \     words.toList", "        val words = s.split(\"[, ]+\")\n        words.toList",
  '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split(" |,").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', "        val words = s.split(\"[, ]+\")\n        words.toList",
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  "        val words = s.split(\"[, ]+\")\n        words.toList", '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', "        val words = s.split(\"\
    [\\\\s,]+\")\n        words.toList", '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[ ,]+").toList', '        s.split("[ ,]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', "        var words = List[String]()\n        var word = \"\"\n \
    \       for (c <- s) {\n            if (c == ' ' || c == ',') {\n            \
    \    if (word != \"\") {\n                    words = words :+ word\n        \
    \            word = \"\"\n                }\n            } else {\n          \
    \      word += c\n            }\n        }\n        if (word != \"\") words =\
    \ words :+ word\n        words", '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList']
stop_tokens:
- "\n    }\n"
