language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = words.filter(w\
    \ => primes.contains(w.length))\n        result.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_72zrmom.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val isPrime\
    \ = Array.fill(101)(true)\n        isPrime(0) = false\n        isPrime(1) = false\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) {\n              \
    \  for (j <- 2 to 100 / i) {\n                    isPrime(i * j) = false\n   \
    \             }\n            }\n        }\n        val words = sentence.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = ArrayBuffer[String]()\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuhqa2kx.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp197ni077.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder()\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgjazsml.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeWords = words.filter(word => primes.contains(word.length))\n     \
    \   primeWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzy2wukvz.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0radytc.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mword\e[0m => isPrime(word.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (1 to 100).filter(isPrime)\n   \
    \     words.filter(w => primes.contains(w.length)).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjh6e9fqk.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m1\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkusdg9oc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  words.filter(word => primes.contains(word.length)).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to words.map(_.length).max) {\n            if (isPrime(i)) primes +=\
    \ i\n        }\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptb1ouqbc.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = ArrayBuffer[String]()\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuhqa2kx.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0radytc.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mword\e[0m => isPrime(word.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     val result = new StringBuilder\n        for (word <- words) {\n        \
    \    if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzjd2kl5.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0radytc.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mword\e[0m => isPrime(word.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primeLengthWords = words.filter(word => isPrime(word.length))\n\
    \        primeLengthWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzekddaoz.scala:20:52 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeLengthWords\e[0m =\
    \ words.filter(\e[36mword\e[0m => isPrime(word.length))\n\e[31m\e[31m   |\e[0m\
    \                                                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                    Not found: isPrime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primeWords = words.filter(word => isPrime(word.length))\n\
    \        primeWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ahjxeg3.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeWords\e[0m = words.filter(\e\
    [36mword\e[0m => isPrime(word.length))\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = words.filter(word\
    \ => primes.contains(word.length))\n        result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bvb7w7l.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        sentence.split(\"\
    \ \").filter(x => isPrime(x.length)).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppr_fu95v.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sentence.split(\e[31m\" \"\e[0m).filter(\e[36mx\e\
    [0m => isPrime(x.length)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primeLengthWords = words.filter(w => isPrime(w.length))\n\
    \        primeLengthWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdewyeoy3.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeLengthWords\e[0m =\
    \ words.filter(\e[36mw\e[0m => isPrime(w.length))\n\e[31m\e[31m   |\e[0m     \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                              Not found: isPrime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps968wj3v.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     words.filter(w => primes.contains(w.length)).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk3za0ui.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     val result = new StringBuilder\n        for (word <- words) {\n        \
    \    if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg2gzutd.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeSet = primes.toSet\n        val result = new StringBuilder\n     \
    \   for (word <- words) {\n            if (primeSet.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(x => (2 to sqrt(x).toInt).forall(x\
    \ % _ != 0))\n        words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyvwhg3hl.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     words.filter(word => primes.contains(word.length)).mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpni47qvcr.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primeWords = words.filter(word => isPrime(word.length))\n\
    \        primeWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ahjxeg3.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeWords\e[0m = words.filter(\e\
    [36mword\e[0m => isPrime(word.length))\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime(_))\n\
    \        val result = new StringBuilder\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypbg60jc.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime(_))\n\e[31m\e[31m   |\e[0m             \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = new StringBuilder()\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2xthsf0z.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeWords = words.filter(w => primes.contains(w.length))\n        primeWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkusdg9oc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps968wj3v.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppj7b4yb3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = new StringBuilder\n        for (word <- words) {\n         \
    \   if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_jbuiry.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpptdznwci.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkusdg9oc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (i <- 0 until words.length) {\n\
    \            if (primes.contains(words(i).length)) {\n                result.append(words(i))\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = words.filter(word\
    \ => primes.contains(word.length))\n        result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bvb7w7l.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp197ni077.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     val result = new StringBuilder\n        for (word <- words) {\n        \
    \    if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg2gzutd.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = new StringBuilder\n        for (word <- words) {\n         \
    \   if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_jbuiry.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(i)) primes += i\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp197ni077.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     words.filter(w => primes.contains(w.length)).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk3za0ui.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyvwhg3hl.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkusdg9oc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val sb = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbmg8sx1.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(x => (2 to sqrt(x).toInt).forall(y\
    \ => x % y != 0))\n        words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = new ArrayBuffer[Int]\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkusdg9oc.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_1gvsgu.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmsbflry.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // Input: sentence = \"This\
    \ is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence\
    \ = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n\
    \    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n\
    \    def wordsInSentence(sentence : String) : String = {\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7_r3boi.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793839
