name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\"\
  ) # => 'No' (the name should start with a latin alphapet letter)\n    def fileNameCheck(file_name\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        if (file_name.count(_.isDigit) > 3) return \"No\"\n       \
    \ if (file_name.count(_ == '.') != 1) return \"No\"\n        val parts = file_name.split('.')\n\
    \        if (parts(0).isEmpty || !parts(0)(0).isLetter) return \"No\"\n      \
    \  if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1) != \"dll\") return\
    \ \"No\"\n        return \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val file_name_regex = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case file_name_regex(_*) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\"\
    .r\n        file_name match {\n            case pattern(name, ext) => {\n    \
    \            if (name.count(_.isDigit) > 3) \"No\"\n                else \"Yes\"\
    \n            }\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern(_*) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n   \
    \     if (file_name.count(_ == '.') != 1) return \"No\"\n        val parts = file_name.split('.')\n\
    \        if (parts(0).isEmpty || !parts(0)(0).isLetter) return \"No\"\n      \
    \  if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1) != \"dll\") return\
    \ \"No\"\n        return \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]\\w*)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern() => \"Yes\"\n       \
    \     case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        // Write your code here\n        return \"\"", "      \
    \  val pattern = \"[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}\".r\n        if (pattern.findFirstIn(file_name).isDefined)\
    \ \"Yes\" else \"No\"", "        if (file_name.count(_.isDigit) > 3) return \"\
    No\"\n        val parts = file_name.split(\"\\\\.\")\n        if (parts.length\
    \ != 2) return \"No\"\n        if (parts(0).length == 0 || !parts(0)(0).isLetter)\
    \ return \"No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    \"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        if (file_name.length == 0) return \"No\"\n        if (file_name.length\
    \ == 1) return \"No\"\n        if (file_name.length == 2) return \"No\"\n    \
    \    if (file_name.length == 3) return \"No\"\n        if (file_name.length ==\
    \ 4) return \"No\"\n        if (file_name.length == 5) return \"No\"\n       \
    \ if (file_name.length == 6) return \"No\"\n        if (file_name.length == 7)\
    \ return \"No\"\n        if (file_name.length == 8) return \"No\"\n        if\
    \ (file_name.length == 9) return \"No\"\n        if (file_name.length == 10) return\
    \ \"No\"\n        if (file_name.length == 11) return \"No\"\n        if (file_name.length\
    \ == 12) return \"No\"\n        if (file_name.length == 13) return \"No\"\n  \
    \      if (file_name.length == 14) return \"No\"\n        if (file_name.length\
    \ == 15) return \"No\"\n        if (file_name.length == 16) return \"No\"\n  \
    \      if (file_name.length == 17) return \"No\"\n        if (file_name.length\
    \ == 18) return \"No\"\n        if (file_name.length == 19) return \"No\"\n  \
    \      if (file_name.length == 20) return \"No\"\n        if (file_name.length\
    \ == 21) return \"No\"\n        if (file_name.length == 22) return \"No\"\n  \
    \      if (file_name.length == 23) return \"No\"\n        if (file_name.length\
    \ == 24) return \"No\"\n        if (file_name.length == 25) return \"No\"\n  \
    \      if (file_name.length == 26) return \"No\"\n        if (file_name.length\
    \ == 27) return \"No\"\n        if (file_name.length == 28) return \"No\"\n  \
    \      if (file_name.length == 29) return \"No\"\n        if (file_name.length\
    \ == 30) return \"No\"\n        if (file_name.length == 31) return \"No\"", " \
    \       val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n  \
    \      file_name match {\n            case pattern(_, _, _) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val dot_index = file_name.indexOf('.')\n        if (dot_index == 0)\
    \ return \"No\"\n        if (!file_name.substring(0, dot_index).head.isLetter)\
    \ return \"No\"\n        val extension = file_name.substring(dot_index + 1)\n\
    \        if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) return \"No\"\n        return \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        // Write your code here\n        return \"\"", "        val\
    \ pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\"\
    .r\n        file_name match {\n            case pattern(name, ext) => {\n    \
    \            if (name.count(c => c >= '0' && c <= '9') <= 3) \"Yes\" else \"No\"\
    \n            }\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        val pattern(prefix,\
    \ digits, suffix) = file_name\n        if (digits.length > 3) \"No\" else \"Yes\"",
  "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n    \
    \    file_name match {\n            case pattern(_*) => \"Yes\"\n            case\
    \ _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(c\
    \ => c >= '0' && c <= '9') > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index == -1) return \"No\"\n        if (dot_index == 0) return\
    \ \"No\"\n        if (file_name(dot_index - 1) < 'a' || file_name(dot_index -\
    \ 1) > 'z' && file_name(dot_index - 1) < 'A' || file_name(dot_index - 1) > 'Z')\
    \ return \"No\"\n        val extension = file_name.substring(dot_index + 1)\n\
    \        if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) return \"No\"\n        \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(name,\
    \ ext) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"^[a-zA-Z]\\\
    w*\\.(txt|exe|dll)$\"\"\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    .r\n        pattern.findFirstIn(file_name) match {\n            case Some(s) =>\
    \ \"Yes\"\n            case None => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(name, ext) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n    \
    \    if (file_name.count(_ == '.') != 1) return \"No\"\n        val file_name_split\
    \ = file_name.split('.')\n        if (file_name_split(0).isEmpty || !file_name_split(0)(0).isLetter)\
    \ return \"No\"\n        if (file_name_split(1) != \"txt\" && file_name_split(1)\
    \ != \"exe\" && file_name_split(1) != \"dll\") return \"No\"\n        return \"\
    Yes\"", "        val pattern = \"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\".r\n\
    \        file_name match {\n            case pattern() => \"Yes\"\n          \
    \  case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n       \
    \ if (dot_index == -1) return \"No\"\n        val prefix = file_name.substring(0,\
    \ dot_index)\n        if (prefix.isEmpty || !prefix(0).isLetter) return \"No\"\
    \n        val suffix = file_name.substring(dot_index + 1)\n        if (suffix\
    \ != \"txt\" && suffix != \"exe\" && suffix != \"dll\") return \"No\"\n      \
    \  \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\
    \\.[a-zA-Z]+)\".r\n        file_name match {\n            case pattern(prefix,\
    \ number, suffix) => {\n                if (suffix == \".txt\" || suffix == \"\
    .exe\" || suffix == \".dll\") \"Yes\"\n                else \"No\"\n         \
    \   }\n            case _ => \"No\"\n        }", "        val pattern = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\"\
    .r\n        file_name match {\n            case pattern(name, num, ext) => {\n\
    \                if (ext == \".txt\" || ext == \".exe\" || ext == \".dll\") \"\
    Yes\"\n                else \"No\"\n            }\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val parts = file_name.split('.')\n        if (parts(0).isEmpty || !parts(0)(0).isLetter)\
    \ return \"No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    \"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n      \
    \      case pattern(name, extension) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match {\n\
    \            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n     \
    \   }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\
    \".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern() =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern = \"\
    \"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val file_name_pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case file_name_pattern(_, _, _)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\".r\n        file_name match {\n \
    \           case pattern(prefix, num, suffix) => {\n                if (suffix\
    \ == \".txt\" || suffix == \".exe\" || suffix == \".dll\") \"Yes\"\n         \
    \       else \"No\"\n            }\n            case _ => \"No\"\n        }",
  "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(name, ext) => \"Yes\"\n            case _\
    \ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val parts = file_name.split('.')\n        if (parts(0).length == 0 ||\
    \ !parts(0)(0).isLetter) return \"No\"\n        if (parts(1) != \"txt\" && parts(1)\
    \ != \"exe\" && parts(1) != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n   \
    \     file_name match {\n            case pattern() => \"Yes\"\n            case\
    \ _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n   \
    \         case pattern(name, ext) => {\n                if (name.matches(\"\"\"\
    [a-zA-Z]*\"\"\")) {\n                    \"Yes\"\n                } else {\n \
    \                   \"No\"\n                }\n            }\n            case\
    \ _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(c\
    \ => c >= '0' && c <= '9') > 3) return \"No\"\n        if (file_name.count(c =>\
    \ c == '.') != 1) return \"No\"\n        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index == 0) return \"No\"\n        if (file_name(dot_index -\
    \ 1) < 'a' || file_name(dot_index - 1) > 'z' && file_name(dot_index - 1) < 'A'\
    \ || file_name(dot_index - 1) > 'Z') return \"No\"\n        if (file_name.substring(dot_index\
    \ + 1) != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        \"Yes\"", "        // Write your code\
    \ here\n        \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(name, ext) => {\n\
    \                if (name.count(_.isDigit) > 3) \"No\"\n                else \"\
    Yes\"\n            }\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        // Write your code here\n        \"No\"", "        if (file_name.count(c\
    \ => c.isDigit) > 3) return \"No\"\n        if (file_name.count(c => c == '.')\
    \ != 1) return \"No\"\n        val parts = file_name.split('.')\n        if (parts(0).isEmpty\
    \ || !parts(0)(0).isLetter) return \"No\"\n        if (parts(1) != \"txt\" &&\
    \ parts(1) != \"exe\" && parts(1) != \"dll\") return \"No\"\n        return \"\
    Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\
    \".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        // Write your code here\n\
    \        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n\
    \        file_name match {\n            case pattern(_, _, _) => \"Yes\"\n   \
    \         case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match {\n\
    \            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n     \
    \   }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n\
    \        file_name match {\n            case pattern(name, extension) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val parts = file_name.split('.')\n        if (parts(0).isEmpty || !parts(0)(0).isLetter)\
    \ return \"No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    [a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\".r\n        if (pattern.findFirstIn(file_name).isDefined)\
    \ \"Yes\" else \"No\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        \"No\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name).isDefined) \"\
    Yes\" else \"No\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\
    \n        if (file_name.count(_ == '.') != 1) return \"No\"\n        val name\
    \ = file_name.split('.')\n        if (name(0).isEmpty || !name(0)(0).isLetter)\
    \ return \"No\"\n        if (name(1) != \"txt\" && name(1) != \"exe\" && name(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt|exe|dll$\".r\n        val result = pattern.findFirstIn(file_name)\n\
    \        if (result == None) \"No\" else \"Yes\"", "        val pattern = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        // Write your code here\n        return \"No\"", "     \
    \   val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n    \
    \    file_name match {\n            case pattern(_, _, _) => \"Yes\"\n       \
    \     case _ => \"No\"\n        }", "        // Write your code here\n       \
    \ return \"\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n \
    \       if (file_name.count(_ == '.') != 1) return \"No\"\n        val file_name_split\
    \ = file_name.split('.')\n        if (file_name_split(0).isEmpty || !file_name_split(0)(0).isLetter)\
    \ return \"No\"\n        if (file_name_split(1) != \"txt\" && file_name_split(1)\
    \ != \"exe\" && file_name_split(1) != \"dll\") return \"No\"\n        return \"\
    Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case regex(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val name = file_name.split(\"\
    \\\\.\")\n        if (name.length != 2) return \"No\"\n        val name1 = name(0)\n\
    \        val name2 = name(1)\n        if (name1.length == 0) return \"No\"\n \
    \       if (name1.count(_.isDigit) > 3) return \"No\"\n        if (!name1(0).isLetter)\
    \ return \"No\"\n        if (name2 != \"txt\" && name2 != \"exe\" && name2 !=\
    \ \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\"\
    \"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        if (file_name.count(c =>\
    \ c >= '0' && c <= '9') > 3) return \"No\"\n        if (file_name.count(c => c\
    \ == '.') != 1) return \"No\"\n        val parts = file_name.split('.')\n    \
    \    if (parts(0).length == 0 || !(parts(0)(0) >= 'a' && parts(0)(0) <= 'z' ||\
    \ parts(0)(0) >= 'A' && parts(0)(0) <= 'Z')) return \"No\"\n        if (parts(1)\
    \ != \"txt\" && parts(1) != \"exe\" && parts(1) != \"dll\") return \"No\"\n  \
    \      \"Yes\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n\
    \        if (file_name.count(_ == '.') != 1) return \"No\"\n        val parts\
    \ = file_name.split('.')\n        if (parts(0).isEmpty || !parts(0)(0).isLetter)\
    \ return \"No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    \"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dotIndex = file_name.indexOf('.')\n        if\
    \ (dotIndex == -1) return \"No\"\n        val prefix = file_name.substring(0,\
    \ dotIndex)\n        if (prefix.isEmpty || !prefix(0).isLetter) return \"No\"\n\
    \        val suffix = file_name.substring(dotIndex + 1)\n        if (suffix !=\
    \ \"txt\" && suffix != \"exe\" && suffix != \"dll\") return \"No\"\n        return\
    \ \"Yes\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        pattern.findFirstIn(file_name) match {\n            case Some(s) =>\
    \ \"Yes\"\n            case None => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        if (file_name.count(c => c >= '0' && c <= '9') > 3) return\
    \ \"No\"\n        val dot_index = file_name.indexOf('.')\n        if (dot_index\
    \ == -1) return \"No\"\n        if (dot_index == 0) return \"No\"\n        if\
    \ (file_name(dot_index - 1) < 'a' || file_name(dot_index - 1) > 'z' && file_name(dot_index\
    \ - 1) < 'A' || file_name(dot_index - 1) > 'Z') return \"No\"\n        if (file_name.substring(dot_index\
    \ + 1) != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n     \
    \   if (file_name.count(_ == '.') != 1) return \"No\"\n        val parts = file_name.split('.')\n\
    \        if (parts(0).isEmpty || !parts(0)(0).isLetter) return \"No\"\n      \
    \  if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1) != \"dll\") return\
    \ \"No\"\n        return \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(c\
    \ => c >= '0' && c <= '9') > 3) return \"No\"\n        if (file_name.count(c =>\
    \ c == '.') != 1) return \"No\"\n        val parts = file_name.split('.')\n  \
    \      if (parts(0).length == 0 || !(parts(0)(0) >= 'a' && parts(0)(0) <= 'z'\
    \ || parts(0)(0) >= 'A' && parts(0)(0) <= 'Z')) return \"No\"\n        if (parts(1)\
    \ != \"txt\" && parts(1) != \"exe\" && parts(1) != \"dll\") return \"No\"\n  \
    \      \"Yes\"", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern(_*) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val (before_dot, after_dot) = file_name.splitAt(file_name.indexOf('.'))\n\
    \        if (before_dot.isEmpty || !before_dot.head.isLetter) return \"No\"\n\
    \        if (after_dot != \".txt\" && after_dot != \".exe\" && after_dot != \"\
    .dll\") return \"No\"\n        return \"Yes\"", "        // Write your code here\n\
    \        \"No\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(a,\
    \ b) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]{0,})\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(_, _) => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]*)\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(name, ext) => {\n                if (name.length()\
    \ > 3) \"No\"\n                else \"Yes\"\n            }\n            case _\
    \ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(name, ext) =>\n                if (name.count(_.isDigit)\
    \ > 3) \"No\"\n                else \"Yes\"\n            case _ => \"No\"\n  \
    \      }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n\
    \        file_name match {\n            case pattern(name, ext) => \"Yes\"\n \
    \           case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\"\
    .r\n        file_name match {\n            case pattern(name, ext) => {\n    \
    \            if (name.matches(\"\"\"\\d+\"\"\")) \"No\"\n                else\
    \ if (name.matches(\"\"\"\\d{4,}\"\"\")) \"No\"\n                else \"Yes\"\n\
    \            }\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n       \
    \ if (dot_index == -1) return \"No\"\n        val before_dot = file_name.substring(0,\
    \ dot_index)\n        if (before_dot.isEmpty || !before_dot(0).isLetter) return\
    \ \"No\"\n        val after_dot = file_name.substring(dot_index + 1)\n       \
    \ if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return\
    \ \"No\"\n        \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name).isDefined) \"\
    Yes\" else \"No\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\
    \n        val dot_index = file_name.indexOf('.')\n        if (dot_index == -1)\
    \ return \"No\"\n        val prefix = file_name.substring(0, dot_index)\n    \
    \    if (prefix.isEmpty || !prefix(0).isLetter) return \"No\"\n        val suffix\
    \ = file_name.substring(dot_index + 1)\n        if (suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n   \
    \     file_name match {\n            case pattern(_*) => \"Yes\"\n           \
    \ case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"^[a-zA-Z]+[0-9]{0,3}\\.[a-zA-Z]{3}$\"\"\".r\n        if (pattern.findFirstIn(file_name).isDefined)\
    \ \"Yes\" else \"No\"", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(name, ext) => {\n\
    \                if (name.count(c => c >= '0' && c <= '9') <= 3) \"Yes\" else\
    \ \"No\"\n            }\n            case _ => \"No\"\n        }", "        val\
    \ pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match\
    \ {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        val pattern = \"([a-zA-Z]{1}[a-zA-Z0-9]{0,})(\\\\.txt|\\\\\
    .exe|\\\\.dll)\".r\n        file_name match {\n            case pattern(name,\
    \ ext) => {\n                if (name.length - name.replaceAll(\"[0-9]\", \"\"\
    ).length > 3) \"No\"\n                else \"Yes\"\n            }\n          \
    \  case _ => \"No\"\n        }", "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case regex(_, _,\
    \ _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match {\n\
    \            case pattern() => \"Yes\"\n            case _ => \"No\"\n       \
    \ }", "        val pattern = \"\"\"([a-zA-Z]\\w*)(\\d{0,3})\\.(txt|exe|dll)\"\"\
    \".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n           \
    \ case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n        }",
  "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n \
    \       file_name match {\n            case pattern(_, _, _) => \"Yes\"\n    \
    \        case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n           \
    \ case pattern(x, y, z) => \"Yes\"\n            case _ => \"No\"\n        }",
  "        val pattern = \"^[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)$\".r\n        pattern.findFirstIn(file_name)\
    \ match {\n            case Some(x) => \"Yes\"\n            case None => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val regex = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case regex(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val reg = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case reg(_, _, _) => \"Yes\"\n            case _ => \"No\"\n    \
    \    }", "        val pattern = \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]*)\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern() =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern = \"\
    \"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        if (file_name.count(c => c >= '0' && c <= '9') > 3) return\
    \ \"No\"\n        if (file_name.count(c => c == '.') != 1) return \"No\"\n   \
    \     val dot_index = file_name.indexOf('.')\n        if (dot_index == 0) return\
    \ \"No\"\n        if (file_name(dot_index - 1) < 'a' || file_name(dot_index -\
    \ 1) > 'z' && file_name(dot_index - 1) < 'A' || file_name(dot_index - 1) > 'Z')\
    \ return \"No\"\n        if (file_name.substring(dot_index + 1) != \"txt\" &&\
    \ file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        \"Yes\""]
stop_tokens:
- "\n    }\n"
