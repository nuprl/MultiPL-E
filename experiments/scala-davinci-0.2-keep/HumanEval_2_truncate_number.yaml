name: HumanEval_2_truncate_number
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive floating point number, it can be decomposed into\n    //\
  \ and integer part (largest integer smaller than given number) and decimals\n  \
  \  // (leftover part always smaller than 1).\n    // Return the decimal part of\
  \ the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    def truncateNumber(number\
  \ : Float) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f))\
  \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
  \ == (0.0f));\n    }\n\n}\n"
completions: ['        return number - number.toInt', '        return number - floor(number)',
  '        return number - number.toInt', "        val intPart = number.toInt\n  \
    \      number - intPart", "        val integerPart = floor(number).toInt\n   \
    \     number - integerPart", '        return number - number.toInt', "       \
    \ val intPart = number.toInt\n        number - intPart", '        return number
    - floor(number)', "        val integerPart = floor(number).toInt\n        number\
    \ - integerPart", '        return number - floor(number)', '        return number
    - floor(number)', '        return number - floor(number)', '        return number
    - number.toInt', '        return number - floor(number)', '        return number
    - number.toInt', '        return number - number.toInt', '        return number
    - number.toInt', '        return number - floor(number)', "        val intPart\
    \ = floor(number).toInt\n        number - intPart", "        val intPart = number.toInt\n\
    \        number - intPart"]
stop_tokens:
- "\n    }\n"
