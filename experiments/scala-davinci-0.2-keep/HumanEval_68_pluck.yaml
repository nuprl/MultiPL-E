name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output: [2, 1]\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index. \n    // Example\
  \ 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input: [5,\
  \ 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n    // so we will choose the first zero, which has\
  \ the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n\
  \    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        else return List(min, minIndex)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        val evens =\
    \ arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        var min = Long.MaxValue\n \
    \       var minIndex = -1\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n   \
    \             minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n  \
    \      val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) return\
    \ List()\n        return List(min, index)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else\
    \ {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else\
    \ {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        else return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        return List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        if (arr.isEmpty) return List[Long]()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List[Long]()\n        return List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val minIndex = arr.indexOf(min)\n       \
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) return List()\n        return List(min, index)", "  \
    \      var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        if (arr.length == 0) return List[Long]()\n    \
    \    var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) return List[Long]()\n        return List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ return List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        index = i\n            }\n        }\n        if (index == -1) return\
    \ List()\n        return List(min, index)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n  \
    \      if (evens.isEmpty) return List()\n        val min = evens.min\n       \
    \ val index = arr.indexOf(min)\n        List(min, index)", "        var min =\
    \ Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n  \
    \      val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.length == 0) return List()\n        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val min = evens.min\n  \
    \          val index = arr.indexOf(min)\n            List(min, index)\n      \
    \  }", "        var min = Long.MaxValue\n        var minIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                minIndex = i\n            }\n\
    \        }\n        if (minIndex == -1) List() else List(min, minIndex)", "  \
    \      var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.length == 0) return List()\n        var min = Long.MaxValue\n \
    \       var minIndex = -1\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n   \
    \             minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ return List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else\
    \ {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) return\
    \ List()\n        return List(min, index)", "        if (arr.isEmpty) return List()\n\
    \        var minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven)\
    \ {\n                minEven = arr(i)\n                minEvenIndex = i\n    \
    \        }\n        }\n        if (minEvenIndex == -1) return List()\n       \
    \ return List(minEven, minEvenIndex)", "        var min = Long.MaxValue\n    \
    \    var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        if (arr.isEmpty) return\
    \ List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var minEven = Long.MaxValue\n\
    \        var minEvenIndex = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven =\
    \ arr(i)\n                minEvenIndex = i\n            }\n        }\n       \
    \ if (minEvenIndex == -1) return List()\n        return List(minEven, minEvenIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n  \
    \      if (evens.isEmpty) return List()\n        val min = evens.min\n       \
    \ val index = arr.indexOf(min)\n        List(min, index)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val minIndex = arr.indexOf(min)\n        List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        return List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val minEven =\
    \ evens.min\n            val index = arr.indexOf(minEven)\n            List(minEven,\
    \ index)\n        }", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        return List(min, index)", "        if (arr.isEmpty) return List()\n \
    \       val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n    \
    \    if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = Long.MaxValue\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ List() else List(min, minIndex)", "        var min = Long.MaxValue\n       \
    \ var index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val min = evens.min\n  \
    \          val index = arr.indexOf(min)\n            List(min, index)\n      \
    \  }", "        var min = Long.MaxValue\n        var minIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                minIndex = i\n            }\n\
    \        }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val minEven = evens.min\n        val index = arr.indexOf(minEven)\n\
    \        List(minEven, index)", "        if (arr.isEmpty) return List()\n    \
    \    var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        if (arr.length == 0) return List()\n        var min = Long.MaxValue\n \
    \       var minIndex = -1\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n   \
    \             minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var minEven\
    \ = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven\
    \ = arr(i)\n                minEvenIndex = i\n            }\n        }\n     \
    \   if (minEvenIndex == -1) List() else List(minEven, minEvenIndex)", "      \
    \  var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (min\
    \ == Long.MaxValue) return List()\n        return List(min, minIndex)", "    \
    \    if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n       \
    \ var index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) return List()\n    \
    \    return List(min, index)", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) return List()\n      \
    \  return List(min, index)", "        if (arr.isEmpty) return List()\n       \
    \ var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) return List()\n        List(min, minIndex)", "  \
    \      var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val minIndex = arr.indexOf(min)\n\
    \        List(min, minIndex)", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) return List()\n      \
    \  return List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List[Long]()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List[Long]()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        val evens =\
    \ arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val\
    \ min = evens.min\n        val index = arr.indexOf(min)\n        List(min, index)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        else return List(min, index)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        if (arr.isEmpty) return\
    \ List()\n        var min = Long.MaxValue\n        var minIndex = -1\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) <\
    \ min) {\n                min = arr(i)\n                minIndex = i\n       \
    \     }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        return List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        // 1. Find the smallest even value in the array\n     \
    \   // 2. Find the index of the smallest even value\n        // 3. Return the\
    \ smallest even value and its index\n        // 4. If there are no even values,\
    \ return []\n        // 5. If the array is empty, return []\n        // 6. If\
    \ there are multiple nodes with the same smallest even value, return the node\
    \ that has smallest index\n        // 7. If there are no even values, return []\n\
    \        // 8. If the array is empty, return []\n        // 9. If there are multiple\
    \ nodes with the same smallest even value, return the node that has smallest index\n\
    \        // 10. If there are no even values, return []\n        // 11. If the\
    \ array is empty, return []\n        // 12. If there are multiple nodes with the\
    \ same smallest even value, return the node that has smallest index\n        //\
    \ 13. If there are no even values, return []\n        // 14. If the array is empty,\
    \ return []\n        // 15. If there are multiple nodes with the same smallest\
    \ even value, return the node that has smallest index\n        // 16. If there\
    \ are no even values, return []\n        // 17. If the array is empty, return\
    \ []\n        // 18. If there are multiple nodes with the same smallest even value,\
    \ return the node that has smallest index\n        // 19. If there are no even\
    \ values, return []\n        // 20. If the array is empty, return []\n       \
    \ // 21. If there are multiple nodes with the same smallest even value, return\
    \ the node that has smallest index\n        // 22. If there are no even values,\
    \ return []\n        // 23. If the array is empty, return []\n        // 24. If\
    \ there are multiple nodes with the same smallest even value, return the node\
    \ that has smallest index\n        // 25. If there are no even values, return\
    \ []\n        // 26. If the array is empty, return []\n        // 27. If there\
    \ are multiple nodes with the same smallest even value, return the node that has\
    \ smallest index\n        // 28. If there are no even values, return []\n    \
    \    // 29. If the array is empty, return []\n        // 30. If there are multiple\
    \ nodes with the same smallest even value, return the node that has smallest index\n\
    \        // 31. If there are no even values, return []", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var minEven\
    \ = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven\
    \ = arr(i)\n                minEvenIndex = i\n            }\n        }\n     \
    \   if (minEvenIndex == -1) return List()\n        return List(minEven, minEvenIndex)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var index =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                index = i\n\
    \            }\n        }\n        if (index == -1) List() else List(min, index)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val minEven = evens.min\n\
    \        val index = arr.indexOf(minEven)\n        List(minEven, index)", "  \
    \      val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n  \
    \      if (evens.isEmpty) return List()\n        val min = evens.min\n       \
    \ val index = arr.indexOf(min)\n        List(min, index)", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n  \
    \      val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = arr.min\n\
    \        if (min % 2 == 1) {\n            min = arr.filter(x => x % 2 == 0).min\n\
    \            if (min % 2 == 1) return List()\n        }\n        List(min, arr.indexOf(min).toLong)",
  "        if (arr.isEmpty) return List()\n        val min = arr.filter(_ % 2 == 0).min\n\
    \        val index = arr.indexOf(min)\n        return List(min, index)"]
stop_tokens:
- "\n    }\n"
