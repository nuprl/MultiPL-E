language: scala
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  if (diffs.forall(x => x == 0)) return true\n        if (diffs.forall(x => x\
    \ > 0)) return true\n        if (diffs.forall(x => x < 0)) return true\n     \
    \   return false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8v_8bmcl.scala:24)\n\tat Problem.main(tmp8v_8bmcl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var i = 0\n        var increasing = true\n        var decreasing\
    \ = true\n        while (i < l.length - 1) {\n            if (l(i) > l(i + 1))\
    \ increasing = false\n            if (l(i) < l(i + 1)) decreasing = false\n  \
    \          i += 1\n        }\n        increasing || decreasing\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val diff = l.zip(l.tail).map(x\
    \ => x._2 - x._1)\n        if (diff.forall(x => x == 0)) true\n        else if\
    \ (diff.forall(x => x > 0)) true\n        else if (diff.forall(x => x < 0)) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbeemlkyi.scala:23)\n\tat Problem.main(tmpbeemlkyi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.length) {\n \
    \           if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var isIncreasing = true\n        var isDecreasing = true\n   \
    \     for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) isIncreasing\
    \ = false\n            if (l(i) > l(i - 1)) isDecreasing = false\n        }\n\
    \        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var i = 0\n        var increasing = true\n        var decreasing\
    \ = true\n        while (i < l.length - 1) {\n            if (l(i) > l(i + 1))\
    \ increasing = false\n            if (l(i) < l(i + 1)) decreasing = false\n  \
    \          i += 1\n        }\n        increasing || decreasing\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) < l(i - 1)) inc = false\n            if (l(i)\
    \ > l(i - 1)) dec = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.size - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 0 until l.length - 1) {\n  \
    \          if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i\
    \ + 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val first = l.head\n        val second = l.tail.head\n       \
    \ val diff = second - first\n        val rest = l.tail.tail\n        if (rest.isEmpty)\
    \ return true\n        if (diff == 0) return false\n        val increasing = diff\
    \ > 0\n        val decreasing = diff < 0\n        val restMonotonic = monotonic(rest)\n\
    \        if (restMonotonic) {\n            val restFirst = rest.head\n       \
    \     val restSecond = rest.tail.head\n            val restDiff = restSecond -\
    \ restFirst\n            if (increasing) return restDiff >= 0\n            if\
    \ (decreasing) return restDiff <= 0\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybv256tq.scala:34)\n\tat Problem.main(tmpybv256tq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        return increasing || decreasing\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        return increasing || decreasing\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val s = l.sliding(2).toList\n        val d = s.map(x => x(1) -\
    \ x(0))\n        val ds = d.distinct\n        if (ds.length == 1) return true\n\
    \        else if (ds.length == 2) {\n            if (ds.contains(0)) return true\n\
    \            else if (ds.contains(1) && ds.contains(-1)) return true\n       \
    \     else return false\n        }\n        else return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfizcj4k.scala:25)\n\tat Problem.main(tmppfizcj4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = false\n        var decreasing = false\n     \
    \   for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) increasing\
    \ = true\n            if (l(i) < l(i - 1)) decreasing = true\n        }\n    \
    \    return increasing && decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7xadpuz.scala:22)\n\tat Problem.main(tmpv7xadpuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        inc || dec\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.size - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 2 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val s = l.sliding(2).map(x => x(1) - x(0)).toList\n        if\
    \ (s.forall(x => x > 0)) return true\n        if (s.forall(x => x < 0)) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpainf9zwu.scala:23)\n\tat Problem.main(tmpainf9zwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val s = l.sliding(2).map(x => x(1) - x(0)).toList\n        if\
    \ (s.forall(x => x >= 0)) return true\n        if (s.forall(x => x <= 0)) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.size) {\n   \
    \         if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        return increasing || decreasing\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var s = l(0)\n        var d = 0\n        for (i <- 1 until l.length)\
    \ {\n            if (d == 0) {\n                if (l(i) > s) d = 1\n        \
    \        else if (l(i) < s) d = -1\n            }\n            else if (d == 1)\
    \ {\n                if (l(i) < s) return false\n            }\n            else\
    \ if (d == -1) {\n                if (l(i) > s) return false\n            }\n\
    \            s = l(i)\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = false\n        var decreasing = false\n     \
    \   for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) increasing\
    \ = true\n            if (l(i) < l(i - 1)) decreasing = true\n        }\n    \
    \    increasing && decreasing == false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaloegjgu.scala:25)\n\tat Problem.main(tmpaloegjgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        if (l.head < l.tail.head) {\n            for (i <- 1 until l.length\
    \ - 1) {\n                if (l(i) > l(i + 1)) return false\n            }\n \
    \       } else {\n            for (i <- 1 until l.length - 1) {\n            \
    \    if (l(i) < l(i + 1)) return false\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  if (diffs.forall(x => x > 0)) return true\n        if (diffs.forall(x => x\
    \ < 0)) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3_a6w8gz.scala:23)\n\tat Problem.main(tmp3_a6w8gz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var s = l(0)\n        var d = 0\n        for (i <- 1 until l.size)\
    \ {\n            if (l(i) > s) {\n                if (d == -1) return false\n\
    \                d = 1\n            } else if (l(i) < s) {\n                if\
    \ (d == 1) return false\n                d = -1\n            }\n            s\
    \ = l(i)\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) true\n\
    \        else {\n            val diff = l(1) - l(0)\n            if (diff == 0)\
    \ monotonic(l.tail)\n            else {\n                val sign = diff / abs(diff)\n\
    \                l.tail.forall(x => (x - l.head) * sign >= 0)\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpueg0d4f9.scala:25)\n\tat Problem.main(tmpueg0d4f9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val inc = l(0) < l(1)\n        for (i <- 1 until l.size - 1) {\n\
    \            if (inc && l(i) > l(i + 1)) return false\n            if (!inc &&\
    \ l(i) < l(i + 1)) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var i = 0\n        var increasing = true\n        var decreasing\
    \ = true\n        while (i < l.size - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n            i\
    \ += 1\n        }\n        return increasing || decreasing\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  val first = diffs(0)\n        if (diffs.forall(x => x == first)) return true\n\
    \        val second = diffs(1)\n        if (diffs.forall(x => x == second)) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm3uizcju.scala:21)\n\tat Problem.main(tmpm3uizcju.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        if (l.length == 2) return true\n        var i = 0\n        while\
    \ (i < l.length - 1) {\n            if (l(i) == l(i + 1)) i += 1\n           \
    \ else if (l(i) < l(i + 1)) {\n                while (i < l.length - 1 && l(i)\
    \ <= l(i + 1)) i += 1\n                if (i == l.length - 1) return true\n  \
    \              else return false\n            }\n            else {\n        \
    \        while (i < l.length - 1 && l(i) >= l(i + 1)) i += 1\n               \
    \ if (i == l.length - 1) return true\n                else return false\n    \
    \        }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 0 until l.length - 1) {\n  \
    \          if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i\
    \ + 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 0) return\
    \ true\n        var prev = l(0)\n        var increasing = true\n        for (i\
    \ <- 1 until l.size) {\n            if (l(i) < prev) increasing = false\n    \
    \        else if (l(i) > prev && !increasing) return false\n            prev =\
    \ l(i)\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  val first = diffs(0)\n        diffs.forall(x => x == first)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvegk1kk8.scala:18)\n\tat Problem.main(tmpvegk1kk8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var isIncreasing = true\n        var isDecreasing = true\n   \
    \     for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) isDecreasing\
    \ = false\n            if (l(i) < l(i - 1)) isIncreasing = false\n        }\n\
    \        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 1) return true\n        var i = 1\n        var inc = true\n  \
    \      var dec = true\n        while (i < n) {\n            if (l(i) < l(i - 1))\
    \ inc = false\n            if (l(i) > l(i - 1)) dec = false\n            i +=\
    \ 1\n        }\n        return inc || dec\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        if (l.length == 2) return true\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 0 until l.length - 1) {\n  \
    \          if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i\
    \ + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = l(0) <= l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  val diffs2 = diffs.sliding(2).map(x => x(1) * x(0)).toList\n        if (diffs2.exists(x\
    \ => x > 0)) return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaetuf3y6.scala:19)\n\tat Problem.main(tmpaetuf3y6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.size) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var isIncreasing = true\n        var isDecreasing = true\n   \
    \     for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) isDecreasing\
    \ = false\n            if (l(i) < l(i - 1)) isIncreasing = false\n        }\n\
    \        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var prev = l(0)\n        var inc = true\n        var dec = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > prev) dec = false\n\
    \            if (l(i) < prev) inc = false\n            prev = l(i)\n        }\n\
    \        return inc || dec\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > l(i - 1)) dec = false\n            if (l(i)\
    \ < l(i - 1)) inc = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 1) return true\n        var i = 1\n        var increasing = true\n\
    \        var decreasing = true\n        while (i < n) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            i += 1\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val d = l(1) - l(0)\n        for (i <- 1 until l.size) {\n   \
    \         if (d * (l(i) - l(i - 1)) < 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1))\
    \ increasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing && l(i) > l(i + 1)) return false\n      \
    \      if (!increasing && l(i) < l(i + 1)) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing && l(i) > l(i + 1)) return false\n      \
    \      if (!increasing && l(i) < l(i + 1)) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val d = l(1) - l(0)\n        var i = 1\n        while (i < l.length)\
    \ {\n            if (d * (l(i) - l(i - 1)) < 0) return false\n            i +=\
    \ 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = l(0) <= l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val n = l.length\n  \
    \      if (n == 1) return true\n        var i = 1\n        var inc = true\n  \
    \      var dec = true\n        while (i < n) {\n            if (l(i) > l(i - 1))\
    \ dec = false\n            if (l(i) < l(i - 1)) inc = false\n            if (!inc\
    \ && !dec) return false\n            i += 1\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  if (diffs.forall(x => x > 0)) return true\n        if (diffs.forall(x => x\
    \ < 0)) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyxaumhw.scala:23)\n\tat Problem.main(tmptyxaumhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var direction = 0\n        for (i <- 1 until l.length) {\n   \
    \         if (l(i) > l(i - 1)) {\n                if (direction == -1) return\
    \ false\n                direction = 1\n            } else if (l(i) < l(i - 1))\
    \ {\n                if (direction == 1) return false\n                direction\
    \ = -1\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        if (diff == 0) return false\n\
    \        var i = 2\n        while (i < l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n            i += 1\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpip3sifbr.scala:30)\n\tat Problem.main(tmpip3sifbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n      \
    \  val diff = diffs(0)\n        diffs.forall(x => x == diff)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcogfmrjx.scala:18)\n\tat Problem.main(tmpcogfmrjx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var i = 0\n        var inc = true\n        var dec = true\n  \
    \      while (i < l.length - 1) {\n            if (l(i) > l(i + 1)) inc = false\n\
    \            if (l(i) < l(i + 1)) dec = false\n            i += 1\n        }\n\
    \        return inc || dec\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 0 until l.length - 1) {\n  \
    \          if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i\
    \ + 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var inc = true\n        var dec = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) < l(i - 1)) inc = false\n            if (l(i)\
    \ > l(i - 1)) dec = false\n        }\n        return inc || dec\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val diff = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (diff * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        if (l.length == 2) return l(0) == l(1)\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.size - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.size) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing && l(i) > l(i + 1)) return false\n      \
    \      if (!increasing && l(i) < l(i + 1)) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var i = 0\n        var increasing = true\n        while (i < l.length\
    \ - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            i +=\
    \ 1\n        }\n        if (increasing) return true\n        i = 0\n        var\
    \ decreasing = true\n        while (i < l.length - 1) {\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n            i += 1\n        }\n        return\
    \ decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        val sign = l(1) - l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (sign * (l(i) - l(i - 1)) < 0) return false\n        }\n     \
    \   return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) true\n\
    \        else {\n            val diff = l.zip(l.tail).map(x => x._2 - x._1)\n\
    \            diff.forall(x => x == 0) || diff.forall(x => x > 0) || diff.forall(x\
    \ => x < 0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4oc126bb.scala:23)\n\tat Problem.main(tmp4oc126bb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        if (l(0) < l(1)) {\n            for (i <- 1 until l.length - 1)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            }\n      \
    \  } else {\n            for (i <- 1 until l.length - 1) {\n                if\
    \ (l(i) < l(i + 1)) return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        increasing || decreasing\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var isIncreasing = l(0) < l(1)\n        for (i <- 1 until l.size\
    \ - 1) {\n            if (isIncreasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing =\
    \ false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) true\n\
    \        else {\n            val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n\
    \            val first = diffs(0)\n            diffs.forall(x => x == first)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnlzbgyq_.scala:20)\n\tat Problem.main(tmpnlzbgyq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size == 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 0 until l.size - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var increasing = l(0) <= l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (increasing && l(i) > l(i + 1)) return false\n      \
    \      if (!increasing && l(i) < l(i + 1)) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        var increasing = true\n\
    \        var decreasing = true\n        for (i <- 1 until l.length) {\n      \
    \      if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1))\
    \ decreasing = false\n        }\n        return increasing || decreasing\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length == 1) return\
    \ true\n        var isIncreasing = l(0) < l(1)\n        for (i <- 1 until l.length\
    \ - 1) {\n            if (isIncreasing) {\n                if (l(i) > l(i + 1))\
    \ return false\n            } else {\n                if (l(i) < l(i + 1)) return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        val s = l.sorted\n  \
    \      val r = l.sorted.reverse\n        return (l == s || l == r)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing =\
    \ false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n    \
    \    return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.size <= 1) return\
    \ true\n        var increasing = true\n        var decreasing = true\n       \
    \ for (i <- 1 until l.size) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n        }\n        return\
    \ increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20,\
    \ 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n \
    \   def monotonic(l : List[Long]) : Boolean = {\n        if (l.length <= 1) return\
    \ true\n        var isIncreasing = true\n        var isDecreasing = true\n   \
    \     for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) isIncreasing\
    \ = false\n            if (l(i) > l(i - 1)) isDecreasing = false\n        }\n\
    \        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799570
