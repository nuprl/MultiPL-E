name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns True if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and False\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    // check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n\
  \    // check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n    // check_if_last_char_is_a_letter(\"\
  apple pi e \") \u279E False\n    // check_if_last_char_is_a_letter(\"\") \u279E\
  \ False\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ["        if (txt.length == 0) return false\n        if (txt.last.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            if (txt(txt.length\
    \ - 2) == ' ') return true\n        }\n        return false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.length - 1\n            if (lastCharIndex\
    \ == 0) return true\n            val previousChar = txt(lastCharIndex - 1)\n \
    \           if (previousChar == ' ') return true\n        }\n        return false",
  "        if (txt.length == 0) return false\n        val lastChar = txt.last\n  \
    \      if (lastChar.isLetter) {\n            val lastCharIndex = txt.length -\
    \ 1\n            val lastCharIsNotPartOfWord = txt.lastIndexOf(\" \", lastCharIndex)\
    \ == lastCharIndex - 1\n            lastCharIsNotPartOfWord\n        } else {\n\
    \            false\n        }", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n            if\
    \ (lastCharIndex == txt.length - 1) {\n                return true\n         \
    \   }\n            if (lastCharIndex < txt.length - 1) {\n                if (txt(lastCharIndex\
    \ + 1) == ' ') {\n                    return true\n                }\n       \
    \     }\n        }\n        return false", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfWord",
  "        if (txt.length == 0) return false\n        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            if (txt.length == 1) return\
    \ true\n            val secondLastChar = txt.charAt(txt.length - 2)\n        \
    \    if (secondLastChar.isLetter) return false\n            else return true\n\
    \        }\n        else return false", "        if (txt.length == 0) return false\n\
    \        val lastChar = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n            if\
    \ (lastCharIndex == txt.length - 1) {\n                return true\n         \
    \   }\n        }\n        return false", "        if (txt.length == 0) return\
    \ false\n        if (txt.last.isLetter) return true\n        return false", " \
    \       val lastChar = txt.last\n        if (lastChar.isLetter) {\n          \
    \  val lastCharIndex = txt.lastIndexOf(lastChar)\n            val lastCharIsLast\
    \ = lastCharIndex == txt.length - 1\n            val lastCharIsNotPartOfWord =\
    \ lastCharIndex == 0 || !txt(lastCharIndex - 1).isLetter\n            lastCharIsLast\
    \ && lastCharIsNotPartOfWord\n        } else {\n            false\n        }",
  "        if (txt.length == 0) return false\n        val lastChar = txt.last\n  \
    \      if (lastChar.isLetter) {\n            if (txt.length == 1) return true\n\
    \            val secondLastChar = txt(txt.length - 2)\n            if (secondLastChar.isLetter)\
    \ return false\n            else return true\n        }\n        else return false",
  "        if (txt.length == 0) return false\n        if (txt.last.isLetter) {\n \
    \           if (txt.length == 1) return true\n            if (txt(txt.length -\
    \ 2) == ' ') return true\n        }\n        return false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.charAt(txt.length - 1)\n    \
    \    if (lastChar >= 'a' && lastChar <= 'z') {\n            if (txt.length ==\
    \ 1) return true\n            val secondLastChar = txt.charAt(txt.length - 2)\n\
    \            if (secondLastChar == ' ') return true\n        }\n        return\
    \ false", "        if (txt.length == 0) return false\n        val last = txt.last\n\
    \        if (last.isLetter) {\n            val index = txt.lastIndexOf(last)\n\
    \            if (index == txt.length - 1) return true\n            if (txt(index\
    \ + 1) == ' ') return true\n        }\n        false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt(txt.length - 2)\n            if (secondLastChar == ' ') return true\n\
    \        }\n        return false", "        if (txt.length == 0) return false\n\
    \        val lastChar = txt.last\n        if (lastChar.isLetter) {\n         \
    \   if (txt.length == 1) return true\n            val secondLastChar = txt(txt.length\
    \ - 2)\n            if (secondLastChar.isLetter) return false\n            else\
    \ return true\n        }\n        else return false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.charAt(txt.length - 1)\n    \
    \    if (lastChar.isLetter) {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n\
    \            if (lastCharIndex == txt.length - 1) {\n                return true\n\
    \            }\n        }\n        return false", "        if (txt.length == 0)\
    \ return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.length - 1\n            val lastCharIsNotPartOfAWord\
    \ = txt.take(lastCharIndex).lastIndexOf(\" \") == lastCharIndex - 1\n        \
    \    return lastCharIsNotPartOfAWord\n        }\n        return false", "    \
    \    if (txt.length == 0) return false\n        val lastChar = txt.last\n    \
    \    if (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n\
    \            val lastCharIsPartOfWord = txt.indexOf(lastChar, lastCharIndex -\
    \ 1) != -1\n            !lastCharIsPartOfWord\n        } else {\n            false\n\
    \        }", "        if (txt.length == 0) return false\n        if (txt.last.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            if (txt(txt.length\
    \ - 2) == ' ') return true\n        }\n        return false", "        if (txt.length\
    \ == 0) return false\n        if (txt.last.isLetter) {\n            if (txt.length\
    \ == 1) return true\n            if (txt(txt.length - 2) == ' ') return true\n\
    \        }\n        return false"]
stop_tokens:
- "\n    }\n"
