name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  \    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
  \    // minSubArraySum([-1, -2, -3]) == -6\n    def minSubArraySum(nums : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val n = nums.length\n        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (i <- 0 until n) {\n            sum += nums(i)\n\
    \            minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n   \
    \     }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        // dp(i)\
    \ = min(dp(i - 1) + nums(i), nums(i))\n        // dp(0) = nums(0)\n        val\
    \ dp = Array.fill(nums.length)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until nums.length) dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        dp.min",
  "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        val n = nums.length\n\
    \        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n       \
    \     dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n        }\n        dp.min",
  "        var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum < 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- nums)\
    \ {\n            sum += i\n            minSum = min(minSum, sum)\n           \
    \ if (sum < 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n   \
    \         sum += num\n            min = min(min, sum)\n            if (sum > 0)\
    \ sum = 0\n        }\n        min", "        var minSum = Long.MaxValue\n    \
    \    var sum = 0L\n        for (num <- nums) {\n            sum += num\n     \
    \       minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n        }\n\
    \        minSum", "        var minSum = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum < 0) sum = 0\n        }\n        minSum", "      \
    \  val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i\
    \ <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n\
    \        }\n        dp.min", "        var minSum = Long.MaxValue\n        var\
    \ sum = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum < 0) sum = 0\n        }\n        minSum",
  "        var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum < 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var min = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            min = min(min,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        min", "        var\
    \ min = Long.MaxValue\n        var sum = 0L\n        for (i <- nums) {\n     \
    \       sum += i\n            if (sum < min) min = sum\n            if (sum >\
    \ 0) sum = 0\n        }\n        min"]
stop_tokens:
- "\n    }\n"
