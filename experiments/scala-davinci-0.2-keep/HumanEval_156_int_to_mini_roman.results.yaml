language: scala
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (1000, \"m\"),\n            (900, \"cm\"),\n          \
    \  (500, \"d\"),\n            (400, \"cd\"),\n            (100, \"c\"),\n    \
    \        (90, \"xc\"),\n            (50, \"l\"),\n            (40, \"xl\"),\n\
    \            (10, \"x\"),\n            (9, \"ix\"),\n            (5, \"v\"),\n\
    \            (4, \"iv\"),\n            (1, \"i\")\n        )\n        var result\
    \ = \"\"\n        var remaining = number\n        for ((value, numeral) <- romanNumerals)\
    \ {\n            while (remaining >= value) {\n                result += numeral\n\
    \                remaining -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val arabicDigits\
    \ = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n\
    \ = number\n        for (i <- 0 to 12) {\n            while (n >= arabicDigits(i))\
    \ {\n                roman.append(romanDigits(i))\n                n -= arabicDigits(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var i = 0\n       \
    \ while (number > 0) {\n            while (number >= numbers(i)) {\n         \
    \       number -= numbers(i)\n                roman.append(romanNumerals(i))\n\
    \            }\n            i += 1\n        }\n        roman.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ijarxhv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                number -= numbers(i)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -=\
    \ is not a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (num >= romanValues(i)) {\n                result += romanNumerals(i)\n    \
    \            num -= romanValues(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val digits = number.toString.map(_.asDigit).toArray\n        val romanDigits\
    \ = Array(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n        for (i <-\
    \ 0 until digits.length) {\n            val digit = digits(i)\n            val\
    \ romanDigit = romanDigits(2 * i)\n            val romanDigit5 = romanDigits(2\
    \ * i + 1)\n            val romanDigit10 = romanDigits(2 * i + 2)\n          \
    \  if (digit == 0) {\n                roman.append(\"\")\n            } else if\
    \ (digit <= 3) {\n                roman.append(romanDigit * digit)\n         \
    \   } else if (digit == 4) {\n                roman.append(romanDigit + romanDigit5)\n\
    \            } else if (digit <= 8) {\n                roman.append(romanDigit5\
    \ + romanDigit * (digit - 5))\n            } else {\n                roman.append(romanDigit\
    \ + romanDigit10)\n            }\n        }\n        roman.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb879v2vb.scala:35)\n\tat Problem.main(tmpb879v2vb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        val roman = new StringBuilder\n        while (n >= 1000) {\n        \
    \    roman.append(\"m\")\n            n -= 1000\n        }\n        while (n >=\
    \ 900) {\n            roman.append(\"cm\")\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            roman.append(\"d\")\n            n -=\
    \ 500\n        }\n        while (n >= 400) {\n            roman.append(\"cd\"\
    )\n            n -= 400\n        }\n        while (n >= 100) {\n            roman.append(\"\
    c\")\n            n -= 100\n        }\n        while (n >= 90) {\n           \
    \ roman.append(\"xc\")\n            n -= 90\n        }\n        while (n >= 50)\
    \ {\n            roman.append(\"l\")\n            n -= 50\n        }\n       \
    \ while (n >= 40) {\n            roman.append(\"xl\")\n            n -= 40\n \
    \       }\n        while (n >= 10) {\n            roman.append(\"x\")\n      \
    \      n -= 10\n        }\n        while (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        while (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        while (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        return roman.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (1000, \"m\"),\n            (900, \"cm\"),\n          \
    \  (500, \"d\"),\n            (400, \"cd\"),\n            (100, \"c\"),\n    \
    \        (90, \"xc\"),\n            (50, \"l\"),\n            (40, \"xl\"),\n\
    \            (10, \"x\"),\n            (9, \"ix\"),\n            (5, \"v\"),\n\
    \            (4, \"iv\"),\n            (1, \"i\")\n        )\n        var result\
    \ = \"\"\n        var remaining = number\n        for ((value, numeral) <- romanNumerals)\
    \ {\n            while (remaining >= value) {\n                result += numeral\n\
    \                remaining -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanMap = Map(1 -> \"i\", 4 -> \"iv\", 5 -> \"v\", 9 -> \"ix\",\
    \ 10 -> \"x\", 40 -> \"xl\", 50 -> \"l\", 90 -> \"xc\", 100 -> \"c\", 400 -> \"\
    cd\", 500 -> \"d\", 900 -> \"cm\", 1000 -> \"m\")\n        var n = number\n  \
    \      while (n > 0) {\n            var max = 0\n            for (i <- 1 to 1000)\
    \ {\n                if (n >= i && i > max) max = i\n            }\n         \
    \   roman.append(romanMap(max))\n            n -= max\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 19\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.intToMiniRoman(tmpp4xrzapo.scala:20)\n\
    \tat Problem$.main(tmpp4xrzapo.scala:26)\n\tat Problem.main(tmpp4xrzapo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val arabic = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n = number\n   \
    \     for (i <- 0 to 12) {\n            while (n >= arabic(i)) {\n           \
    \     result += roman(i)\n                n -= arabic(i)\n            }\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val arabic = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n = number\n   \
    \     for (i <- 0 to 12) {\n            while (n >= arabic(i)) {\n           \
    \     result += roman(i)\n                n -= arabic(i)\n            }\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n = number\n  \
    \      for (i <- 0 to numbers.length - 1) {\n            while (n >= numbers(i))\
    \ {\n                roman.append(romanNumerals(i))\n                n -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val arabicDigits\
    \ = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n\
    \ = number\n        for (i <- 0 to 12) {\n            while (n >= arabicDigits(i))\
    \ {\n                roman.append(romanDigits(i))\n                n -= arabicDigits(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to romanNumerals.length - 1) {\n            while (num >=\
    \ values(i)) {\n                roman.append(romanNumerals(i))\n             \
    \   num -= values(i)\n            }\n        }\n        roman.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        if (number < 1 ||\
    \ number > 1000) {\n            throw new IllegalArgumentException(\"number must\
    \ be between 1 and 1000, inclusive\")\n        }\n        val roman = new StringBuilder\n\
    \        val numerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\"\
    , 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"\
    ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var remaining = number\n\
    \        for ((numeral, value) <- numerals) {\n            while (remaining >=\
    \ value) {\n                roman.append(numeral)\n                remaining -=\
    \ value\n            }\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 500) {\n\
    \            result += \"d\"\n            num -= 500\n        }\n        while\
    \ (num >= 100) {\n            result += \"c\"\n            num -= 100\n      \
    \  }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 10) {\n            result += \"x\"\n\
    \            num -= 10\n        }\n        while (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        while (num >= 1) {\n    \
    \        result += \"i\"\n            num -= 1\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxr7qanu.scala:45)\n\tat Problem.main(tmpqxr7qanu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanNumbers = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to romanNumbers.length - 1) {\n            while\
    \ (num >= romanNumbers(i)) {\n                result += romanNumerals(i)\n   \
    \             num -= romanNumbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val decimal = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n \
    \       for (i <- 0 to 12) {\n            while (num >= decimal(i)) {\n      \
    \          result += roman(i)\n                num -= decimal(i)\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        val numeral = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val value = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n = number\n  \
    \      for (i <- 0 to 12) {\n            while (n >= value(i)) {\n           \
    \     result += numeral(i)\n                n -= value(i)\n            }\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        // The roman numerals\
    \ are:\n        // I = 1\n        // V = 5\n        // X = 10\n        // L =\
    \ 50\n        // C = 100\n        // D = 500\n        // M = 1000\n        //\
    \ The rules for roman numerals are:\n        // 1. If a symbol appears after a\
    \ larger symbol, it is added.\n        // 2. If a symbol appears before a larger\
    \ symbol, it is subtracted.\n        // 3. Only one symbol can be subtracted from\
    \ a larger symbol.\n        // 4. Only I, X, and C can be subtracted.\n      \
    \  // 5. The symbols I, X, and C can only be subtracted from the symbols\n   \
    \     //    immediately before them.\n        // 6. The symbols V, L, and D cannot\
    \ be subtracted.\n        // 7. Only one symbol can be repeated in a row.\n  \
    \      // 8. The symbols I, X, and C can be repeated up to three times in a row.\n\
    \        // 9. The symbols V, L, and D can be repeated only once in a row.\n \
    \       // 10. The symbol M can be repeated up to three times in a row.\n    \
    \    // 11. The symbols I, X, and C can be repeated up to three times in a row.\n\
    \        // 12. The symbols V, L, and D can be repeated only once in a row.\n\
    \        // 13. The symbol M can be repeated up to three times in a row.\n   \
    \     // 14. The symbols I, X, and C can be repeated up to three times in a row.\n\
    \        // 15. The symbols V, L, and D can be repeated only once in a row.\n\
    \        // 16. The symbol M can be repeated up to three times in a row.\n   \
    \     // 17. The symbols I, X, and C can be repeated up to three times in a row.\n\
    \        // 18. The symbols V, L, and D can be repeated only once in a row.\n\
    \        // 19. The symbol M can be repeated up to three times in a row.\n   \
    \     // 20. The symbols I, X, and C can be repeated up to three times in a row.\n\
    \        // 21. The symbols V, L, and D can be repeated only once in a row.\n\
    \        // 22. The symbol M can\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ny2i0f3.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mintToMiniRoman\e\
    [0m(\e[36mnumber\e[0m : \e[35mLong\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m                                                 Found:    Unit\n\e[31m   |\e\
    [0m                                                 Required: String\n\e[31m12\
    \ |\e[0m        \e[34m// The roman numerals are:\e[0m\n\e[31m13 |\e[0m       \
    \ \e[34m// I = 1\e[0m\n\e[31m14 |\e[0m        \e[34m// V = 5\e[0m\n\e[31m15 |\e\
    [0m        \e[34m// X = 10\e[0m\n\e[31m16 |\e[0m        \e[34m// L = 50\e[0m\n\
    \e[31m17 |\e[0m        \e[34m// C = 100\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ D = 500\e[0m\n\e[31m19 |\e[0m        \e[34m// M = 1000\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// The rules for roman numerals are:\e[0m\n\e[31m21 |\e[0m    \
    \    \e[34m// 1. If a symbol appears after a larger symbol, it is added.\e[0m\n\
    \e[31m22 |\e[0m        \e[34m// 2. If a symbol appears before a larger symbol,\
    \ it is subtracted.\e[0m\n\e[31m23 |\e[0m        \e[34m// 3. Only one symbol can\
    \ be subtracted from a larger symbol.\e[0m\n\e[31m24 |\e[0m        \e[34m// 4.\
    \ Only I, X, and C can be subtracted.\e[0m\n\e[31m25 |\e[0m        \e[34m// 5.\
    \ The symbols I, X, and C can only be subtracted from the symbols\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m//    immediately before them.\e[0m\n\e[31m27 |\e[0m   \
    \     \e[34m// 6. The symbols V, L, and D cannot be subtracted.\e[0m\n\e[31m28\
    \ |\e[0m        \e[34m// 7. Only one symbol can be repeated in a row.\e[0m\n\e\
    [31m29 |\e[0m        \e[34m// 8. The symbols I, X, and C can be repeated up to\
    \ three times in a row.\e[0m\n\e[31m30 |\e[0m        \e[34m// 9. The symbols V,\
    \ L, and D can be repeated only once in a row.\e[0m\n\e[31m31 |\e[0m        \e\
    [34m// 10. The symbol M can be repeated up to three times in a row.\e[0m\n\e[31m32\
    \ |\e[0m        \e[34m// 11. The symbols I, X, and C can be repeated up to three\
    \ times in a row.\e[0m\n\e[31m33 |\e[0m        \e[34m// 12. The symbols V, L,\
    \ and D can be repeated only once in a row.\e[0m\n\e[31m34 |\e[0m        \e[34m//\
    \ 13. T"
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val digits = number.toString.toList.map(_.toString.toInt)\n        val\
    \ romanDigits = List(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n      \
    \  for (i <- 0 until digits.length) {\n            val digit = digits(i)\n   \
    \         val romanDigit = romanDigits(2 * i)\n            if (digit == 9) roman.append(romanDigit\
    \ + romanDigits(2 * i + 2))\n            else if (digit >= 5) {\n            \
    \    roman.append(romanDigits(2 * i + 1))\n                for (j <- 0 until digit\
    \ - 5) roman.append(romanDigit)\n            }\n            else if (digit ==\
    \ 4) roman.append(romanDigit + romanDigits(2 * i + 1))\n            else for (j\
    \ <- 0 until digit) roman.append(romanDigit)\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3qfc4gv7.scala:29)\n\tat Problem.main(tmp3qfc4gv7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = List(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ num = number\n        for (i <- 0 to romanNumerals.length - 1) {\n         \
    \   while (num >= decimalNumbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= decimalNumbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val decimal = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var i = 0\n        while\
    \ (number > 0) {\n            while (number >= decimal(i)) {\n               \
    \ number -= decimal(i)\n                result += roman(i)\n            }\n  \
    \          i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptfhpie5f.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                number -= decimal(i)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -=\
    \ is not a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        while (n >= 900) {\n      \
    \      result += \"cm\"\n            n -= 900\n        }\n        while (n >=\
    \ 500) {\n            result += \"d\"\n            n -= 500\n        }\n     \
    \   while (n >= 400) {\n            result += \"cd\"\n            n -= 400\n \
    \       }\n        while (n >= 100) {\n            result += \"c\"\n         \
    \   n -= 100\n        }\n        while (n >= 90) {\n            result += \"xc\"\
    \n            n -= 90\n        }\n        while (n >= 50) {\n            result\
    \ += \"l\"\n            n -= 50\n        }\n        while (n >= 40) {\n      \
    \      result += \"xl\"\n            n -= 40\n        }\n        while (n >= 10)\
    \ {\n            result += \"x\"\n            n -= 10\n        }\n        while\
    \ (n >= 9) {\n            result += \"ix\"\n            n -= 9\n        }\n  \
    \      while (n >= 5) {\n            result += \"v\"\n            n -= 5\n   \
    \     }\n        while (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Map(1\
    \ -> \"i\", 4 -> \"iv\", 5 -> \"v\", 9 -> \"ix\", 10 -> \"x\", 40 -> \"xl\", 50\
    \ -> \"l\", 90 -> \"xc\", 100 -> \"c\", 400 -> \"cd\", 500 -> \"d\", 900 -> \"\
    cm\", 1000 -> \"m\")\n        var result = \"\"\n        var n = number\n    \
    \    while (n > 0) {\n            val max = roman.keys.filter(n >= _).max\n  \
    \          result += roman(max)\n            n -= max\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        var roman = Array(\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n   \
    \     var value = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n\
    \        for (i <- 0 to 12) {\n            while (num >= value(i)) {\n       \
    \         num -= value(i)\n                result += roman(i)\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romans = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to romans.length - 1) {\n            while (num >= numbers(i))\
    \ {\n                roman.append(romans(i))\n                num -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var remaining\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (remaining >= romanValues(i)) {\n                result += romanNumerals(i)\n\
    \                remaining -= romanValues(i)\n            }\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman : String\
    \ = number.toString.map(x => x match {\n            case '0' => \"\"\n       \
    \     case '1' => \"i\"\n            case '2' => \"ii\"\n            case '3'\
    \ => \"iii\"\n            case '4' => \"iv\"\n            case '5' => \"v\"\n\
    \            case '6' => \"vi\"\n            case '7' => \"vii\"\n           \
    \ case '8' => \"viii\"\n            case '9' => \"ix\"\n        }).mkString\n\
    \        roman.replace(\"iiii\", \"iv\").replace(\"vv\", \"x\").replace(\"xxxx\"\
    , \"xl\").replace(\"ll\", \"c\").replace(\"cccc\", \"cd\").replace(\"dd\", \"\
    m\")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp93hp5r4i.scala:27)\n\tat Problem.main(tmp93hp5r4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val symbols = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to 12) {\n            while (num >= values(i)) {\n      \
    \          roman.append(symbols(i))\n                num -= values(i)\n      \
    \      }\n        }\n        return roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var temp = number\n        while (temp >= 1000) {\n            roman.append(\"\
    m\")\n            temp -= 1000\n        }\n        while (temp >= 500) {\n   \
    \         roman.append(\"d\")\n            temp -= 500\n        }\n        while\
    \ (temp >= 100) {\n            roman.append(\"c\")\n            temp -= 100\n\
    \        }\n        while (temp >= 50) {\n            roman.append(\"l\")\n  \
    \          temp -= 50\n        }\n        while (temp >= 10) {\n            roman.append(\"\
    x\")\n            temp -= 10\n        }\n        while (temp >= 5) {\n       \
    \     roman.append(\"v\")\n            temp -= 5\n        }\n        while (temp\
    \ >= 1) {\n            roman.append(\"i\")\n            temp -= 1\n        }\n\
    \        roman.toString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbz7ris1p.scala:45)\n\tat Problem.main(tmpbz7ris1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val numerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n = number\n  \
    \      for (i <- 0 to numerals.length - 1) {\n            while (n >= values(i))\
    \ {\n                roman.append(numerals(i))\n                n -= values(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = List(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ remainder = number\n        for (i <- 0 to romanNumerals.length - 1) {\n   \
    \         while (remainder >= decimalNumbers(i)) {\n                result +=\
    \ romanNumerals(i)\n                remainder -= decimalNumbers(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val arabicNumerals = Array(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ num = number\n        for (i <- 0 to 12) {\n            while (num >= arabicNumerals(i))\
    \ {\n                result += romanNumerals(i)\n                num -= arabicNumerals(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n\
    \        for (i <- 0 to romanNumerals.length - 1) {\n            while (num >=\
    \ values(i)) {\n                result += romanNumerals(i)\n                num\
    \ -= values(i)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = List(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ num = number\n        for (i <- 0 to romanNumerals.length - 1) {\n         \
    \   while (num >= decimalNumbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= decimalNumbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n \
    \       for (i <- 0 to 12) {\n            while (num >= values(i)) {\n       \
    \         num -= values(i)\n                result += roman(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        def intToMiniRoman(number\
    \ : Long, result : String) : String = {\n            if (number == 0) result\n\
    \            else if (number >= 1000) intToMiniRoman(number - 1000, result + \"\
    m\")\n            else if (number >= 900) intToMiniRoman(number - 900, result\
    \ + \"cm\")\n            else if (number >= 500) intToMiniRoman(number - 500,\
    \ result + \"d\")\n            else if (number >= 400) intToMiniRoman(number -\
    \ 400, result + \"cd\")\n            else if (number >= 100) intToMiniRoman(number\
    \ - 100, result + \"c\")\n            else if (number >= 90) intToMiniRoman(number\
    \ - 90, result + \"xc\")\n            else if (number >= 50) intToMiniRoman(number\
    \ - 50, result + \"l\")\n            else if (number >= 40) intToMiniRoman(number\
    \ - 40, result + \"xl\")\n            else if (number >= 10) intToMiniRoman(number\
    \ - 10, result + \"x\")\n            else if (number >= 9) intToMiniRoman(number\
    \ - 9, result + \"ix\")\n            else if (number >= 5) intToMiniRoman(number\
    \ - 5, result + \"v\")\n            else if (number >= 4) intToMiniRoman(number\
    \ - 4, result + \"iv\")\n            else intToMiniRoman(number - 1, result +\
    \ \"i\")\n        }\n        intToMiniRoman(number, \"\").toLowerCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (\"M\", 1000),\n            (\"CM\", 900),\n          \
    \  (\"D\", 500),\n            (\"CD\", 400),\n            (\"C\", 100),\n    \
    \        (\"XC\", 90),\n            (\"L\", 50),\n            (\"XL\", 40),\n\
    \            (\"X\", 10),\n            (\"IX\", 9),\n            (\"V\", 5),\n\
    \            (\"IV\", 4),\n            (\"I\", 1)\n        )\n        var result\
    \ = \"\"\n        var remaining = number\n        for ((numeral, value) <- romanNumerals)\
    \ {\n            while (remaining >= value) {\n                result += numeral\n\
    \                remaining -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wah6ae7.scala:38)\n\tat Problem.main(tmp7wah6ae7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        if (number < 1 ||\
    \ number > 1000) throw new IllegalArgumentException(\"Number must be between 1\
    \ and 1000\")\n        val roman = new StringBuilder\n        var n = number\n\
    \        while (n >= 1000) {\n            roman.append(\"m\")\n            n -=\
    \ 1000\n        }\n        if (n >= 900) {\n            roman.append(\"cm\")\n\
    \            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (1000, \"m\"),\n            (900, \"cm\"),\n          \
    \  (500, \"d\"),\n            (400, \"cd\"),\n            (100, \"c\"),\n    \
    \        (90, \"xc\"),\n            (50, \"l\"),\n            (40, \"xl\"),\n\
    \            (10, \"x\"),\n            (9, \"ix\"),\n            (5, \"v\"),\n\
    \            (4, \"iv\"),\n            (1, \"i\")\n        )\n        var result\
    \ = \"\"\n        var remaining = number\n        for ((value, numeral) <- romanNumerals)\
    \ {\n            while (remaining >= value) {\n                result += numeral\n\
    \                remaining -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        while (n >= 900) {\n         \
    \   roman.append(\"cm\")\n            n -= 900\n        }\n        while (n >=\
    \ 500) {\n            roman.append(\"d\")\n            n -= 500\n        }\n \
    \       while (n >= 400) {\n            roman.append(\"cd\")\n            n -=\
    \ 400\n        }\n        while (n >= 100) {\n            roman.append(\"c\")\n\
    \            n -= 100\n        }\n        while (n >= 90) {\n            roman.append(\"\
    xc\")\n            n -= 90\n        }\n        while (n >= 50) {\n           \
    \ roman.append(\"l\")\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            roman.append(\"xl\")\n            n -= 40\n        }\n      \
    \  while (n >= 10) {\n            roman.append(\"x\")\n            n -= 10\n \
    \       }\n        while (n >= 9) {\n            roman.append(\"ix\")\n      \
    \      n -= 9\n        }\n        while (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        while (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to numbers.length - 1) {\n            while (num >= numbers(i))\
    \ {\n                roman.append(romanNumerals(i))\n                num -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n =\
    \ number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (n >= numbers(i)) {\n                result += romanNumerals(i)\n          \
    \      n -= numbers(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val symbols = List(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val values = List(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var i = 0\n        var\
    \ num = number\n        while (num > 0) {\n            while (num >= values(i))\
    \ {\n                result += symbols(i)\n                num -= values(i)\n\
    \            }\n            i += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num > 0) {\n            if (num >= 1000)\
    \ {\n                roman.append(\"m\")\n                num -= 1000\n      \
    \      } else if (num >= 900) {\n                roman.append(\"cm\")\n      \
    \          num -= 900\n            } else if (num >= 500) {\n                roman.append(\"\
    d\")\n                num -= 500\n            } else if (num >= 400) {\n     \
    \           roman.append(\"cd\")\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                roman.append(\"c\")\n                num\
    \ -= 100\n            } else if (num >= 90) {\n                roman.append(\"\
    xc\")\n                num -= 90\n            } else if (num >= 50) {\n      \
    \          roman.append(\"l\")\n                num -= 50\n            } else\
    \ if (num >= 40) {\n                roman.append(\"xl\")\n                num\
    \ -= 40\n            } else if (num >= 10) {\n                roman.append(\"\
    x\")\n                num -= 10\n            } else if (num >= 9) {\n        \
    \        roman.append(\"ix\")\n                num -= 9\n            } else if\
    \ (num >= 5) {\n                roman.append(\"v\")\n                num -= 5\n\
    \            } else if (num >= 4) {\n                roman.append(\"iv\")\n  \
    \              num -= 4\n            } else if (num >= 1) {\n                roman.append(\"\
    i\")\n                num -= 1\n            }\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n\
    \        for (i <- 0 to romanNumerals.length - 1) {\n            while (num >=\
    \ numbers(i)) {\n                result += romanNumerals(i)\n                num\
    \ -= numbers(i)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to numbers.length - 1) {\n            while (num >= numbers(i))\
    \ {\n                roman.append(romanNumerals(i))\n                num -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = new\
    \ StringBuilder\n        var num = number\n        while (num >= 1000) {\n   \
    \         result.append(\"m\")\n            num -= 1000\n        }\n        if\
    \ (num >= 900) {\n            result.append(\"cm\")\n            num -= 900\n\
    \        }\n        if (num >= 500) {\n            result.append(\"d\")\n    \
    \        num -= 500\n        }\n        if (num >= 400) {\n            result.append(\"\
    cd\")\n            num -= 400\n        }\n        while (num >= 100) {\n     \
    \       result.append(\"c\")\n            num -= 100\n        }\n        if (num\
    \ >= 90) {\n            result.append(\"xc\")\n            num -= 90\n       \
    \ }\n        if (num >= 50) {\n            result.append(\"l\")\n            num\
    \ -= 50\n        }\n        if (num >= 40) {\n            result.append(\"xl\"\
    )\n            num -= 40\n        }\n        while (num >= 10) {\n           \
    \ result.append(\"x\")\n            num -= 10\n        }\n        if (num >= 9)\
    \ {\n            result.append(\"ix\")\n            num -= 9\n        }\n    \
    \    if (num >= 5) {\n            result.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            result.append(\"iv\")\n     \
    \       num -= 4\n        }\n        while (num >= 1) {\n            result.append(\"\
    i\")\n            num -= 1\n        }\n        return result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (\"m\", 1000),\n            (\"d\", 500),\n           \
    \ (\"c\", 100),\n            (\"l\", 50),\n            (\"x\", 10),\n        \
    \    (\"v\", 5),\n            (\"i\", 1)\n        )\n        var result = \"\"\
    \n        var remaining = number\n        for ((numeral, value) <- romanNumerals)\
    \ {\n            while (remaining >= value) {\n                result += numeral\n\
    \                remaining -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakc9nr50.scala:32)\n\tat Problem.main(tmpakc9nr50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (\"M\", 1000),\n            (\"CM\", 900),\n          \
    \  (\"D\", 500),\n            (\"CD\", 400),\n            (\"C\", 100),\n    \
    \        (\"XC\", 90),\n            (\"L\", 50),\n            (\"XL\", 40),\n\
    \            (\"X\", 10),\n            (\"IX\", 9),\n            (\"V\", 5),\n\
    \            (\"IV\", 4),\n            (\"I\", 1)\n        )\n        var result\
    \ = \"\"\n        var remainder = number\n        for ((roman, arabic) <- romanNumerals)\
    \ {\n            while (remainder >= arabic) {\n                result += roman\n\
    \                remainder -= arabic\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpse0hh36e.scala:38)\n\tat Problem.main(tmpse0hh36e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val symbols = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n = number\n  \
    \      for (i <- 0 to 12) {\n            while (n >= values(i)) {\n          \
    \      roman.append(symbols(i))\n                n -= values(i)\n            }\n\
    \        }\n        return roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var remaining\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (remaining >= values(i)) {\n                result += romanNumerals(i)\n   \
    \             remaining -= values(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n > 0) {\n            if (n >= 1000)\
    \ {\n                result += \"m\"\n                n -= 1000\n            }\
    \ else if (n >= 900) {\n                result += \"cm\"\n                n -=\
    \ 900\n            } else if (n >= 500) {\n                result += \"d\"\n \
    \               n -= 500\n            } else if (n >= 400) {\n               \
    \ result += \"cd\"\n                n -= 400\n            } else if (n >= 100)\
    \ {\n                result += \"c\"\n                n -= 100\n            }\
    \ else if (n >= 90) {\n                result += \"xc\"\n                n -=\
    \ 90\n            } else if (n >= 50) {\n                result += \"l\"\n   \
    \             n -= 50\n            } else if (n >= 40) {\n                result\
    \ += \"xl\"\n                n -= 40\n            } else if (n >= 10) {\n    \
    \            result += \"x\"\n                n -= 10\n            } else if (n\
    \ >= 9) {\n                result += \"ix\"\n                n -= 9\n        \
    \    } else if (n >= 5) {\n                result += \"v\"\n                n\
    \ -= 5\n            } else if (n >= 4) {\n                result += \"iv\"\n \
    \               n -= 4\n            } else if (n >= 1) {\n                result\
    \ += \"i\"\n                n -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = List(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ remaining = number\n        for (i <- 0 to romanNumerals.length - 1) {\n   \
    \         while (remaining >= decimalNumbers(i)) {\n                result +=\
    \ romanNumerals(i)\n                remaining -= decimalNumbers(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n            result\
    \ += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n      \
    \      result += \"d\"\n            n -= 500\n        }\n        if (n >= 400)\
    \ {\n            result += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            result += \"c\"\n            n -= 100\n        }\n\
    \        if (n >= 90) {\n            result += \"xc\"\n            n -= 90\n \
    \       }\n        if (n >= 50) {\n            result += \"l\"\n            n\
    \ -= 50\n        }\n        if (n >= 40) {\n            result += \"xl\"\n   \
    \         n -= 40\n        }\n        while (n >= 10) {\n            result +=\
    \ \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n            result\
    \ += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n          \
    \  result += \"v\"\n            n -= 5\n        }\n        if (n >= 4) {\n   \
    \         result += \"iv\"\n            n -= 4\n        }\n        while (n >=\
    \ 1) {\n            result += \"i\"\n            n -= 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to 12) {\n            while (num >= numbers(i))\
    \ {\n                result += romanNumerals(i)\n                num -= numbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanDigits =\
    \ Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanValues = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n =\
    \ number\n        for (i <- 0 to romanDigits.length - 1) {\n            while\
    \ (n >= romanValues(i)) {\n                result += romanDigits(i)\n        \
    \        n -= romanValues(i)\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var i =\
    \ 0\n        var num = number\n        while (num > 0) {\n            while (num\
    \ >= numbers(i)) {\n                result += romanNumerals(i)\n             \
    \   num -= numbers(i)\n            }\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        while (num >= 900) {\n     \
    \       roman.append(\"cm\")\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            roman.append(\"d\")\n            num -= 500\n  \
    \      }\n        while (num >= 400) {\n            roman.append(\"cd\")\n   \
    \         num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        while (num >= 90) {\n       \
    \     roman.append(\"xc\")\n            num -= 90\n        }\n        while (num\
    \ >= 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n\
    \        while (num >= 40) {\n            roman.append(\"xl\")\n            num\
    \ -= 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\"\
    )\n            num -= 10\n        }\n        while (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        while (num >= 5) {\n         \
    \   roman.append(\"v\")\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            roman.append(\"iv\")\n            num -= 4\n        }\n  \
    \      while (num >= 1) {\n            roman.append(\"i\")\n            num -=\
    \ 1\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = Array(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var\
    \ remainder = number\n        for (i <- 0 to romanNumerals.length - 1) {\n   \
    \         while (remainder >= decimalNumbers(i)) {\n                result +=\
    \ romanNumerals(i)\n                remainder -= decimalNumbers(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n\
    \        for (i <- 0 to romanNumerals.length - 1) {\n            while (num >=\
    \ numbers(i)) {\n                result += romanNumerals(i)\n                num\
    \ -= numbers(i)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val symbols = List(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val values = List(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var n = number\n        var result = \"\"\n   \
    \     for (i <- 0 to 12) {\n            while (n >= values(i)) {\n           \
    \     result += symbols(i)\n                n -= values(i)\n            }\n  \
    \      }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var n = number\n        while (n >= 1000) {\n            result += \"\
    m\"\n            n -= 1000\n        }\n        while (n >= 500) {\n          \
    \  result += \"d\"\n            n -= 500\n        }\n        while (n >= 100)\
    \ {\n            result += \"c\"\n            n -= 100\n        }\n        while\
    \ (n >= 50) {\n            result += \"l\"\n            n -= 50\n        }\n \
    \       while (n >= 10) {\n            result += \"x\"\n            n -= 10\n\
    \        }\n        while (n >= 5) {\n            result += \"v\"\n          \
    \  n -= 5\n        }\n        while (n >= 1) {\n            result += \"i\"\n\
    \            n -= 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7zp2rh8.scala:45)\n\tat Problem.main(tmpy7zp2rh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val decimal = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n \
    \       for (i <- 0 to roman.length - 1) {\n            while (num >= decimal(i))\
    \ {\n                result += roman(i)\n                num -= decimal(i)\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to numbers.length - 1) {\n            while (num\
    \ >= numbers(i)) {\n                result += romanNumerals(i)\n             \
    \   num -= numbers(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val symbols = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n = number\n   \
    \     for (i <- 0 to 12) {\n            while (n >= values(i)) {\n           \
    \     result += symbols(i)\n                n -= values(i)\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        while (n >= 900) {\n      \
    \      result += \"cm\"\n            n -= 900\n        }\n        while (n >=\
    \ 500) {\n            result += \"d\"\n            n -= 500\n        }\n     \
    \   while (n >= 400) {\n            result += \"cd\"\n            n -= 400\n \
    \       }\n        while (n >= 100) {\n            result += \"c\"\n         \
    \   n -= 100\n        }\n        while (n >= 90) {\n            result += \"xc\"\
    \n            n -= 90\n        }\n        while (n >= 50) {\n            result\
    \ += \"l\"\n            n -= 50\n        }\n        while (n >= 40) {\n      \
    \      result += \"xl\"\n            n -= 40\n        }\n        while (n >= 10)\
    \ {\n            result += \"x\"\n            n -= 10\n        }\n        while\
    \ (n >= 9) {\n            result += \"ix\"\n            n -= 9\n        }\n  \
    \      while (n >= 5) {\n            result += \"v\"\n            n -= 5\n   \
    \     }\n        while (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (num >= numbers(i)) {\n                result += romanNumerals(i)\n        \
    \        num -= numbers(i)\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to numbers.length - 1) {\n            while (num >= numbers(i))\
    \ {\n                roman.append(romanNumerals(i))\n                num -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var i = 0\n\
    \        var num = number\n        while (num > 0) {\n            while (num >=\
    \ values(i)) {\n                num -= values(i)\n                result += romanNumerals(i)\n\
    \            }\n            i += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 500) {\n\
    \            result += \"d\"\n            num -= 500\n        }\n        while\
    \ (num >= 100) {\n            result += \"c\"\n            num -= 100\n      \
    \  }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 10) {\n            result += \"x\"\n\
    \            num -= 10\n        }\n        while (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        while (num >= 1) {\n    \
    \        result += \"i\"\n            num -= 1\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxr7qanu.scala:45)\n\tat Problem.main(tmpqxr7qanu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val arabicDigits\
    \ = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var remaining\
    \ = number\n        for (i <- 0 to 12) {\n            while (remaining >= arabicDigits(i))\
    \ {\n                roman.append(romanDigits(i))\n                remaining -=\
    \ arabicDigits(i)\n            }\n        }\n        roman.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        if (number < 1 ||\
    \ number > 1000) throw new IllegalArgumentException(\"Number must be between 1\
    \ and 1000\")\n        val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n       \
    \ val numbers = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n \
    \       var result = \"\"\n        var remaining = number\n        for (i <- 0\
    \ until numbers.length) {\n            while (remaining >= numbers(i)) {\n   \
    \             result += romanNumerals(i)\n                remaining -= numbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var remaining\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (remaining >= romanValues(i)) {\n                result += romanNumerals(i)\n\
    \                remaining -= romanValues(i)\n            }\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"\
    m\")\n        var n = number\n        var i = 0\n        while (n > 0) {\n   \
    \         val digit = n % 10\n            n /= 10\n            if (digit == 0)\
    \ {\n                i += 2\n                continue\n            }\n       \
    \     if (digit <= 3) {\n                roman.insert(0, romanDigits(i) * digit)\n\
    \            } else if (digit == 4) {\n                roman.insert(0, romanDigits(i)\
    \ + romanDigits(i + 1))\n            } else if (digit == 5) {\n              \
    \  roman.insert(0, romanDigits(i + 1))\n            } else if (digit <= 8) {\n\
    \                roman.insert(0, romanDigits(i + 1) + romanDigits(i) * (digit\
    \ - 5))\n            } else {\n                roman.insert(0, romanDigits(i)\
    \ + romanDigits(i + 2))\n            }\n            i += 2\n        }\n      \
    \  roman.toString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzqnb_be.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzqnb_be.scala:24:49\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                roman.insert(\e\
    [31m0\e[0m, romanDigits(i) * digit)\n\e[31m\e[31m   |\e[0m                   \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (digit : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzqnb_be.scala:30:71 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                roman.insert(\e[31m0\e[0m, romanDigits(i\
    \ + \e[31m1\e[0m) + romanDigits(i) * (digit - \e[31m5\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var n = number\n\
    \        var result = \"\"\n        while (n >= 1000) {\n            result +=\
    \ \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n         \
    \   result += \"cm\"\n            n -= 900\n        }\n        if (n >= 500) {\n\
    \            result += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            result += \"cd\"\n            n -= 400\n        }\n    \
    \    while (n >= 100) {\n            result += \"c\"\n            n -= 100\n \
    \       }\n        if (n >= 90) {\n            result += \"xc\"\n            n\
    \ -= 90\n        }\n        if (n >= 50) {\n            result += \"l\"\n    \
    \        n -= 50\n        }\n        if (n >= 40) {\n            result += \"\
    xl\"\n            n -= 40\n        }\n        while (n >= 10) {\n            result\
    \ += \"x\"\n            n -= 10\n        }\n        if (n >= 9) {\n          \
    \  result += \"ix\"\n            n -= 9\n        }\n        if (n >= 5) {\n  \
    \          result += \"v\"\n            n -= 5\n        }\n        if (n >= 4)\
    \ {\n            result += \"iv\"\n            n -= 4\n        }\n        while\
    \ (n >= 1) {\n            result += \"i\"\n            n -= 1\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanNumbers = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var n =\
    \ number\n        for (i <- 0 to romanNumbers.length - 1) {\n            while\
    \ (n >= romanNumbers(i)) {\n                result += romanNumerals(i)\n     \
    \           n -= romanNumbers(i)\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val decimal = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num = number\n \
    \       for (i <- 0 to roman.length - 1) {\n            while (num >= decimal(i))\
    \ {\n                result += roman(i)\n                num -= decimal(i)\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var remaining\
    \ = number\n        for (i <- 0 to romanNumerals.length - 1) {\n            while\
    \ (remaining >= romanValues(i)) {\n                result += romanNumerals(i)\n\
    \                remaining -= romanValues(i)\n            }\n        }\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var num = number\n        while (num >= 1000) {\n            roman.append(\"\
    m\")\n            num -= 1000\n        }\n        if (num >= 900) {\n        \
    \    roman.append(\"cm\")\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            roman.append(\"d\")\n            num -= 500\n       \
    \ }\n        if (num >= 400) {\n            roman.append(\"cd\")\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            roman.append(\"\
    c\")\n            num -= 100\n        }\n        if (num >= 90) {\n          \
    \  roman.append(\"xc\")\n            num -= 90\n        }\n        if (num >=\
    \ 50) {\n            roman.append(\"l\")\n            num -= 50\n        }\n \
    \       if (num >= 40) {\n            roman.append(\"xl\")\n            num -=\
    \ 40\n        }\n        while (num >= 10) {\n            roman.append(\"x\")\n\
    \            num -= 10\n        }\n        if (num >= 9) {\n            roman.append(\"\
    ix\")\n            num -= 9\n        }\n        if (num >= 5) {\n            roman.append(\"\
    v\")\n            num -= 5\n        }\n        if (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers = List(1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var remainder = number\n    \
    \    var result = \"\"\n        for (i <- 0 to romanNumerals.length - 1) {\n \
    \           while (remainder >= decimalNumbers(i)) {\n                remainder\
    \ -= decimalNumbers(i)\n                result += romanNumerals(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var num\
    \ = number\n        for (i <- 0 to numbers.length - 1) {\n            while (num\
    \ >= numbers(i)) {\n                result += romanNumerals(i)\n             \
    \   num -= numbers(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val arabicDigits\
    \ = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var n\
    \ = number\n        for (i <- 0 to 12) {\n            while (n >= arabicDigits(i))\
    \ {\n                roman.append(romanDigits(i))\n                n -= arabicDigits(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\n            (\"M\", 1000),\n            (\"CM\", 900),\n          \
    \  (\"D\", 500),\n            (\"CD\", 400),\n            (\"C\", 100),\n    \
    \        (\"XC\", 90),\n            (\"L\", 50),\n            (\"XL\", 40),\n\
    \            (\"X\", 10),\n            (\"IX\", 9),\n            (\"V\", 5),\n\
    \            (\"IV\", 4),\n            (\"I\", 1)\n        )\n        var result\
    \ = \"\"\n        var remaining = number\n        for (i <- 0 until romanNumerals.length)\
    \ {\n            val (roman, arabic) = romanNumerals(i)\n            while (remaining\
    \ >= arabic) {\n                result += roman\n                remaining -=\
    \ arabic\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6bu8ku.scala:39)\n\tat Problem.main(tmpxp6bu8ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val digits = number.toString.map(_.asDigit).toList\n        val romanDigits\
    \ = List(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n        for (i <- 0\
    \ until digits.length) {\n            val digit = digits(i)\n            val romanDigit\
    \ = romanDigits(2 * i)\n            val romanDigit5 = romanDigits(2 * i + 1)\n\
    \            val romanDigit10 = romanDigits(2 * i + 2)\n            if (digit\
    \ == 9) {\n                roman.append(romanDigit + romanDigit10)\n         \
    \   } else if (digit == 4) {\n                roman.append(romanDigit + romanDigit5)\n\
    \            } else {\n                if (digit >= 5) {\n                   \
    \ roman.append(romanDigit5)\n                }\n                for (j <- 0 until\
    \ (digit % 5)) {\n                    roman.append(romanDigit)\n             \
    \   }\n            }\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1hboc4f.scala:36)\n\tat Problem.main(tmpg1hboc4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var i = 0\n        var\
    \ num = number\n        while (num > 0) {\n            while (num >= values(i))\
    \ {\n                num -= values(i)\n                result += roman(i)\n  \
    \          }\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals\
    \ = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\")\n        val romanNumbers = List(1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n        var numberLeft\
    \ = number\n        for (i <- 0 to romanNumbers.length - 1) {\n            while\
    \ (numberLeft >= romanNumbers(i)) {\n                result += romanNumerals(i)\n\
    \                numberLeft -= romanNumbers(i)\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        if (num >= 900) {\n  \
    \          result += \"cm\"\n            num -= 900\n        }\n        if (num\
    \ >= 500) {\n            result += \"d\"\n            num -= 500\n        }\n\
    \        if (num >= 400) {\n            result += \"cd\"\n            num -= 400\n\
    \        }\n        while (num >= 100) {\n            result += \"c\"\n      \
    \      num -= 100\n        }\n        if (num >= 90) {\n            result +=\
    \ \"xc\"\n            num -= 90\n        }\n        if (num >= 50) {\n       \
    \     result += \"l\"\n            num -= 50\n        }\n        if (num >= 40)\
    \ {\n            result += \"xl\"\n            num -= 40\n        }\n        while\
    \ (num >= 10) {\n            result += \"x\"\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result += \"ix\"\n            num -= 9\n\
    \        }\n        if (num >= 5) {\n            result += \"v\"\n           \
    \ num -= 5\n        }\n        if (num >= 4) {\n            result += \"iv\"\n\
    \            num -= 4\n        }\n        while (num >= 1) {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        val romanDigits = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num = number\n\
    \        for (i <- 0 to numbers.length - 1) {\n            while (num >= numbers(i))\
    \ {\n                roman.append(romanDigits(i))\n                num -= numbers(i)\n\
    \            }\n        }\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var num = number\n\
    \        var result = \"\"\n        while (num > 0) {\n            if (num >=\
    \ 1000) {\n                result += \"m\"\n                num -= 1000\n    \
    \        } else if (num >= 900) {\n                result += \"cm\"\n        \
    \        num -= 900\n            } else if (num >= 500) {\n                result\
    \ += \"d\"\n                num -= 500\n            } else if (num >= 400) {\n\
    \                result += \"cd\"\n                num -= 400\n            } else\
    \ if (num >= 100) {\n                result += \"c\"\n                num -= 100\n\
    \            } else if (num >= 90) {\n                result += \"xc\"\n     \
    \           num -= 90\n            } else if (num >= 50) {\n                result\
    \ += \"l\"\n                num -= 50\n            } else if (num >= 40) {\n \
    \               result += \"xl\"\n                num -= 40\n            } else\
    \ if (num >= 10) {\n                result += \"x\"\n                num -= 10\n\
    \            } else if (num >= 9) {\n                result += \"ix\"\n      \
    \          num -= 9\n            } else if (num >= 5) {\n                result\
    \ += \"v\"\n                num -= 5\n            } else if (num >= 4) {\n   \
    \             result += \"iv\"\n                num -= 4\n            } else if\
    \ (num >= 1) {\n                result += \"i\"\n                num -= 1\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        var result = \"\"\
    \n        var num = number\n        while (num >= 1000) {\n            result\
    \ += \"m\"\n            num -= 1000\n        }\n        while (num >= 900) {\n\
    \            result += \"cm\"\n            num -= 900\n        }\n        while\
    \ (num >= 500) {\n            result += \"d\"\n            num -= 500\n      \
    \  }\n        while (num >= 400) {\n            result += \"cd\"\n           \
    \ num -= 400\n        }\n        while (num >= 100) {\n            result += \"\
    c\"\n            num -= 100\n        }\n        while (num >= 90) {\n        \
    \    result += \"xc\"\n            num -= 90\n        }\n        while (num >=\
    \ 50) {\n            result += \"l\"\n            num -= 50\n        }\n     \
    \   while (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        while (num >= 9) {\n            result +=\
    \ \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n      \
    \      result += \"v\"\n            num -= 5\n        }\n        while (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>>\
    \ int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n\
    \    def intToMiniRoman(number : Long) : String = {\n        val roman = new StringBuilder\n\
    \        var n = number\n        while (n >= 1000) {\n            roman.append(\"\
    m\")\n            n -= 1000\n        }\n        if (n >= 900) {\n            roman.append(\"\
    cm\")\n            n -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"\
    d\")\n            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805916
