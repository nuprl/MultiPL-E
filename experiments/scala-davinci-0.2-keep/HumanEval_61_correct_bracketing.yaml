name: HumanEval_61_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"(\" and \")\".\n    // return True if every opening\
  \ bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
  (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    // >>>\
  \ correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
  )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n   \
  \ assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
  )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
  (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
  )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"\
  ()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack[Char]\n        for (c <- brackets) {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return false\n                stack.pop\n \
    \           }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty"]
stop_tokens:
- "\n    }\n"
