name: HumanEval_112_reverse_delete
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n    // then check if the\
  \ result string is palindrome.\n    // A string is called palindrome if it reads\
  \ the same backward as forward.\n    // You should return a tuple containing the\
  \ result string and True/False for the check.\n    // Example\n    // For s = \"\
  abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s = \"abcdef\"\
  , c = \"b\"  the result should be ('acdef',False)\n    // For s = \"abcdedcba\"\
  , c = \"ab\", the result should be ('cdedc',True)\n    def reverseDelete(s : String,\
  \ c : String) : Tuple2[String, Boolean] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
  abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
  ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
  ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"),\
  \ (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\"\
  )).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"\
  abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\"\
  , true))));\n    }\n\n}\n"
completions: ["        var result = s\n        for (i <- 0 until c.length) {\n   \
    \         result = result.replaceAll(c(i).toString, \"\")\n        }\n       \
    \ var isPalindrome = true\n        for (i <- 0 until result.length / 2) {\n  \
    \          if (result(i) != result(result.length - 1 - i)) {\n               \
    \ isPalindrome = false\n            }\n        }\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)", "        val result\
    \ = s.filterNot(c.contains(_))\n        (result, result == result.reverse)", " \
    \       // Write your code here\n        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val r = sb.toString\n        (r, r == r.reverse)", "     \
    \   val r = s.filterNot(c.contains(_))\n        (r, r == r.reverse)", "      \
    \  val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n       \
    \     if (!c.contains(s(i))) {\n                sb.append(s(i))\n            }\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)",
  "        val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        (sb.toString,\
    \ sb.toString == sb.toString.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        return (result, result\
    \ == result.reverse)", "        val result = s.filterNot(c.contains(_))\n    \
    \    (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", " \
    \       // Write your code here\n        return (\"\", false)", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val result = sb.toString\n        (result,\
    \ result == result.reverse)", "        val s1 = s.filterNot(c.contains(_))\n \
    \       (s1, s1 == s1.reverse)", "        val sb = new StringBuilder\n       \
    \ for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) {\n                sb.append(s(i))\n        \
    \    }\n        }\n        val result = sb.toString\n        (result, result ==\
    \ result.reverse)", "        val sb = new StringBuilder\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n\
    \        val result = sb.toString\n        val isPalindrome = result == result.reverse\n\
    \        (result, isPalindrome)", "        // Write your code here\n        return\
    \ (\"\", false)"]
stop_tokens:
- "\n    }\n"
