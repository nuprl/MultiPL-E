name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1,\
  \ 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val sides = Array(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val hyp = sides(2)\n        val cat1 = sides(0)\n\
    \        val cat2 = sides(1)\n        hyp * hyp == cat1 * cat1 + cat2 * cat2",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        if (a ==\
    \ 0 || b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n \
    \       val sum = a + b + c\n        val min = min(a, min(b, c))\n        val\
    \ mid = sum - max - min\n        if (max * max == min * min + mid * mid) return\
    \ true\n        return false", "        val s = List(a, b, c).sorted\n       \
    \ val (x, y, z) = (s(0), s(1), s(2))\n        x * x + y * y == z * z", "     \
    \   val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val l = List(a, b, c).sorted\n\
    \        val x = l(0)\n        val y = l(1)\n        val z = l(2)\n        x *\
    \ x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val\
    \ sum = sides.sum\n        val rest = sum - max\n        max * max == rest * rest",
  "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val catheti = sides(0)\
    \ + sides(1)\n        hypotenuse * hypotenuse == catheti * catheti", "       \
    \ val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n   \
    \     val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n   \
    \     if (a2 + b2 == c2) true else false", "        val sides = List(a, b, c).sorted\n\
    \        val max = sides(2)\n        val sum = sides.sum\n        val maxSquare\
    \ = max * max\n        val sumSquare = sum * sum\n        maxSquare == sumSquare\
    \ - maxSquare", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val catheti = sides(0) + sides(1)\n        hypotenuse *\
    \ hypotenuse == catheti * catheti", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val\
    \ base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base\
    \ * base", "        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        val\
    \ sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1)\
    \ == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n       \
    \ val hypotenuse = sides(2)\n        val catheti = sides(0) + sides(1)\n     \
    \   hypotenuse * hypotenuse == catheti * catheti", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val sumOfSquaresOfOtherSides\
    \ = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse * hypotenuse\
    \ == sumOfSquaresOfOtherSides", "        val sides = List(a, b, c).sorted\n  \
    \      val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n  \
    \      val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val (a1, b1, c1)\
    \ = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", " \
    \       val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1),\
    \ sides(2))\n        a * a + b * b == c * c", "        // a^2 + b^2 = c^2\n  \
    \      if (a * a + b * b == c * c) true else false", "        val sides = List(a,\
    \ b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n     \
    \   a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val other = sides(0) + sides(1)\n        max * max == other * other",
  "        val sides = Array(a, b, c).sorted\n        val c2 = sides(2)\n        val\
    \ c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 *\
    \ c0", "        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val c2 = sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n\
    \        c2 * c2 == c1 * c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val x = a * a\n        val y = b * b\n        val z = c\
    \ * c\n        if (x + y == z || x + z == y || y + z == x) true else false", " \
    \       val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = Array(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        if (a == 0 || b == 0 || c == 0) return\
    \ false\n        val sides = Array(a, b, c).sorted\n        val max = sides(2)\n\
    \        val min = sides(0)\n        val mid = sides(1)\n        if (max * max\
    \ == min * min + mid * mid) return true\n        return false", "        val sides\
    \ = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val\
    \ cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n      \
    \  val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "        val l\
    \ = List(a, b, c).sorted\n        l(0) * l(0) + l(1) * l(1) == l(2) * l(2)", " \
    \       val max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n   \
    \     val mid = a + b + c - max - min\n        max * max == min * min + mid *\
    \ mid", "        val max = List(a, b, c).max\n        val min = List(a, b, c).min\n\
    \        val mid = List(a, b, c).filter(x => x != max && x != min).head\n    \
    \    return max * max == min * min + mid * mid", "        val sides = List(a,\
    \ b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n  \
    \      a1 * a1 + b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n  \
    \      val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n  \
    \      return a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n    \
    \    val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n    \
    \    val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        val sides = Array(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        val sides\
    \ = List(a, b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n\
    \        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val\
    \ max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid\
    \ = a + b + c - max - min\n        max * max == mid * mid + min * min", "    \
    \    val sides = List(a, b, c).sorted\n        val x = sides(0)\n        val y\
    \ = sides(1)\n        val z = sides(2)\n        x * x + y * y == z * z", "   \
    \     val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "  \
    \      val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val z\
    \ = sides(2)\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        val sides = List(a, b, c).sorted\n        val x = sides(0)\n        val\
    \ y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z * z", " \
    \       val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        if (a > b && a > c) {\n            if (a * a == b * b +\
    \ c * c) true else false\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) true else false\n        } else {\n            if (c\
    \ * c == a * a + b * b) true else false\n        }", "        val sides = List(a,\
    \ b, c).sorted\n        val max = sides(2)\n        val sum = sides.sum\n    \
    \    val sum2 = sum - max\n        max * max == sum2 * sum2", "        val sides\
    \ = Array(a, b, c).sorted\n        val max = sides(2)\n        val sum = sides(0)\
    \ * sides(0) + sides(1) * sides(1)\n        max * max == sum", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        return\
    \ a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val c2 =\
    \ sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n        c2 *\
    \ c2 == c1 * c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n      \
    \  val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val base\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base *\
    \ base", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = Array(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        val sides = Array(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        var sides\
    \ = List(a, b, c)\n        sides = sides.sorted\n        val a = sides(0)\n  \
    \      val b = sides(1)\n        val c = sides(2)\n        a * a + b * b == c\
    \ * c", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n       \
    \ val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val sides\
    \ = Array(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1\
    \ == c1 * c1", "        val sides = List(a, b, c).sorted\n        val (a1, b1,\
    \ c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1",
  "        val sides = List(a, b, c).sorted\n        return sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val otherCathetus = sides(0)\n        hypotenuse * hypotenuse == cathetus\
    \ * cathetus + otherCathetus * otherCathetus", "        val l = List(a, b, c).sorted\n\
    \        l(0) * l(0) + l(1) * l(1) == l(2) * l(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        return (a2 + b2 ==\
    \ c2)", "        val l = List(a, b, c).sorted\n        val x = l(0)\n        val\
    \ y = l(1)\n        val z = l(2)\n        x * x + y * y == z * z", "        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n       \
    \ val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n       \
    \ if (a2 + b2 == c2) true else false", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + base * base", "        val l = List(a, b, c).sorted\n        l(0) * l(0) +\
    \ l(1) * l(1) == l(2) * l(2)", "        val sides = List(a, b, c).sorted\n   \
    \     val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n   \
    \     val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sorted = List(a, b, c).sorted\n\
    \        val x = sorted(0)\n        val y = sorted(1)\n        val z = sorted(2)\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val c2 = sides(2)\n        val\
    \ c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 *\
    \ c0", "        val sorted = List(a, b, c).sorted\n        val x = sorted(0)\n\
    \        val y = sorted(1)\n        val z = sorted(2)\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val c2 = sides(2)\n\
    \        val c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 *\
    \ c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n        val (a1, b1,\
    \ c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1",
  "        val sides = List(a, b, c).sorted\n        val x = sides(0)\n        val\
    \ y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z * z", " \
    \       if (a > b && a > c) {\n            if (a * a == b * b + c * c) return\
    \ true\n        } else if (b > a && b > c) {\n            if (b * b == a * a +\
    \ c * c) return true\n        } else if (c > a && c > b) {\n            if (c\
    \ * c == a * a + b * b) return true\n        }\n        return false", "     \
    \   val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        val sides\
    \ = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus\
    \ = sides(1)\n        val base = sides(0)\n        hypotenuse * hypotenuse ==\
    \ cathetus * cathetus + base * base", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   if (x + y <= z) return false\n        if (x * x + y * y == z * z) return true\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a,\
    \ b, c).sorted\n        val max = sides(2)\n        val sum = sides.sum\n    \
    \    val sum2 = sum - max\n        max * max == sum2 * sum2", "        val sides\
    \ = Array(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ Array(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        if (a > b && a > c) {\n       \
    \     if (a * a == b * b + c * c) return true\n        } else if (b > a && b >\
    \ c) {\n            if (b * b == a * a + c * c) return true\n        } else if\
    \ (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n  \
    \      }\n        return false", "        val sides = List(a, b, c).sorted\n \
    \       val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1\
    \ * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val a2\
    \ = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2\
    \ = sides(2) * sides(2)\n        a2 + b2 == c2", "        val s = List(a, b, c).sorted\n\
    \        val x = s(0)\n        val y = s(1)\n        val z = s(2)\n        x *\
    \ x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ max = sides(2)\n        val sum = sides.sum\n        val sum2 = sum * sum\n\
    \        val max2 = max * max\n        val rest2 = sum2 - max2\n        return\
    \ rest2 == max2", "        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "    \
    \    val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = Array(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = Array(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val max = sides(2)\n        val sum = sides.sum\n        val diff = sum\
    \ - max\n        max * max == diff * diff", "        if (a > b && a > c) {\n \
    \           if (a * a == b * b + c * c) return true\n        } else if (b > a\
    \ && b > c) {\n            if (b * b == a * a + c * c) return true\n        }\
    \ else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n\
    \        }\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  val sides = List(a, b, c).sorted\n        val x = sides(0)\n        val y =\
    \ sides(1)\n        val z = sides(2)\n        x * x + y * y == z * z", "     \
    \   val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1),\
    \ sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        if (a > b && a >\
    \ c) {\n            if (a * a == b * b + c * c) return true\n        } else if\
    \ (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n  \
    \      } else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return\
    \ true\n        }\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n  \
    \      val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n  \
    \      a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        if (a ==\
    \ 0 || b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n \
    \       val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n\
    \        max * max == min * min + mid * mid", "        val sides = List(a, b,\
    \ c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val c\
    \ = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "  \
    \      val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus = sides(1)\n        val otherCathetus = sides(0)\n      \
    \  hypotenuse * hypotenuse == cathetus * cathetus + otherCathetus * otherCathetus",
  "        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val cathetus2\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + cathetus2\
    \ * cathetus2", "        val sides = Array(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus = sides(1)\n        val otherCathetus = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus * cathetus + otherCathetus * otherCathetus",
  "        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val x = max(a, max(b, c))\n   \
    \     val y = min(a, min(b, c))\n        val z = a + b + c - x - y\n        x\
    \ * x == y * y + z * z", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides\
    \ = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        // a^2 + b^2 = c^2\n        val x = a * a + b\
    \ * b\n        val y = c * c\n        x == y", "        val sides = List(a, b,\
    \ c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a\
    \ * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n        val\
    \ (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        if (a1 + b1 <= c1) return\
    \ false\n        val a2 = a1 * a1\n        val b2 = b1 * b1\n        val c2 =\
    \ c1 * c1\n        if (a2 + b2 == c2) return true\n        return false", "  \
    \      val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse ==\
    \ catheti * catheti", "        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) return true\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) return true\n        } else if (c > a && c > b)\
    \ {\n            if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false", "        val sides = Array(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val\
    \ z = sides(2)\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        if (a == 0 || b == 0 || c == 0) return false\n\
    \        val max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n  \
    \      val mid = a + b + c - max - min\n        max * max == mid * mid + min *\
    \ min", "        val sides = Array(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val opposite = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + opposite * opposite", "        val sides\
    \ = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val base = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus * cathetus + base * base", "    \
    \    val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val\
    \ max = sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n   \
    \     max * max == min * min + mid * mid", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val sum\
    \ = sides.sum\n        val sum2 = sum * sum\n        val max2 = max * max\n  \
    \      val rest2 = sum2 - max2\n        val rest = sqrt(rest2).toLong\n      \
    \  return rest == max", "        val sides = List(a, b, c).sorted\n        val\
    \ (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 ==\
    \ c1 * c1", "        val sides = List(a, b, c).sorted\n        val c2 = sides(2)\n\
    \        val c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 *\
    \ c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val hypotenuse =\
    \ sides(2)\n        val cathetus = sides(1)\n        val opposite = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus * cathetus + opposite * opposite",
  "        val x = a * a\n        val y = b * b\n        val z = c * c\n        if\
    \ (x + y == z || x + z == y || y + z == x) true else false"]
stop_tokens:
- "\n    }\n"
