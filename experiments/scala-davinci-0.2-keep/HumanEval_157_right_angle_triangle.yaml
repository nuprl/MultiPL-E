name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1,\
  \ 2, 3) == False\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val sides = Array(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val hyp = sides(2)\n        val cat1 = sides(0)\n\
    \        val cat2 = sides(1)\n        hyp * hyp == cat1 * cat1 + cat2 * cat2",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        if (a ==\
    \ 0 || b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n \
    \       val sum = a + b + c\n        val min = min(a, min(b, c))\n        val\
    \ mid = sum - max - min\n        if (max * max == min * min + mid * mid) return\
    \ true\n        return false", "        val s = List(a, b, c).sorted\n       \
    \ val (x, y, z) = (s(0), s(1), s(2))\n        x * x + y * y == z * z", "     \
    \   val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val l = List(a, b, c).sorted\n\
    \        val x = l(0)\n        val y = l(1)\n        val z = l(2)\n        x *\
    \ x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val\
    \ sum = sides.sum\n        val rest = sum - max\n        max * max == rest * rest",
  "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val catheti = sides(0)\
    \ + sides(1)\n        hypotenuse * hypotenuse == catheti * catheti", "       \
    \ val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n   \
    \     val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n   \
    \     if (a2 + b2 == c2) true else false"]
stop_tokens:
- "\n    }\n"
