name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n   \
  \ // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys(0)\n        val firstIsLower = first.charAt(0).isLower\n\
    \        keys.forall(key => key.charAt(0).isLower == firstIsLower)", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n      \
    \  val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        return (lower.size == keys.size || upper.size\
    \ == keys.size)", "        if (dict.isEmpty) return false\n        val lower =\
    \ dict.keys.forall(x => x.toLowerCase == x)\n        val upper = dict.keys.forall(x\
    \ => x.toUpperCase == x)\n        lower || upper", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase ==\
    \ x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n         \
    \   if (lower.length == keys.length || upper.length == keys.length) true\n   \
    \         else false\n        }", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.forall(_.isUpper)\n        val firstKeyIsLower\
    \ = firstKey.forall(_.isLower)\n        if (firstKeyIsUpper) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (firstKeyIsLower) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false", "   \
    \     if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper", "        val keys = dict.keys\n        if (keys.isEmpty)\
    \ return false\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (!firstKeyIsLower && !firstKeyIsUpper) return false\n\
    \        val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n  \
    \      val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n    \
    \    allKeysAreLower || allKeysAreUpper", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        if\
    \ (lower || upper) return true\n        else return false", "        if (dict.size\
    \ == 0) return false\n        var lower = true\n        var upper = true\n   \
    \     for (key <- dict.keys) {\n            if (key.toLowerCase != key) lower\
    \ = false\n            if (key.toUpperCase != key) upper = false\n        }\n\
    \        return lower || upper", "        if (dict.isEmpty) return false\n   \
    \     val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        if (dict.size ==\
    \ 0) return false\n        val keys = dict.keys\n        val values = dict.values\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) return true\n        return false", "        if (dict.size\
    \ == 0) return false\n        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            dict.keys.forall(key => key.toLowerCase == key)\n\
    \        } else if (firstKey.toUpperCase == firstKey) {\n            dict.keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.size == 0) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false"]
stop_tokens:
- "\n    }\n"
