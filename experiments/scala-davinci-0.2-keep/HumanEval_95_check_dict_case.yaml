name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n   \
  \ // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys(0)\n        val firstIsLower = first.charAt(0).isLower\n\
    \        keys.forall(key => key.charAt(0).isLower == firstIsLower)", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n      \
    \  val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        return (lower.size == keys.size || upper.size\
    \ == keys.size)", "        if (dict.isEmpty) return false\n        val lower =\
    \ dict.keys.forall(x => x.toLowerCase == x)\n        val upper = dict.keys.forall(x\
    \ => x.toUpperCase == x)\n        lower || upper", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase ==\
    \ x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n         \
    \   if (lower.length == keys.length || upper.length == keys.length) true\n   \
    \         else false\n        }", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.forall(_.isUpper)\n        val firstKeyIsLower\
    \ = firstKey.forall(_.isLower)\n        if (firstKeyIsUpper) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (firstKeyIsLower) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false", "   \
    \     if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper", "        val keys = dict.keys\n        if (keys.isEmpty)\
    \ return false\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (!firstKeyIsLower && !firstKeyIsUpper) return false\n\
    \        val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n  \
    \      val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n    \
    \    allKeysAreLower || allKeysAreUpper", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        if\
    \ (lower || upper) return true\n        else return false", "        if (dict.size\
    \ == 0) return false\n        var lower = true\n        var upper = true\n   \
    \     for (key <- dict.keys) {\n            if (key.toLowerCase != key) lower\
    \ = false\n            if (key.toUpperCase != key) upper = false\n        }\n\
    \        return lower || upper", "        if (dict.isEmpty) return false\n   \
    \     val keys = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        if (dict.size ==\
    \ 0) return false\n        val keys = dict.keys\n        val values = dict.values\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) return true\n        return false", "        if (dict.size\
    \ == 0) return false\n        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            dict.keys.forall(key => key.toLowerCase == key)\n\
    \        } else if (firstKey.toUpperCase == firstKey) {\n            dict.keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.size == 0) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false", "        if (dict.isEmpty) return\
    \ false\n        val lower = dict.keys.forall(_.toLowerCase == _)\n        val\
    \ upper = dict.keys.forall(_.toUpperCase == _)\n        lower || upper", "   \
    \     if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n    \
    \        for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKey.toUpperCase == firstKey) {\n\
    \            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else return false\n        return true",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lowerKeys = keys.filter(x => x.toLowerCase == x)\n        val upperKeys\
    \ = keys.filter(x => x.toUpperCase == x)\n        if (lowerKeys.length == keys.length\
    \ || upperKeys.length == keys.length) return true\n        return false", "  \
    \      if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ lowerKeys = keys.filter(x => x.toLowerCase == x)\n        val upperKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lowerKeys.size == keys.size || upperKeys.size\
    \ == keys.size) true else false", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper = firstKey ==\
    \ firstKey.toUpperCase\n        if (firstKeyIsLower || firstKeyIsUpper) {\n  \
    \          val allKeysAreLower = keys.forall(k => k == k.toLowerCase)\n      \
    \      val allKeysAreUpper = keys.forall(k => k == k.toUpperCase)\n          \
    \  if (allKeysAreLower || allKeysAreUpper) return true\n        }\n        false",
  "        if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        val isLowerCase = firstKey.toLowerCase == firstKey\n        val isUpperCase\
    \ = firstKey.toUpperCase == firstKey\n        if (!isLowerCase && !isUpperCase)\
    \ return false\n        for (key <- dict.keys) {\n            if (isLowerCase\
    \ && key.toLowerCase != key) return false\n            if (isUpperCase && key.toUpperCase\
    \ != key) return false\n        }\n        true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        val keys = dict.keys\n        if (keys.isEmpty)\
    \ return false\n        val first = keys.head\n        if (first.toLowerCase ==\
    \ first) {\n            keys.forall(key => key.toLowerCase == key)\n        }\
    \ else {\n            keys.forall(key => key.toUpperCase == key)\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey == firstKey.toLowerCase\n\
    \        val firstKeyIsUpper = firstKey == firstKey.toUpperCase\n        if (firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else if (firstKeyIsUpper) {\n       \
    \     for (key <- keys) {\n                if (key != key.toUpperCase) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.isEmpty) return false\n        val isLower\
    \ = dict.keys.head.head.isLower\n        dict.keys.forall(x => x.head.isLower\
    \ == isLower)", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val firstIsLower = first.toLowerCase ==\
    \ first\n        val firstIsUpper = first.toUpperCase == first\n        if (firstIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstIsUpper) {\n            keys.forall(key => key.toUpperCase == key)\n \
    \       } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.length == keys.length || upper.length == keys.length)\
    \ return true\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            lower = lower && key.toLowerCase == key\n            upper =\
    \ upper && key.toUpperCase == key\n        }\n        lower || upper", "     \
    \   if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n    \
    \    val lowerCase = keys.forall(x => x.matches(\"[a-z]+\"))\n        val upperCase\
    \ = keys.forall(x => x.matches(\"[A-Z]+\"))\n        lowerCase || upperCase",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ first = keys.head\n        val firstUpper = first.toUpperCase\n        val firstLower\
    \ = first.toLowerCase\n        if (keys.forall(key => key == firstUpper || key\
    \ == firstLower)) true\n        else false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        if (first.toLowerCase == first) {\n            for (key <- keys) if (key.toLowerCase\
    \ != key) return false\n        } else {\n            for (key <- keys) if (key.toUpperCase\
    \ != key) return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val lower = dict.keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = dict.keys.forall(x => x.toUpperCase == x)\n     \
    \   lower || upper", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val first = keys.head\n        val firstIsLower\
    \ = first.head.isLower\n        for (key <- keys) {\n            if (key.head.isLower\
    \ != firstIsLower) return false\n        }\n        return true", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstKeyIsUpper) {\n            keys.forall(key => key.toUpperCase == key)\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        if (firstKey.toLowerCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        } else {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n   \
    \     val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val first = keys.head\n        if (first.toUpperCase\
    \ == first) {\n            keys.forall(x => x.toUpperCase == x)\n        } else\
    \ {\n            keys.forall(x => x.toLowerCase == x)\n        }", "        if\
    \ (dict.size == 0) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else if (firstKeyIsUpper) {\n       \
    \     for (key <- keys) {\n                if (key.toUpperCase != key) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.length\
    \ == keys.length || upper.length == keys.length) true else false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys.toList\n        val\
    \ lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.length == keys.length || upper.length\
    \ == keys.length) true else false", "        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.forall(_.isLower))\
    \ {\n            dict.keys.forall(_.forall(_.isLower))\n        } else if (firstKey.forall(_.isUpper))\
    \ {\n            dict.keys.forall(_.forall(_.isUpper))\n        } else {\n   \
    \         false\n        }", "        if (dict.isEmpty) return false\n       \
    \ val keys = dict.keys.toList\n        val lowerCase = keys.filter(x => x.forall(x\
    \ => x.isLower))\n        val upperCase = keys.filter(x => x.forall(x => x.isUpper))\n\
    \        if (lowerCase.length == keys.length || upperCase.length == keys.length)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lowerCase = keys.filter(_.forall(_.isLower))\n\
    \        val upperCase = keys.filter(_.forall(_.isUpper))\n        if (lowerCase.size\
    \ == keys.size || upperCase.size == keys.size) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCase = keys.forall(x => x.toLowerCase == x)\n        val upperCase\
    \ = keys.forall(x => x.toUpperCase == x)\n        lowerCase || upperCase", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(_.forall(_.isLower))\n        val upper = keys.filter(_.forall(_.isUpper))\n\
    \        if (lower.size == keys.size || upper.size == keys.size) true else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        val keys = dict.keys\n        if (keys.size == 0) return false\n      \
    \  val firstKey = keys.head\n        if (firstKey.head.isUpper) {\n          \
    \  keys.forall(key => key.head.isUpper)\n        } else {\n            keys.forall(key\
    \ => key.head.isLower)\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(key =>\
    \ key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (keys.forall(key => key == firstKeyUpper || key == firstKeyLower))\
    \ true\n        else false", "        if (dict.isEmpty) return false\n       \
    \ val keys = dict.keys.toList\n        val first = keys.head\n        val firstIsUpper\
    \ = first.head.isUpper\n        for (key <- keys) {\n            if (key.head.isUpper\
    \ != firstIsUpper) return false\n        }\n        return true", "        if\
    \ (dict.size == 0) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstChar = firstKey.charAt(0)\n        if (firstChar.isUpper)\
    \ {\n            for (key <- keys) {\n                if (key.charAt(0).isLower)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.charAt(0).isUpper) return false\n            }\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n  \
    \              if (key != key.toUpperCase) return false\n            }\n     \
    \   } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(key =>\
    \ key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val firstKey = keys.head\n\
    \            val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        \
    \    val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n            if (firstKeyIsLower)\
    \ {\n                keys.forall(key => key.toLowerCase == key)\n            }\
    \ else if (firstKeyIsUpper) {\n                keys.forall(key => key.toUpperCase\
    \ == key)\n            } else {\n                false\n            }\n      \
    \  }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) return true\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lower = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upper = keys.filter(key => key.toUpperCase == key)\n  \
    \      if (lower.size == keys.size || upper.size == keys.size) return true\n \
    \       false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.length == keys.length || upper.length == keys.length)\
    \ true else false", "        if (dict.size == 0) return false\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x =>\
    \ x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size == keys.size)\
    \ true else false", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(k => k.toLowerCase == k)\n        val upper =\
    \ keys.filter(k => k.toUpperCase == k)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) return true\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false", "        if (dict.size == 0) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.size == 0) return false\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.size == 0) return\
    \ false\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n   \
    \         if (key.toUpperCase != key) upper = false\n        }\n        return\
    \ lower || upper", "        if (dict.isEmpty) return false\n        var upper\
    \ = true\n        var lower = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toUpperCase != key) upper = false\n            if (key.toLowerCase\
    \ != key) lower = false\n        }\n        return upper || lower", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val lowerKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n        val upperKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lowerKeys.size == keys.size || upperKeys.size\
    \ == keys.size) true else false", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsLower) {\n            for (key <- keys) {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lowerKeys = keys.filter(x => x.forall(y => y.isLower))\n            val\
    \ upperKeys = keys.filter(x => x.forall(y => y.isUpper))\n            if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) true\n            else false\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey == firstKey.toLowerCase\n\
    \        val firstKeyIsUpper = firstKey == firstKey.toUpperCase\n        if (firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else if (firstKeyIsUpper) {\n       \
    \     for (key <- keys) {\n                if (key != key.toUpperCase) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.length\
    \ == keys.length || upper.length == keys.length) return true\n        false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lowerCase = keys.forall(x => x.toLowerCase == x)\n        val upperCase\
    \ = keys.forall(x => x.toUpperCase == x)\n        lowerCase || upperCase", " \
    \       if (dict.isEmpty) return false\n        var lower = true\n        var\
    \ upper = true\n        for (key <- dict.keys) {\n            if (key.exists(!_.isLower))\
    \ lower = false\n            if (key.exists(!_.isUpper)) upper = false\n     \
    \   }\n        return lower || upper", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isFirstKeyUpper\
    \ = firstKey.toUpperCase == firstKey\n        val isFirstKeyLower = firstKey.toLowerCase\
    \ == firstKey\n        if (!isFirstKeyUpper && !isFirstKeyLower) return false\n\
    \        val isAllUpper = keys.forall(key => key.toUpperCase == key)\n       \
    \ val isAllLower = keys.forall(key => key.toLowerCase == key)\n        if (isFirstKeyUpper\
    \ && isAllUpper) return true\n        if (isFirstKeyLower && isAllLower) return\
    \ true\n        false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.length\
    \ == keys.length || upper.length == keys.length) true else false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys.toList\n        val\
    \ lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.size == 0) return false\n   \
    \     val keys = dict.keys.toList\n        val firstKey = keys(0)\n        val\
    \ firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (firstKeyIsUpper || firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (firstKeyIsUpper && key.toUpperCase\
    \ != key) return false\n                if (firstKeyIsLower && key.toLowerCase\
    \ != key) return false\n            }\n            return true\n        }\n  \
    \      false", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsLowerCase = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLowerCase) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpperCase) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerCase = keys.forall(x => x.toLowerCase == x)\n          \
    \  val upperCase = keys.forall(x => x.toUpperCase == x)\n            lowerCase\
    \ || upperCase\n        }", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ for (key <- keys) {\n                if (firstKeyIsLower && key.toLowerCase\
    \ != key) return false\n                if (firstKeyIsUpper && key.toUpperCase\
    \ != key) return false\n            }\n            return true\n        }\n  \
    \      return false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upperKeys = keys.filter(x => x.toUpperCase == x)\n  \
    \          if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true\n\
    \            else false\n        }", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lowerKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerKeys.length == keys.length || upperKeys.length == keys.length)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) true else false", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstChar = firstKey.charAt(0)\n        if (firstChar.isLower) {\n\
    \            for (key <- keys) {\n                if (key.charAt(0).isUpper) return\
    \ false\n            }\n        } else {\n            for (key <- keys) {\n  \
    \              if (key.charAt(0).isLower) return false\n            }\n      \
    \  }\n        return true", "        if (dict.size == 0) return false\n      \
    \  val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val isLower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val isUpper = keys.forall(x => x.toUpperCase\
    \ == x)\n        return isLower || isUpper", "        if (dict.size == 0) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys(0)\n\
    \        val firstKeyIsLower = firstKey.charAt(0).isLower\n        for (key <-\
    \ keys) {\n            if (key.charAt(0).isLower != firstKeyIsLower) return false\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.size == 0) return\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.size == 0 || upperCaseKeys.size == 0) return\
    \ false\n        if (lowerCaseKeys.size + upperCaseKeys.size == keys.size) return\
    \ true\n        return false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val lowerCaseKeys = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n\
    \        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        } else if (firstKeyIsUpperCase) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys\n        val firstKey = keys.toList(0)\n\
    \        if (firstKey.forall(_.isUpper)) {\n            for (key <- keys) {\n\
    \                if (!key.forall(_.isUpper)) return false\n            }\n   \
    \     } else if (firstKey.forall(_.isLower)) {\n            for (key <- keys)\
    \ {\n                if (!key.forall(_.isLower)) return false\n            }\n\
    \        } else {\n            return false\n        }\n        return true",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x == x.toLowerCase)\n        val upper = keys.forall(x => x == x.toUpperCase)\n\
    \        lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ (lower, upper) = dict.keys.partition(_.forall(_.isLower))\n        lower.size\
    \ == dict.size || upper.size == dict.size", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false", "   \
    \     if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n  \
    \      val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n      \
    \  val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n        if\
    \ (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size) true else\
    \ false", "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == 0 || upper.size\
    \ == 0) return false\n        if (lower.size == keys.size || upper.size == keys.size)\
    \ return true\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false",
  "        if (dict.size == 0) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n\
    \            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.toUpperCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower || firstKeyIsUpper) {\n            val allKeysAreLower\
    \ = keys.forall(key => key.toLowerCase == key)\n            val allKeysAreUpper\
    \ = keys.forall(key => key.toUpperCase == key)\n            return allKeysAreLower\
    \ || allKeysAreUpper\n        }\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        if (first.forall(_.isUpper)) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (first.forall(_.isLower)) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.forall(x => x.toLowerCase == x)\n            val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n            lower || upper\n        }", "        if\
    \ (dict.size == 0) return false\n        val keys = dict.keys.toList\n       \
    \ val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase) {\n    \
    \        keys.forall(key => key.toUpperCase == key)\n        } else {\n      \
    \      false\n        }", "        if (dict.size == 0) return false\n        val\
    \ firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey) {\n\
    \            dict.keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstKey.toUpperCase == firstKey) {\n            dict.keys.forall(key => key.toUpperCase\
    \ == key)\n        } else {\n            false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val isFirstKeyLower = firstKey.toLowerCase\
    \ == firstKey\n        val isFirstKeyUpper = firstKey.toUpperCase == firstKey\n\
    \        if (!isFirstKeyLower && !isFirstKeyUpper) return false\n        val isAllKeysLower\
    \ = keys.forall(key => key.toLowerCase == key)\n        val isAllKeysUpper = keys.forall(key\
    \ => key.toUpperCase == key)\n        if (isFirstKeyLower && isAllKeysLower) return\
    \ true\n        if (isFirstKeyUpper && isAllKeysUpper) return true\n        false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.forall(x => x.forall(y => y.isLower))\n        val upper\
    \ = keys.forall(x => x.forall(y => y.isUpper))\n        if (lower || upper) true\
    \ else false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(key => key.toLowerCase == key)\n        val upper\
    \ = keys.filter(key => key.toUpperCase == key)\n        if (lower.size == keys.size\
    \ || upper.size == keys.size) true else false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val isFirstKeyLowerCase = firstKey.toLowerCase == firstKey\n        val isFirstKeyUpperCase\
    \ = firstKey.toUpperCase == firstKey\n        if (!isFirstKeyLowerCase && !isFirstKeyUpperCase)\
    \ return false\n        for (key <- keys) {\n            if (isFirstKeyLowerCase\
    \ && key.toLowerCase != key) return false\n            if (isFirstKeyUpperCase\
    \ && key.toUpperCase != key) return false\n        }\n        true", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstChar = firstKey.charAt(0)\n        if (firstChar.isUpper)\
    \ {\n            for (key <- keys) {\n                if (key.charAt(0).isLower)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.charAt(0).isUpper) return false\n            }\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase) {\n    \
    \        keys.forall(key => key.toUpperCase == key)\n        } else {\n      \
    \      false\n        }", "        if (dict.isEmpty) return false\n        var\
    \ isLower = false\n        var isUpper = false\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase == key) isLower = true\n            if (key.toUpperCase\
    \ == key) isUpper = true\n        }\n        if (isLower && isUpper) return false\n\
    \        return true", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.length\
    \ == keys.length || upper.length == keys.length) return true\n        false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsUpper = firstKey.toUpperCase ==\
    \ firstKey\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n \
    \       if (firstKeyIsUpper) {\n            for (key <- keys) {\n            \
    \    if (key.toUpperCase != key) return false\n            }\n        } else if\
    \ (firstKeyIsLower) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toUpperCase ==\
    \ key)\n        }", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val first = keys.head\n        val firstIsUpper\
    \ = first.head.isUpper\n        val firstIsLower = first.head.isLower\n      \
    \  if (firstIsUpper) {\n            keys.forall(key => key.head.isUpper)\n   \
    \     } else if (firstIsLower) {\n            keys.forall(key => key.head.isLower)\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) return true\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val isFirstKeyUpper = firstKey.toUpperCase == firstKey\n        val isFirstKeyLower\
    \ = firstKey.toLowerCase == firstKey\n        if (!isFirstKeyUpper && !isFirstKeyLower)\
    \ return false\n        for (key <- keys) {\n            if (isFirstKeyUpper)\
    \ {\n                if (key.toUpperCase != key) return false\n            } else\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        }\n        true", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val first = keys.head\n        val firstIsUpper =\
    \ first.head.isUpper\n        val firstIsLower = first.head.isLower\n        if\
    \ (firstIsUpper) {\n            for (key <- keys) {\n                if (key.head.isLower)\
    \ return false\n            }\n        } else if (firstIsLower) {\n          \
    \  for (key <- keys) {\n                if (key.head.isUpper) return false\n \
    \           }\n        } else {\n            return false\n        }\n       \
    \ return true", "        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys\n        val first = keys.head\n        val lower = first.toLowerCase\n\
    \        val upper = first.toUpperCase\n        if (lower == upper) return false\n\
    \        for (key <- keys) {\n            if (key != lower && key != upper) return\
    \ false\n        }\n        return true", "        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.forall(_.isLower))\
    \ {\n            dict.keys.forall(_.forall(_.isLower))\n        } else if (firstKey.forall(_.isUpper))\
    \ {\n            dict.keys.forall(_.forall(_.isUpper))\n        } else {\n   \
    \         false\n        }", "        if (dict.isEmpty) return false\n       \
    \ var lower = true\n        var upper = true\n        for (k <- dict.keys) {\n\
    \            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val isFirstKeyLowerCase = firstKey.forall(_.isLower)\n\
    \        val isFirstKeyUpperCase = firstKey.forall(_.isUpper)\n        if (isFirstKeyLowerCase)\
    \ {\n            keys.forall(_.forall(_.isLower))\n        } else if (isFirstKeyUpperCase)\
    \ {\n            keys.forall(_.forall(_.isUpper))\n        } else {\n        \
    \    false\n        }", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val first = keys.head\n        val firstChar = first.charAt(0)\n\
    \        val firstIsUpper = firstChar.isUpper\n        for (key <- keys) {\n \
    \           val char = key.charAt(0)\n            if (char.isUpper != firstIsUpper)\
    \ return false\n        }\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lowerKeys = keys.filter(x =>\
    \ x.toLowerCase == x)\n        val upperKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerKeys.size == keys.size || upperKeys.size == keys.size)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n  \
    \      if (lowerCaseKeys.length == keys.length || upperCaseKeys.length == keys.length)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val lowerKeys = keys.filter(x => x.toLowerCase == x)\n\
    \        val upperKeys = keys.filter(x => x.toUpperCase == x)\n        if (lowerKeys.size\
    \ == 0 || upperKeys.size == 0) return false\n        return true", "        if\
    \ (dict.isEmpty) return false\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase != key) lower\
    \ = false\n            if (key.toUpperCase != key) upper = false\n        }\n\
    \        return lower || upper", "        if (dict.isEmpty) return false\n   \
    \     val isLower = dict.keys.head.forall(_.isLower)\n        dict.keys.forall(key\
    \ => key.forall(_.isLower) == isLower)", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ isFirstLower = first.toLowerCase == first\n        val isFirstUpper = first.toUpperCase\
    \ == first\n        if (isFirstLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (isFirstUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCase = keys.forall(x => x.forall(y => y.isLower))\n        val\
    \ upperCase = keys.forall(x => x.forall(y => y.isUpper))\n        if (lowerCase\
    \ || upperCase) return true\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(k => k == firstUpper || k == firstLower)) true\n    \
    \    else false", "        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys.toList\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n    \
    \        for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKey.toUpperCase == firstKey) {\n\
    \            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else return false\n        return true",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val first = keys.head\n        val isLower = first.toLowerCase == first\n\
    \        val isUpper = first.toUpperCase == first\n        if (isLower) {\n  \
    \          for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (isUpper) {\n            for (key <-\
    \ keys) {\n                if (key.toUpperCase != key) return false\n        \
    \    }\n        } else {\n            return false\n        }\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val isUpper = first.toUpperCase == first\n\
    \        val isLower = first.toLowerCase == first\n        if (isUpper) {\n  \
    \          keys.forall(key => key.toUpperCase == key)\n        } else if (isLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else {\n\
    \            false\n        }", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsLower) {\n            for (key <- keys) {\n       \
    \         if (key.toLowerCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys.toList\n        val lower =\
    \ keys.filter(_.forall(_.isLower))\n        val upper = keys.filter(_.forall(_.isUpper))\n\
    \        if (lower.size == keys.size || upper.size == keys.size) return true\n\
    \        return false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.length\
    \ == keys.length || upper.length == keys.length) true else false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys.toList\n        val\
    \ lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lowerCase = keys.filter(x => x ==\
    \ x.toLowerCase)\n        val upperCase = keys.filter(x => x == x.toUpperCase)\n\
    \        if (lowerCase.size == keys.size || upperCase.size == keys.size) true\
    \ else false", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys(0)\n        val isLower = first.toLowerCase == first\n\
    \        val isUpper = first.toUpperCase == first\n        if (isLower) {\n  \
    \          keys.forall(key => key.toLowerCase == key)\n        } else if (isUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val lower = keys.filter(x => x.forall(c =>\
    \ c.isLower))\n        val upper = keys.filter(x => x.forall(c => c.isUpper))\n\
    \        if (lower.size == keys.size || upper.size == keys.size) true else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            for (key <- keys) {\n            \
    \    if (key.toLowerCase != key) return false\n            }\n        } else if\
    \ (firstKeyIsUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(k => k == firstUpper || k == firstLower)) true\n    \
    \    else false", "        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstChar = firstKey.charAt(0)\n        if (firstChar.isUpper) {\n  \
    \          for (key <- keys) {\n                if (key.charAt(0).isLower) return\
    \ false\n            }\n        } else {\n            for (key <- keys) {\n  \
    \              if (key.charAt(0).isUpper) return false\n            }\n      \
    \  }\n        return true", "        if (dict.size == 0) return false\n      \
    \  val firstKey = dict.keys.toList(0)\n        if (firstKey(0).isUpper) {\n  \
    \          for (key <- dict.keys) {\n                if (key(0).isLower) return\
    \ false\n            }\n        } else {\n            for (key <- dict.keys) {\n\
    \                if (key(0).isUpper) return false\n            }\n        }\n\
    \        return true", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = keys.forall(x => x.toUpperCase == x)\n        lower || upper",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val first = keys.head\n        if (first.toLowerCase == first) {\n   \
    \         keys.forall(key => key.toLowerCase == key)\n        } else {\n     \
    \       keys.forall(key => key.toUpperCase == key)\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        if (firstKey.toLowerCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        } else {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val first = keys.head\n       \
    \ if (first.forall(_.isUpper)) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (first.forall(_.isLower)) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val firstKey = dict.keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            dict.keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n        \
    \    dict.keys.forall(key => key.toUpperCase == key)\n        } else {\n     \
    \       false\n        }", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys.toList\n        val lowerCase = keys.forall(key => key.toLowerCase\
    \ == key)\n        val upperCase = keys.forall(key => key.toUpperCase == key)\n\
    \        lowerCase || upperCase", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val lower = keys.forall(x => x ==\
    \ x.toLowerCase)\n        val upper = keys.forall(x => x == x.toUpperCase)\n \
    \       lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else return false\n        return\
    \ true", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == 0 || upper.size\
    \ == 0) return false\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    if (firstKey.toUpperCase == firstKey) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toLowerCase ==\
    \ key)\n        }", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys.toList\n        val firstKey = keys(0)\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerKeys = keys.filter(_.forall(_.isLower))\n        val upperKeys\
    \ = keys.filter(_.forall(_.isUpper))\n        if (lowerKeys.length == keys.length\
    \ || upperKeys.length == keys.length) return true\n        false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstChar = firstKey.charAt(0)\n        if (firstChar.isUpper)\
    \ {\n            keys.forall(key => key.forall(c => c.isUpper))\n        } else\
    \ {\n            keys.forall(key => key.forall(c => c.isLower))\n        }", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val firstIsLower = first.toLowerCase ==\
    \ first\n        val firstIsUpper = first.toUpperCase == first\n        if (firstIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstIsUpper) {\n            keys.forall(key => key.toUpperCase == key)\n \
    \       } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lowerKeys = keys.filter(x =>\
    \ x.forall(y => y.isLower))\n        val upperKeys = keys.filter(x => x.forall(y\
    \ => y.isUpper))\n        if (lowerKeys.size == keys.size || upperKeys.size ==\
    \ keys.size) return true\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        if (firstKey.toUpperCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toUpperCase != key) return false\n            }\n\
    \        } else if (firstKey.toLowerCase == firstKey) {\n            for (key\
    \ <- keys) {\n                if (key.toLowerCase != key) return false\n     \
    \       }\n        } else return false\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val firstIsLower = first == first.toLowerCase\n        val allLower =\
    \ keys.forall(x => x == x.toLowerCase)\n        val allUpper = keys.forall(x =>\
    \ x == x.toUpperCase)\n        if (firstIsLower) allLower else allUpper", "  \
    \      if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsUpper = firstKey.toUpperCase ==\
    \ firstKey\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n \
    \       if (firstKeyIsUpper || firstKeyIsLower) {\n            val allKeysAreUpper\
    \ = keys.forall(key => key.toUpperCase == key)\n            val allKeysAreLower\
    \ = keys.forall(key => key.toLowerCase == key)\n            if (allKeysAreUpper\
    \ || allKeysAreLower) return true\n        }\n        false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toArray\n        val first = keys(0)\n        val firstIsLower\
    \ = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase ==\
    \ first\n        if (firstIsLower) {\n            for (key <- keys) {\n      \
    \          if (key.toLowerCase != key) return false\n            }\n        }\
    \ else if (firstIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = dict.keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys.toList\n        val first =\
    \ keys(0)\n        val firstIsUpper = first.toUpperCase == first\n        val\
    \ firstIsLower = first.toLowerCase == first\n        if (firstIsUpper || firstIsLower)\
    \ {\n            val allUpper = keys.forall(k => k.toUpperCase == k)\n       \
    \     val allLower = keys.forall(k => k.toLowerCase == k)\n            return\
    \ allUpper || allLower\n        }\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.length == keys.length || upper.length == keys.length)\
    \ return true\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false",
  "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.size == 0) return\
    \ false\n        val keys = dict.keys.toList\n        val first = keys(0)\n  \
    \      val firstIsUpper = first.toUpperCase == first\n        val firstIsLower\
    \ = first.toLowerCase == first\n        if (firstIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else if (firstIsLower) {\n           \
    \ keys.forall(key => key.toLowerCase == key)\n        } else {\n            false\n\
    \        }"]
stop_tokens:
- "\n    }\n"
